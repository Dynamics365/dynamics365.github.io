<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title>Dynamics 365 for finance and operations - Tag - Dynamics 365 &amp; Power Platform | nuxulu.com</title>
        <link>https://nuxulu.com/tags/dynamics-365-for-finance-and-operations/</link>
        <description>Dynamics 365 for finance and operations - Tag - Dynamics 365 &amp; Power Platform | nuxulu.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>luan52@outlook.com (Max Nguyen)</managingEditor>
            <webMaster>luan52@outlook.com (Max Nguyen)</webMaster><lastBuildDate>Mon, 07 Aug 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://nuxulu.com/tags/dynamics-365-for-finance-and-operations/" rel="self" type="application/rss+xml" /><item>
    <title>Exception Handling in Dynamics 365 For Finance and Operation</title>
    <link>https://nuxulu.com/2017-08-07-exception-handling-in-dynamics-365-for-finance-and-operation/</link>
    <pubDate>Mon, 07 Aug 2017 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><dc:creator>Max Nguyen</dc:creator><guid>https://nuxulu.com/2017-08-07-exception-handling-in-dynamics-365-for-finance-and-operation/</guid>
    <description><![CDATA[<p>When we write a code, or make a customization to Dynamics 365 For Operation which is using X++ should make use of Exception Handling to provide some context for the message or a different more useful message. In this article, I will be exploring how I can come up with a uniform way to catch multiple types of exception that can be raised in X++.</p>
<h3 id="1-exception-type">1. Exception type</h3>
<p>There are many several types of exception and the type differs depending on what caused the error. Much of exception types are determined by the kernel and are not normally thrown by application code. All <strong>exception types</strong>, however, can be caught, and it is the developersâ€™ responsibility to decide which exceptions need to be handled.</p>
<p>The exception type is identified using the system-based enumeration called an exception. Because it is a system Enum, it cannot be modified, so users cannot add new exception types.</p>
<p>The following table shows the exception literals that are the values of the Exception enumeration.</p>
<figure class='center '>
  <a href="/imagesposts/2017-08-07_10h00_37.png"></a>
</figure>
<h3 id="2-key-commands">2. Key commands</h3>
<p>The <strong>Try</strong> command signifies the start of a block of code that you want to control with the X++ exception handling system. Any exceptions that are thrown in that block of code can be caught and handled accordingly. The block of code inside the Try statement must be contained between brackets ( { } ).</p>
<p><strong>Catch</strong> statements come after the block of code and define what code is executed when each exception is thrown.</p>
<p>You do not have to define a catch statement for every possible exception; however, each try statement must have at least one catch statement.</p>
<p>A <strong>Retry</strong> command tells the system to go back to the Try statement and attempt to execute the code again. Any data that was loaded before the Try command will remain as it was, but any data retrieved or modified after the Try statement will be refreshed.</p>
<p>When a deadlock exception is thrown, all locks on tables that this process holds are released, which may allow the other process or processes that are also deadlocked to continue.</p>
<p>By calling a retry, the process can attempt to update the record again and may now be able to complete. It is a best practice that a retry uses a counter so that the number of retries can be controlled, and a user does not become stuck in a loop.</p>
<p>The <strong>final</strong> keyword is now available to follow the try and catch keywords. The semantics are identical to the semantics in C#. The statements provided in the final clause is executed irrespective of whether the try block threw any exceptions.</p>
<h3 id="3-code-statement">3. Code Statement</h3>
<p>We will use these lines of code example here for testing Exception handling</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#"><span class="k">class</span> <span class="nc">CustCreateCustomer</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="n">Args</span> <span class="m">_</span><span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">CustCreateCustomer</span> <span class="n">custCreateCustomer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustCreateCustomer</span><span class="p">();</span>
        <span class="n">custCreateCustomer</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="n">run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Dialog</span>          <span class="n">dlg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dialog</span><span class="p">(</span><span class="s">&#34;Create new customer&#34;</span><span class="p">);</span>
        <span class="n">DialogField</span>     <span class="n">dlgCust</span><span class="p">;</span>
        <span class="n">DialogField</span>     <span class="n">dlgGrp</span><span class="p">;</span>
        <span class="n">CustTable</span> <span class="n">custTable</span><span class="p">;</span>

        <span class="n">dlgCust</span> <span class="p">=</span> <span class="n">dlg</span><span class="p">.</span><span class="n">addField</span><span class="p">(</span><span class="n">extendedTypeStr</span><span class="p">(</span><span class="n">CustVendAc</span><span class="p">),</span> <span class="s">&#34;Customer account&#34;</span><span class="p">);</span>
        <span class="n">dlgGrp</span>  <span class="p">=</span> <span class="n">dlg</span><span class="p">.</span><span class="n">addField</span><span class="p">(</span><span class="n">extendedTypeStr</span><span class="p">(</span><span class="n">CustGroupId</span><span class="p">));</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">dlg</span><span class="p">.</span><span class="n">run</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">custTable</span><span class="p">.</span><span class="n">AccountNum</span>    <span class="p">=</span> <span class="n">dlgCust</span><span class="p">.</span><span class="k">value</span><span class="p">();</span>
                <span class="n">custTable</span><span class="p">.</span><span class="n">CustGroup</span>     <span class="p">=</span> <span class="n">dlgGrp</span><span class="p">.</span><span class="k">value</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">custTable</span><span class="p">.</span><span class="n">validateWrite</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="n">error</span><span class="p">(</span><span class="s">&#34;Please enter all required fields.&#34;</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">custTable</span><span class="p">.</span><span class="n">insert</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">::</span><span class="n">Error</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">error</span><span class="p">(</span><span class="s">&#34;An error occurred. Please try again&#34;</span><span class="p">);</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This code will try to create a customer after revived inputted value from users, this code also handling errors when user do not input enough information. A <code>Throw</code> statement is used to throw an error that can be caught by a Catch statement. When the system throws an exception <code>ttsabort</code> is called automatically, and so does not have to be called in a Catch statement.</p>
<h3 id="4-optimistic-concurrency-exceptions">4. Optimistic Concurrency Exceptions</h3>
<p>The <strong>optimistic concurrency check</strong> (OCC) is a performance enhancing function within Microsoft Dynamics 365 For Operation. It presumes that any record retrieved from the database is not updated until it is proven to be updated by the database. This means that fewer locks must be placed on records in the database. This allows for faster access for other users.</p>
<p>This also means that one user can update a record after another user has retrieved it from the database. This can cause data inconsistency. If the second user then also tries to update the record, an <code>UpdateConflict</code> exception is thrown. The system does this by comparing the <code>recVersion</code> field on the record buffer at runtime and the actual record in the database. The <code>recVersion</code> field value is changed every time that an update is successfully made to a record.</p>
<p>There are two main table update exceptions, <code>UpdateConflict</code> and <code>DeadLock</code>. An update conï¬‚ict occurs due to the optimistic concurrency failing, whereas a deadlock is the classic database scenario where both transactions have each locked a table that the other needs.</p>
<p><strong>Update conï¬‚icts</strong> are normally handled within the insert, delete, and update methods of a table. The <strong>BOM table</strong> is a good example of this. You may also hard to find many examples where this has been used. We use this pattern only if we deem it to be required. The code within the table&rsquo;s update method also updates other records, so it has been written to handle update conï¬‚icts.</p>
<p>The following code is an example of how to handle the UpdateConflict exception that might be thrown.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#"><span class="k">public</span> <span class="k">void</span> <span class="n">update</span><span class="p">()</span>
<span class="p">{</span>
    <span class="err">#</span><span class="n">OCCRetryCount</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">ttsbegin</span><span class="p">;</span>
        <span class="c1">// code that updates records in other tables
</span><span class="c1"></span>        <span class="n">super</span><span class="p">();</span> <span class="c1">// do the update
</span><span class="c1"></span>        <span class="c1">// other code that updates records in other tables
</span><span class="c1"></span>        <span class="n">ttscommit</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//Deadlock
</span><span class="c1"></span>    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">::</span><span class="n">Deadlock</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">retry</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//UpdateConflict
</span><span class="c1"></span>    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">::</span><span class="n">UpdateConflict</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">appl</span><span class="p">.</span><span class="n">ttsLevel</span><span class="p">()</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">xSession</span><span class="p">::</span><span class="n">currentRetryCount</span><span class="p">()</span> <span class="p">&gt;=</span> <span class="err">#</span><span class="n">RetryNum</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">Exception</span><span class="p">::</span><span class="n">UpdateConflictNotRecovered</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">retry</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">Exception</span><span class="p">::</span><span class="n">UpdateConflict</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If a conflict due to OCC occurs, the system throws the <code>UpdateConflict</code> exception and it is caught by the catch statement.</p>
<p>The other new element here is <code>ttsLevel</code>. Since transactions can be nested, we do want the exception to falling through to the parent transaction if one exists. If <code>ttsabort</code> is issued (directly or due to a throwing error) at any level, the whole transaction will be rolled back; we can&rsquo;t roll back just the level where the error is thrown.</p>
<p>The code checks the current TTS level. If it is not Zero, in other words, it is still in a TTS transaction, it throws another <code>UpdateConflict</code> exception to the next Catch list of the next outer Try statement in scope. This continues until it is no longer inside a TTS transaction. We must make sure that when the code is retired, all data is refreshed.</p>
<p>It is important that we don&rsquo;t retry indefinitely, as this may cause the client to hang. To control this, we use <code>xSession::currentRetryCount()</code> to get the number of retries and check this against the <code>#RetryNum</code> macro. The macro defines the standard number of retries deemed appropriate by Microsoft, which is five.
then the <code>UpdateConflictNotRecovered</code> exception is thrown. This means the whole transaction is aborted and stops retrying.</p>
<h3 id="5-conclusion">5. Conclusion</h3>
<p>We do not, in any case, want an error to be thrown that stops the form from opening. Also, if there is an error, we need to decide whether the user actually needs to know that an error occurred. It may be enough for our purposes that the fields don&rsquo;t appear, and we can use the debugger to trace through the code to determine why.</p>
<p>Thank you for reading!</p>]]></description>
</item><item>
    <title>Management reporter in new AX, Dynamics 365 For Operation</title>
    <link>https://nuxulu.com/2017-07-24-management-reporter-in-dynamics-365-for-operation/</link>
    <pubDate>Mon, 24 Jul 2017 01:33:44 &#43;0000</pubDate><author>luan52@outlook.com</author><dc:creator>Max Nguyen</dc:creator><guid>https://nuxulu.com/2017-07-24-management-reporter-in-dynamics-365-for-operation/</guid>
    <description><![CDATA[<h3 id="1-overview-management-reporter-in-new-ax">1. Overview Management Reporter in New AX</h3>
<p>Management Reporter is now <strong>Financial reports</strong>.</p>
<p>As you know Management Reporter is a real-time financial reporting application that is designed to empower information workers to quickly and easily create, generate, secure, and publish financial statements, such as Profit and Loss statements, balance sheets, and cash flow reports.</p>
<p>In Dynamics 365 For Operation, I can access these reports within AX means directly <em>from the web client in the browser</em>. This feature allows me to run financial statements, such as a balance sheet and income statements.</p>
<p>The <strong>22 default</strong> reports that are included, default financial reports including income statements, balance sheet reports, cash flow statements, and general ledger reports, which can be modified depending on your companyâ€™s requirements.</p>
<p>Here is the list</p>
<figure class='center '>
  <a href="/imagesposts/Financial_reports.png"></a>
</figure>
<h3 id="2-access">2. Access</h3>
<p>You can find the financial reporting menu in Dynamics 365 For Operation by visiting</p>
<p><em><strong>General Ledger &gt; Inquiries and reports &gt; Financial reporting.</strong></em></p>
<p>Although, there are some privileges and duties relating to this. These report functions are available to users that have their appropriate privileges and duties assigned to them already.
In order to view, edit, and manage reports in Management Reporter you need to add security administrator role to business Users. Besides, if you only need users can run the financial reports then you have to add the appropriate privileges and duties assigned to them.</p>
<p>Before creating and generating financial reports for a legal entity, you must be done set up for that legal entity:</p>
<ul>
<li>Fiscal calendar</li>
<li>Ledger</li>
<li>Chart of Accounts</li>
<li>Currency</li>
</ul>
<h3 id="3-management-reporter-benefits">3. Management Reporter Benefits</h3>
<p>With Management Reporter, business users can:</p>
<ul>
<li>Create their own boardroom-quality reports without IT assistance.</li>
<li>Take advantage of secure report distribution through the centralized Report Library.</li>
<li>Gain strong support for regulatory compliance (Change the report date, currency, view in Summary view or a detailed view, Add either dimension filters or attribute filters).</li>
<li>Report design flexibility likes Save dimension combinations, and reuse the dimensions for multiple reports. Management Report Components.</li>
<li>Financial report collaboration:
<ul>
<li>Schedule reports so that they are automatically generated on a daily, weekly, monthly, or annual basis.</li>
<li>Export to the read-only XPS format, which provides better document security through digital signatures.</li>
<li>Export to a Microsoft Excel worksheet.</li>
<li>To share reports, you can create email messages that contain links to the reports.</li>
</ul>
</li>
</ul>
<h3 id="4-management-report-components">4. Management Report Components</h3>
<p>Some important components I want to mention here:</p>
<ul>
<li><strong>Report Designer</strong>
Create report building blocks that can be combined to define and generate a report. The report wizard guides less experienced users through the design process. Advanced users can create new report building blocks or modify existing building blocks to meet their requirements.</li>
<li><strong>Desktop Viewer</strong> 
Used to organize and view reports and supporting files. It also stores the report library.</li>
<li><strong>Web Viewer</strong> 
Displays Management Reporter reports in a web browser. The Web Viewer does not require an installation of Management Reporter server components.</li>
<li><strong>Report schedules</strong> 
A user can schedule a single report or a group of reports to generate regularly.</li>
<li><strong>Management Reporter database</strong>
This SQL database stores the components, known as building blocks, which are used to generate reports. It also stores report definitions and previously generated reports.</li>
<li><strong>Application service</strong> 
Controls access to the data provider and provides connectivity to clients.</li>
<li><strong>Process service</strong> 
Generates the reports that are created and queued by the Management Reporter client.</li>
</ul>
<h3 id="5-generate-financial-reports">5. Generate financial reports</h3>
<p>We are currently at Financial reports screen as picture below</p>
<figure class='center '>
  <a href="/imagesposts/2017-04-10_11h56_15.png"></a>
</figure>
<p>As you can see there&rsquo;s nowhere on the screen or anything that indicates that there&rsquo;s the Management Reporter available, but if we click this <code>edit</code> button and entering your email account and password. After you log in, it will open the <strong>Report Definitions</strong> Management Reporter window for us.</p>
<figure class='center '>
  <a href="/imagesposts/2017-04-10_11h57_20.png"></a>
</figure>
<p>On the left, here we have a list of all the same reports that we were looking at in AX.
Let&rsquo;s look at <code>the income statement - default report</code>, So I have a couple parameter fields we need to change before we can generate our report. Please prefer below picture</p>
<figure class='center '>
  <a href="/imagesposts/2017-04-10_12h08_53.png"></a>
</figure>
After we click **generate** button, Financial will be generated on current web browser
<figure class='center '>
  <a href="/imagesposts/2017-04-10_12h11_29.png"></a>
</figure>
we can see here by the report date.  So, on our income statement, we have all the usual fields here.  We have total revenues, gross profit, total operating experiences, net operating income and net income. That all is pretty standard and it all looks good.
<h3 id="6-conclusion">6. Conclusion</h3>
<p>Row, Column, Tree, Report definitions work essentially the same as they did in <strong>Dynamics AX 2012</strong>. I can still use row, column, and tree definitions with multiple reports, and options for the Report definition tabs.</p>
<figure class='center '>
  <a href="/imagesposts/2017-04-10_14h57_51.png"></a>
</figure>
<p>Here are some of the functions that are not available in Financial Reporting for Dynamics 365 for Operations:</p>
<ul>
<li>Publishing/distributing reports to SharePoint and/or SharePoint Online locations is not available.</li>
<li>Report Viewer/Library has been removed.</li>
<li>Import data from an Excel file is not available.</li>
<li>XBRL (extensible Business Reporting Language) is no longer available.</li>
<li>Comments are not currently available in the web client.</li>
<li>Running a consolidation between companies in different instances of AX is not available.</li>
<li>The Wizard has been removed.</li>
<li>Management Reporter includes direct integration with the Microsoft Dynamics AX general ledger so that there is no need to create a custom connection to the data source.</li>
</ul>
<p>Nevertheless, with custom reporting structures, ledger accounts, and dimensions mapping, creation and the capabilities to publish reports to multiple channels and formats from the desktop, and embedding transactional and analytical reports into a customizable dashboard, Financial Reporting in Dynamics 365 For Operation is all set to simplify the financial reporting process, providing instant insight into your financials.</p>
<p>Thank you for reading!</p>]]></description>
</item></channel>
</rss>
