<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>programming - Tag - Dynamics 365 &amp; Power Platform | NUXULU</title>
        <link>https://nuxulu.com/tags/programming/</link>
        <description>programming - Tag - Dynamics 365 &amp; Power Platform | NUXULU</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>luan52@outlook.com</managingEditor>
            <webMaster>luan52@outlook.com</webMaster><lastBuildDate>Thu, 19 Jan 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://nuxulu.com/tags/programming/" rel="self" type="application/rss+xml" /><item>
    <title>Number sequence farmework overview in Dynamics AX 2012</title>
    <link>https://nuxulu.com/2017-01-19-number-sequence-farmework-in-dynamics-ax-2012/</link>
    <pubDate>Thu, 19 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2017-01-19-number-sequence-farmework-in-dynamics-ax-2012/</guid>
    <description><![CDATA[<figure class='center '>
  <a href="/imagesposts/number-sequence-overview.png#center"></a>
</figure>
<p>For this demo, I will create New module along with NumberSequence, about creating Number Sequence <em>without</em> module you also use same steps just leave some steps base on Design picture above.</p>
<h2 id="etd">ETD</h2>
<p>Create ETD <code>ContosoId</code> extends <code>num</code> datatype.</p>
<h2 id="table">Table</h2>
<p>Create <code>Contoso</code> Table with <code>ContosoId</code> field.</p>
<h2 id="enum">Enum</h2>
<p>Create a new enum value <code>Contoso</code> in BaseEnum <code>NumberSeqModule</code>.</p>
<p>This value will be used to link number sequence to the module and to restrict displayed number sequence by module in Form.</p>]]></description>
</item><item>
    <title>Recalculate InventSum in Dynamics AX</title>
    <link>https://nuxulu.com/2017-01-02-recalculate-inventsum/</link>
    <pubDate>Mon, 02 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2017-01-02-recalculate-inventsum/</guid>
    <description><![CDATA[InventSum is needed to recalculate sometimes. We should use InventSumRecalcItem class in Dynamics AX.
{% highlight csharp %}
InventSumRecalcItem InventSumRecalcItem; ; InventSumRecalcItem = new InventSumRecalcItem(&ldquo;ITEM001&rdquo;, true, checkfix::fix); InventSumRecalcItem.updatenow(); {% endhighlight %}
First parameter : ItemId
Second parameter : Show errors
Third parameter : Fix or only check
What if you want to calculate for all items:
{% highlight csharp %} InventTable InventTable; InventSumRecalcItem InventSumRecalcItem;
WHILE SELECT InventTable WHERE (InventTable.ItemType == ItemType::Item) || (InventTable.]]></description>
</item><item>
    <title>Difference between QUERYFILTER and QUERYBUILDRANGE</title>
    <link>https://nuxulu.com/2017-01-01-difference-between-queryfilter-and-querybuildrange/</link>
    <pubDate>Sun, 01 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author>Duy Dang</author>
    <guid>https://nuxulu.com/2017-01-01-difference-between-queryfilter-and-querybuildrange/</guid>
    <description><![CDATA[<p>In Dynamics AX, we have two way to filter the result set of records in joined query is using <code>QueryFilter</code> class and <code>QueryBuildRange</code> class.</p>
<p>So what&rsquo;s difference between them? when do we use <code>QueryFilter</code> class? When do we use <code>QueryBuildRange</code> class?</p>
<p>Today, i will make a simple sample to show what is difference between them. You can download example project from <em><a href="https://1drv.ms/u/s!AuMuU-6qq5hxiYQLElp6RoLgmB_uIA" target="_blank" rel="noopener noreffer">here</a></em>.</p>
<p>I have two table :</p>]]></description>
</item><item>
    <title>CRUD Purchase Requisition using AIF in Dynamics AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-29-crud-purchase-requisition-using-aif-in-dynamics-ax-2012-r3/</link>
    <pubDate>Thu, 29 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-12-29-crud-purchase-requisition-using-aif-in-dynamics-ax-2012-r3/</guid>
    <description><![CDATA[<p>The workflow process moves purchase requisitions through the review process, from an initial status of <strong>Draft</strong> to a final status of <strong>Approved</strong>. When a purchase requisition is submitted for review, the workflow process is started. After a purchase requisition is approved, a purchase order can be generated for the purchase requisition lines and submitted to the vendor for order fulfillment.</p>
<p>We will use AIF standard service for import PR from outside, service name <code>PurchReqImportService</code>.</p>
<p>in <code>AxPurchReqTable</code> class and <code>setPurchReqId()</code> method</p>
<p>{% highlight csharp %}
protected void setPurchReqId()
{
NumberSequenceReference numberSequenceReference;</p>
<pre><code>if (this.isMethodExecuted(funcName()))
{
    return;
}

if (this.isFieldSetExternally(fieldNum(PurchReqTable, PurchReqId)))
{
    if (this.isSetMethodsCalledFromSave())
    {
        if (!this.purchReqTable())
        {
            numberSequenceReference = PurchReqTable::numRefPurchReqId();
            this.checkNumber(numberSequenceReference.numberSequenceTable(),fieldNum(PurchReqTable,PurchReqId),this.parmPurchReqId());
            if (numberSequenceReference.NumberSequenceId &amp;&amp; numberSequenceReference.numberSequenceTable().Continuous)
            {
                NumberSeq::newReserveNum(numberSequenceReference).reserve(this.parmPurchReqId());
            }
        }
    }
}
else
{
    if (this.isFieldSet(fieldNum(PurchReqTable, PurchReqId)))
    {
        return;
    }

    if (!this.parmPurchReqId())
    {
        if (this.isSetMethodsCalledFromSave())
        {
            //this.parmPurchReqId(NumberSeq::newGetNum(PurchParameters::numRefPurchReqId()).num());
            numberSequenceReference = PurchReqTable::numRefPurchReqId();
            if(numberSequenceReference)
            {
                this.setField(fieldNum(PurchReqTable, PurchReqId), NumberSeq::newGetNum(PurchParameters::numRefPurchReqId()).num());
            }
            else
            {
                this.setField(fieldNum(PurchReqTable, PurchReqId), this.parmExternalSourceID());
            }
        }
    }
}
</code></pre>
<p>}</p>
<p>{% endhighlight %}</p>
<p>Base on this method, you could know how System get PurchReqId.</p>]]></description>
</item><item>
    <title>CRUD Purchase order using AIF in Dynamics AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-28-crud-purchase-order-using-aif-in-dynamics-ax-2012-r3/</link>
    <pubDate>Wed, 28 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-12-28-crud-purchase-order-using-aif-in-dynamics-ax-2012-r3/</guid>
    <description><![CDATA[<p>Due to Purchase order doesn’t have Standard document service so we have to create new Document service for that using AIF wizards.</p>
<p>I’m using AIF document service with <code>NETTCP</code> or <code>HTTP</code> Adapter to Create Purchase order service, here is steps</p>
<h2 id="create-query">Create Query</h2>
<p>with three <strong>datasouce</strong> (<code>PurchTable, PurchLine, InventDim</code>) likes below</p>
<p>




</p>
<blockquote>
<p>As best practice for Document service, name of query should be start with Axd* prefix.</p>
</blockquote>
<h2 id="using-aif-wizards">Using AIF Wizards</h2>
<p>In AX development environment, go to <em>Tools &gt; Wizards &gt; AIF document service wizards</em></p>
<p>




</p>
<p>Choose recent created query and click <strong>next</strong>.</p>
<h2 id="create-service-operation-and-axbc-class">Create Service operation and <code>AxBC class</code></h2>
<p>




</p>
<p>Click <code>next</code> and then <code>Generate</code>.</p>]]></description>
</item><item>
    <title>Insert, update, Delete order line through AIF In AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-28-insert-update-delete-order-line-through-aif-in-ax-2012-r3/</link>
    <pubDate>Wed, 28 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-12-28-insert-update-delete-order-line-through-aif-in-ax-2012-r3/</guid>
    <description><![CDATA[<p>In previous <a href="https://dynamics365.github.io/ax2012/integration/CRUD-Purchase-order-using-AIF-in-Dynamics-AX-2012-R3/" target="_blank" rel="noopener noreffer">post</a>, I already show how to create purchase order through AIF with <code>NETTCP</code> or <code>HTTP adapter</code>. In this post, we will get little deep more about action on line of order.</p>
<p>The following code sample shows how to <code>insert</code>, <code>update</code>, <code>delete</code> a line of an existing purchase order through AIF, currently I’m using C#.NET console project for demo.</p>
<p>As Partial update, we must include just the fields to change and any fields required by the document (you can check <code>Data policies</code> in AIF Service ports form for that).</p>
<p>Also, notice how action properties are specified – no matter we do with the line, which means updating the order.</p>
<p>I’m giving you an idea how it looks like, here is the code</p>
<p><code>The first method will handle the key of AIF Service</code></p>
<p>{% highlight csharp %}
private static EntityKey[] EntityForPurchId(string purchId)
{
KeyField field = new KeyField()
{
Field = &ldquo;PurchId&rdquo;,
Value = purchId
};</p>
<pre><code>EntityKey key = new EntityKey()
{
	KeyData = new[] { field }
};

return new[] { key };
</code></pre>
<p>}</p>
<p>{% endhighlight %}</p>]]></description>
</item><item>
    <title>CRUD Items, products, products master dimension, variants using AIF in Dynamics AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-27-crud-items-products-products-master-dimension-variants-using-aif-in-dynamics-ax-2012-r3/</link>
    <pubDate>Tue, 27 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-12-27-crud-items-products-products-master-dimension-variants-using-aif-in-dynamics-ax-2012-r3/</guid>
    <description><![CDATA[<h2 id="scenarios">Scenarios:</h2>
<p>I’m trying to create <strong>product/master product</strong> in Dynamics AX using AIF inbound port, the AIF services consume by C#.NET.</p>
<p>From AX 2012 R2, Item is replaced with Product. Item master was in Inventory Management Module, now there is a separate module for item/product creation <code>Product information Management</code>.</p>
<p>Some definitions you should know
There are two types of Products in 2012 they are:</p>
<ol>
<li>
<p><strong>Product</strong></p>
<p><em>Product information management/Common/Products/Products</em></p>
</li>
<li>
<p><strong>Product Master</strong></p>
<p><em>Product information management/Common/Products/Products master</em></p>
<p>a. <strong>Variants:</strong></p>
</li>
</ol>
<p>To create a product variant, you must define at least one product dimension for a product master. You can also rename dimensions.
To create product variants, you must complete the following tasks:</p>
<ul>
<li>
<p>Set up dimensions, such as size, color, and style.</p>
</li>
<li>
<p>Set up variant groups.</p>
</li>
<li>
<p>Assign variant groups to a retail hierarchy.</p>
</li>
<li>
<p>Create a product master and variants.</p>
</li>
</ul>]]></description>
</item><item>
    <title>The Type system of Dynamics AX 2012</title>
    <link>https://nuxulu.com/2016-11-25-the-type-system-of-dynamics-ax-2012/</link>
    <pubDate>Thu, 24 Nov 2016 08:22:39 &#43;0700</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-11-25-the-type-system-of-dynamics-ax-2012/</guid>
    <description><![CDATA[<p>The Microsoft Dynamics AX runtime manages the storage of <em>value type</em> data on the <strong>call stack</strong> and <em>reference type objects</em> on the <strong>memory heap</strong>.</p>
<p><strong>The call stack</strong> is the memory structure that holds data about the active methods called during program execution. <strong>The memory heap</strong> is the memory area that allocates storage for objects that are destroyed automatically by the Microsoft Dynamics AX run-time.</p>
<h2 id="value-types">Value types</h2>
<p>Value types include the built-in <code>primitive types, extended data types, enumeration types, and built-in collection types</code>.</p>
<ul>
<li><strong>The primitive types</strong> are boolean, int, int64, real, date, utcDateTime, timeofday, str, and guid.</li>
<li><strong>The extended data types</strong> are specialized primitive types and specialized base enumerations.</li>
<li><strong>The enumeration types</strong> are base enumerations and extended data types.</li>
<li><strong>The collection types</strong> are the built-in array and container types.</li>
</ul>]]></description>
</item><item>
    <title>Evolution of programming languages</title>
    <link>https://nuxulu.com/2016-09-06-evolution-of-programming-languages/</link>
    <pubDate>Tue, 06 Sep 2016 18:47:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-09-06-evolution-of-programming-languages/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Create record in DimensionAttributeValueCombination table manually.</title>
    <link>https://nuxulu.com/2016-07-05-create-record-in-dimensionattributevaluecombination-manually/</link>
    <pubDate>Tue, 05 Jul 2016 18:47:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://nuxulu.com/2016-07-05-create-record-in-dimensionattributevaluecombination-manually/</guid>
    <description><![CDATA[<p>Sometime we need this <code>RecId</code> value in <code>DimansionAttributeValueCombination</code> Table for some reasons likes putting new dimension in <code>LedgerDimension</code> field in <code>LedgerJournalTrans</code> Table, or somewhere else.</p>
<p>Suppose my Account structure likes: <em><strong>MainAcct - Dept - Woker - SubAcct - Item</strong></em>,
you can custom base on your struture.</p>
<p>This code is for creating a record into <code>DimansionAttributeValueCombination</code> in code and then get <code>RecID</code> of this.</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">static</span> <span class="kt">void</span> <span class="nf">createDimensionAttributeValueCombination</span><span class="p">(</span><span class="n">Args</span> <span class="n">_args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">DimensionAttributeValueContract</span>     <span class="n">ValueContract</span><span class="p">;</span>
    <span class="n">DimensionAttributeValueCombination</span>  <span class="n">davc</span><span class="p">;</span>
    <span class="n">MainAccount</span>                         <span class="n">valueMainAccount</span><span class="p">;</span>
    <span class="n">DimensionStorage</span>                    <span class="n">dimStorage</span><span class="p">;</span>

    <span class="n">DimensionServiceProvider</span> <span class="n">DimensionServiceProvider</span>   <span class="o">=</span> <span class="k">new</span> <span class="n">DimensionServiceProvider</span><span class="p">();</span>
    <span class="n">LedgerAccountContract</span> <span class="n">LedgerAccountContract</span>         <span class="o">=</span> <span class="k">new</span> <span class="n">LedgerAccountContract</span><span class="p">();</span>
    <span class="n">List</span> <span class="n">ListValueContract</span>                              <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">(</span><span class="n">Types</span><span class="o">::</span><span class="n">Class</span><span class="p">);</span>
    
    <span class="c1">// Get main account with structure : Mainacct - DE - woker - subacct - item
</span><span class="c1"></span>    <span class="n">valueMainAccount</span> <span class="o">=</span> <span class="n">MainAccount</span><span class="o">::</span><span class="n">findByMainAccountId</span><span class="p">(</span><span class="err">&#39;</span><span class="mi">910001</span><span class="err">&#39;</span><span class="p">);</span> <span class="c1">//Get main account
</span><span class="c1"></span>
    <span class="n">ValueContract</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DimensionAttributeValueContract</span><span class="p">();</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmName</span><span class="p">(</span><span class="err">&#39;</span><span class="n">Department</span><span class="err">&#39;</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmValue</span><span class="p">(</span><span class="err">&#39;</span><span class="mi">6020</span><span class="err">&#39;</span><span class="p">);</span> <span class="c1">//Value for dimension Department
</span><span class="c1"></span>    <span class="n">ListValueContract</span><span class="p">.</span><span class="n">addEnd</span><span class="p">(</span><span class="n">ValueContract</span><span class="p">);</span>

    <span class="n">ValueContract</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DimensionAttributeValueContract</span><span class="p">();</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmName</span><span class="p">(</span><span class="err">&#39;</span><span class="n">Worker</span><span class="err">&#39;</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmValue</span><span class="p">(</span><span class="err">&#39;</span><span class="mo">000001</span><span class="err">&#39;</span><span class="p">);</span> <span class="c1">//Value for dimension ExpenseCode
</span><span class="c1"></span>    <span class="n">ListValueContract</span><span class="p">.</span><span class="n">addEnd</span><span class="p">(</span><span class="n">ValueContract</span><span class="p">);</span>

    <span class="n">ValueContract</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DimensionAttributeValueContract</span><span class="p">();</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmName</span><span class="p">(</span><span class="err">&#39;</span><span class="n">SubAcct</span><span class="err">&#39;</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmValue</span><span class="p">(</span><span class="err">&#39;교보생명&#39;</span><span class="p">);</span> <span class="c1">//Value for dimension Project
</span><span class="c1"></span>    <span class="n">ListValueContract</span><span class="p">.</span><span class="n">addEnd</span><span class="p">(</span><span class="n">ValueContract</span><span class="p">);</span>

    <span class="n">ValueContract</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DimensionAttributeValueContract</span><span class="p">();</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmName</span><span class="p">(</span><span class="err">&#39;</span><span class="n">Item</span><span class="err">&#39;</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">ValueContract</span><span class="p">.</span><span class="n">parmValue</span><span class="p">(</span><span class="err">&#39;</span><span class="mi">110329</span><span class="err">&#39;</span><span class="p">);</span> <span class="c1">//Value for dimension Project
</span><span class="c1"></span>    <span class="n">ListValueContract</span><span class="p">.</span><span class="n">addEnd</span><span class="p">(</span><span class="n">ValueContract</span><span class="p">);</span>

    <span class="n">LedgerAccountContract</span><span class="p">.</span><span class="n">parmMainAccount</span><span class="p">(</span><span class="n">valueMainAccount</span><span class="p">.</span><span class="n">MainAccountId</span><span class="p">);</span>
    <span class="n">LedgerAccountContract</span><span class="p">.</span><span class="n">parmValues</span><span class="p">(</span><span class="n">ListValueContract</span><span class="p">);</span>

    <span class="c1">//if combination is not exist then create new one
</span><span class="c1"></span>    <span class="n">dimStorage</span> <span class="o">=</span> <span class="n">DimensionServiceProvider</span><span class="o">::</span><span class="n">buildDimensionStorageForLedgerAccount</span><span class="p">(</span><span class="n">LedgerAccountContract</span><span class="p">);</span>
    <span class="n">davc</span> <span class="o">=</span> <span class="n">DimensionAttributeValueCombination</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">dimStorage</span><span class="p">.</span><span class="n">save</span><span class="p">());</span>
    <span class="n">info</span><span class="p">(</span><span class="n">strFmt</span><span class="p">(</span><span class="s">&#34;RecId : %1 - DisplayValue : %2&#34;</span><span class="p">,</span> <span class="n">davc</span><span class="p">.</span><span class="n">RecId</span><span class="p">,</span> <span class="n">davc</span><span class="p">.</span><span class="n">DisplayValue</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>]]></description>
</item></channel>
</rss>
