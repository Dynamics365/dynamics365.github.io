<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>programming - Tag - Dynamics 365 &amp; Power Platform | NUXULU</title>
        <link>https://nuxulu.com/tags/programming/</link>
        <description>programming - Tag - Dynamics 365 &amp; Power Platform | NUXULU</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 19 Jan 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://nuxulu.com/tags/programming/" rel="self" type="application/rss+xml" /><item>
    <title>Number sequence farmework overview in Dynamics AX 2012</title>
    <link>https://nuxulu.com/2017-01-19-number-sequence-farmework-in-dynamics-ax-2012/</link>
    <pubDate>Thu, 19 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2017-01-19-number-sequence-farmework-in-dynamics-ax-2012/</guid>
    <description><![CDATA[<figure class='center '>
  <a href="/imagesposts/number-sequence-overview.png"></a>
</figure>
<p>For this demo, I will create New module along with NumberSequence, about creating Number Sequence <em>without</em> module you also use same steps just leave some steps base on Design picture above.</p>
<h2 id="etd" class="headerLink"><a href="#etd" class="header-mark"></a>ETD</h2><p>Create ETD <code>ContosoId</code> extends <code>num</code> datatype.</p>
<h2 id="table" class="headerLink"><a href="#table" class="header-mark"></a>Table</h2><p>Create <code>Contoso</code> Table with <code>ContosoId</code> field.</p>
<h2 id="enum" class="headerLink"><a href="#enum" class="header-mark"></a>Enum</h2><p>Create a new enum value <code>Contoso</code> in BaseEnum <code>NumberSeqModule</code>.</p>
<p>This value will be used to link number sequence to the module and to restrict displayed number sequence by module in Form.</p>]]></description>
</item><item>
    <title>Recalculate InventSum in Dynamics AX</title>
    <link>https://nuxulu.com/2017-01-02-recalculate-inventsum/</link>
    <pubDate>Mon, 02 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2017-01-02-recalculate-inventsum/</guid>
    <description><![CDATA[InventSum is needed to recalculate sometimes. We should use InventSumRecalcItem class in Dynamics AX.
{% highlight csharp %}
InventSumRecalcItem InventSumRecalcItem; ; InventSumRecalcItem = new InventSumRecalcItem(&ldquo;ITEM001&rdquo;, true, checkfix::fix); InventSumRecalcItem.updatenow(); {% endhighlight %}
First parameter : ItemId
Second parameter : Show errors
Third parameter : Fix or only check
What if you want to calculate for all items:
{% highlight csharp %} InventTable InventTable; InventSumRecalcItem InventSumRecalcItem;
WHILE SELECT InventTable WHERE (InventTable.ItemType == ItemType::Item) || (InventTable.]]></description>
</item><item>
    <title>Useful functions to use in AX 2012</title>
    <link>https://nuxulu.com/2016-12-30-useful-functions-to-use-in-ax-2012/</link>
    <pubDate>Fri, 30 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-12-30-useful-functions-to-use-in-ax-2012/</guid>
    <description><![CDATA[<p>Useful functions to use in AX 2012</p>]]></description>
</item><item>
    <title>Useful functions to use in AX 2012 part 2</title>
    <link>https://nuxulu.com/2016-12-30-useful-functions-to-use-in-ax-2012-part2/</link>
    <pubDate>Fri, 30 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-12-30-useful-functions-to-use-in-ax-2012-part2/</guid>
    <description><![CDATA[<p>Useful functions to use in AX 2012 part 2</p>]]></description>
</item><item>
    <title>CRUD Purchase Requisition using AIF in Dynamics AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-29-crud-purchase-requisition-using-aif-in-dynamics-ax-2012-r3/</link>
    <pubDate>Thu, 29 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-12-29-crud-purchase-requisition-using-aif-in-dynamics-ax-2012-r3/</guid>
    <description><![CDATA[<p>The workflow process moves purchase requisitions through the review process, from an initial status of <strong>Draft</strong> to a final status of <strong>Approved</strong>. When a purchase requisition is submitted for review, the workflow process is started. After a purchase requisition is approved, a purchase order can be generated for the purchase requisition lines and submitted to the vendor for order fulfillment.</p>
<p>We will use AIF standard service for import PR from outside, service name <code>PurchReqImportService</code>.</p>
<p>in <code>AxPurchReqTable</code> class and <code>setPurchReqId()</code> method</p>
<p>{% highlight csharp %}
protected void setPurchReqId()
{
NumberSequenceReference numberSequenceReference;</p>
<pre><code>if (this.isMethodExecuted(funcName()))
{
    return;
}

if (this.isFieldSetExternally(fieldNum(PurchReqTable, PurchReqId)))
{
    if (this.isSetMethodsCalledFromSave())
    {
        if (!this.purchReqTable())
        {
            numberSequenceReference = PurchReqTable::numRefPurchReqId();
            this.checkNumber(numberSequenceReference.numberSequenceTable(),fieldNum(PurchReqTable,PurchReqId),this.parmPurchReqId());
            if (numberSequenceReference.NumberSequenceId &amp;&amp; numberSequenceReference.numberSequenceTable().Continuous)
            {
                NumberSeq::newReserveNum(numberSequenceReference).reserve(this.parmPurchReqId());
            }
        }
    }
}
else
{
    if (this.isFieldSet(fieldNum(PurchReqTable, PurchReqId)))
    {
        return;
    }

    if (!this.parmPurchReqId())
    {
        if (this.isSetMethodsCalledFromSave())
        {
            //this.parmPurchReqId(NumberSeq::newGetNum(PurchParameters::numRefPurchReqId()).num());
            numberSequenceReference = PurchReqTable::numRefPurchReqId();
            if(numberSequenceReference)
            {
                this.setField(fieldNum(PurchReqTable, PurchReqId), NumberSeq::newGetNum(PurchParameters::numRefPurchReqId()).num());
            }
            else
            {
                this.setField(fieldNum(PurchReqTable, PurchReqId), this.parmExternalSourceID());
            }
        }
    }
}
</code></pre>
<p>}</p>
<p>{% endhighlight %}</p>
<p>Base on this method, you could know how System get PurchReqId.</p>]]></description>
</item><item>
    <title>CRUD Purchase order using AIF in Dynamics AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-28-crud-purchase-order-using-aif-in-dynamics-ax-2012-r3/</link>
    <pubDate>Wed, 28 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-12-28-crud-purchase-order-using-aif-in-dynamics-ax-2012-r3/</guid>
    <description><![CDATA[<p>Due to Purchase order doesn’t have Standard document service so we have to create new Document service for that using AIF wizards.</p>
<p>I’m using AIF document service with <code>NETTCP</code> or <code>HTTP</code> Adapter to Create Purchase order service, here is steps</p>
<h2 id="create-query" class="headerLink"><a href="#create-query" class="header-mark"></a>Create Query</h2><p>with three <strong>datasouce</strong> (<code>PurchTable, PurchLine, InventDim</code>) likes below</p>
<p>




</p>
<blockquote>
<p>As best practice for Document service, name of query should be start with Axd* prefix.</p>
</blockquote>
<h2 id="using-aif-wizards" class="headerLink"><a href="#using-aif-wizards" class="header-mark"></a>Using AIF Wizards</h2><p>In AX development environment, go to <em>Tools &gt; Wizards &gt; AIF document service wizards</em></p>
<p>




</p>
<p>Choose recent created query and click <strong>next</strong>.</p>
<h2 id="create-service-operation-and-axbc-class" class="headerLink"><a href="#create-service-operation-and-axbc-class" class="header-mark"></a>Create Service operation and <code>AxBC class</code></h2><p>




</p>
<p>Click <code>next</code> and then <code>Generate</code>.</p>]]></description>
</item><item>
    <title>Insert, update, Delete order line through AIF In AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-28-insert-update-delete-order-line-through-aif-in-ax-2012-r3/</link>
    <pubDate>Wed, 28 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-12-28-insert-update-delete-order-line-through-aif-in-ax-2012-r3/</guid>
    <description><![CDATA[<p>In previous <a href="https://dynamics365.github.io/ax2012/integration/CRUD-Purchase-order-using-AIF-in-Dynamics-AX-2012-R3/" target="_blank" rel="noopener noreffer">post</a>, I already show how to create purchase order through AIF with <code>NETTCP</code> or <code>HTTP adapter</code>. In this post, we will get little deep more about action on line of order.</p>
<p>The following code sample shows how to <code>insert</code>, <code>update</code>, <code>delete</code> a line of an existing purchase order through AIF, currently I’m using C#.NET console project for demo.</p>
<p>As Partial update, we must include just the fields to change and any fields required by the document (you can check <code>Data policies</code> in AIF Service ports form for that).</p>
<p>Also, notice how action properties are specified – no matter we do with the line, which means updating the order.</p>
<p>I’m giving you an idea how it looks like, here is the code</p>
<p><code>The first method will handle the key of AIF Service</code></p>
<p>{% highlight csharp %}
private static EntityKey[] EntityForPurchId(string purchId)
{
KeyField field = new KeyField()
{
Field = &ldquo;PurchId&rdquo;,
Value = purchId
};</p>
<pre><code>EntityKey key = new EntityKey()
{
	KeyData = new[] { field }
};

return new[] { key };
</code></pre>
<p>}</p>
<p>{% endhighlight %}</p>]]></description>
</item><item>
    <title>CRUD Items, products, products master dimension, variants using AIF in Dynamics AX 2012 R3</title>
    <link>https://nuxulu.com/2016-12-27-crud-items-products-products-master-dimension-variants-using-aif-in-dynamics-ax-2012-r3/</link>
    <pubDate>Tue, 27 Dec 2016 00:00:00 &#43;0000</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-12-27-crud-items-products-products-master-dimension-variants-using-aif-in-dynamics-ax-2012-r3/</guid>
    <description><![CDATA[<h2 id="scenarios" class="headerLink"><a href="#scenarios" class="header-mark"></a>Scenarios:</h2><p>I’m trying to create <strong>product/master product</strong> in Dynamics AX using AIF inbound port, the AIF services consume by C#.NET.</p>
<p>From AX 2012 R2, Item is replaced with Product. Item master was in Inventory Management Module, now there is a separate module for item/product creation <code>Product information Management</code>.</p>
<p>Some definitions you should know
There are two types of Products in 2012 they are:</p>
<ol>
<li>
<p><strong>Product</strong></p>
<p><em>Product information management/Common/Products/Products</em></p>
</li>
<li>
<p><strong>Product Master</strong></p>
<p><em>Product information management/Common/Products/Products master</em></p>
<p>a. <strong>Variants:</strong></p>
</li>
</ol>
<p>To create a product variant, you must define at least one product dimension for a product master. You can also rename dimensions.
To create product variants, you must complete the following tasks:</p>
<ul>
<li>
<p>Set up dimensions, such as size, color, and style.</p>
</li>
<li>
<p>Set up variant groups.</p>
</li>
<li>
<p>Assign variant groups to a retail hierarchy.</p>
</li>
<li>
<p>Create a product master and variants.</p>
</li>
</ul>]]></description>
</item><item>
    <title>The Type system of Dynamics AX 2012</title>
    <link>https://nuxulu.com/2016-11-25-the-type-system-of-dynamics-ax-2012/</link>
    <pubDate>Thu, 24 Nov 2016 08:22:39 &#43;0700</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-11-25-the-type-system-of-dynamics-ax-2012/</guid>
    <description><![CDATA[<p>The Microsoft Dynamics AX runtime manages the storage of <em>value type</em> data on the <strong>call stack</strong> and <em>reference type objects</em> on the <strong>memory heap</strong>.</p>
<p><strong>The call stack</strong> is the memory structure that holds data about the active methods called during program execution. <strong>The memory heap</strong> is the memory area that allocates storage for objects that are destroyed automatically by the Microsoft Dynamics AX run-time.</p>
<h2 id="value-types" class="headerLink"><a href="#value-types" class="header-mark"></a>Value types</h2><p>Value types include the built-in <code>primitive types, extended data types, enumeration types, and built-in collection types</code>.</p>
<ul>
<li><strong>The primitive types</strong> are boolean, int, int64, real, date, utcDateTime, timeofday, str, and guid.</li>
<li><strong>The extended data types</strong> are specialized primitive types and specialized base enumerations.</li>
<li><strong>The enumeration types</strong> are base enumerations and extended data types.</li>
<li><strong>The collection types</strong> are the built-in array and container types.</li>
</ul>]]></description>
</item><item>
    <title>Evolution of programming languages</title>
    <link>https://nuxulu.com/2016-09-06-evolution-of-programming-languages/</link>
    <pubDate>Tue, 06 Sep 2016 18:47:00 &#43;0900</pubDate>
    <author>maxnguyen</author>
    <guid>https://nuxulu.com/2016-09-06-evolution-of-programming-languages/</guid>
    <description><![CDATA[]]></description>
</item></channel>
</rss>
