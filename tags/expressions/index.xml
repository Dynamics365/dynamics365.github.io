<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Expressions - Tag - Dynamics 365 Finance &amp; Operations | nuxulu.com</title><link>https://nuxulu.com/tags/expressions/</link><description>Expressions - Tag - Dynamics 365 Finance &amp; Operations | nuxulu.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>luan52@outlook.com (Max Nguyen)</managingEditor><webMaster>luan52@outlook.com (Max Nguyen)</webMaster><lastBuildDate>Fri, 07 Oct 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://nuxulu.com/tags/expressions/" rel="self" type="application/rss+xml"/><item><title>Expressions or Functions used in SSRS</title><link>https://nuxulu.com/2016-10-07-ssrs-sql-server-reporting-services-expressions-or-functions-used-in-ssrs/</link><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><author>Max Nguyen</author><guid>https://nuxulu.com/2016-10-07-ssrs-sql-server-reporting-services-expressions-or-functions-used-in-ssrs/</guid><description><![CDATA[<p>Expressions are usually used for appearance of the data in a report, change properties of the fields, calculate some values and display them in a proper way, compares values between data of fields and then display them.</p>
<h1 id="types-of-expressions">Types of Expressions</h1>
<p>We have 3 types:</p>
<ul>
<li>Globals</li>
<li>Operators - Arithmetic, Comparison,Concatenation, Logical</li>
<li>Common Functions - Text, Date &amp; Time, Math, Inspection, Program Flow, Aggregate, Financial, Conversion, Miscellaneous</li>
</ul>
<p>We can see each and every one very deataily</p>
<h2 id="1-globals">1. Globals</h2>
<p>Global expressions executes/works in Page Header and Footer parts only.</p>
<p><strong>ExecutionTime</strong>  Shows date and time at when report executes<br>
<strong>PageNumber</strong> shows page number of each and every page but allowed only in page header and footer<br>
<strong>ReportName</strong>  displays name of the active report what name we have assigned to the active report<br>
<strong>UserId</strong> shows current user name like <strong><em>company/userID</em></strong><br>
<strong>Language</strong> displays language like US-Englishâ€¦</p>
<h2 id="2-operators">2. Operators</h2>
<h3 id="arithmetic">Arithmetic</h3>
<p><code>^</code> power of<br>
<code>*</code>multiplication<br>
<code>/</code> divides two numbers and returns a floating point result<br>
<code>:</code> divides two numbers and returns a integer result<br>
<code>Mod</code> divides two numbers and returns remainder only<br>
<code>adds</code> two numbers and concatenation for two strings<br>
<code>-</code> subtraction and indicates negative value for numeric values</p>
<h3 id="comparison">Comparison</h3>
<p>Known operators : <code>&lt; &lt;= &gt; &gt;= &lt;&gt;</code><br>
<code>Like</code> compares two strings and return true if matched or else returns False.<br>
<em>Ex:</em> <code>=Fields!Title.Value Like Fields!LoginID.Value</code></p>
<p><code>Is</code> compare two object reference variables<br>
<em>Ex:</em> <code>=Fields!Title.Value Is Null</code></p>
<h3 id="concatenation">Concatenation</h3>
<p><code>+</code> and <code>&amp;</code> symbols uses for concatenation</p>
<h3 id="logical">Logical</h3>
<p>Known: <code>And, Not, Or, Xor</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">firstname</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;Larry&#39;</span><span class="w"> </span><span class="n">XOR</span><span class="w"> </span><span class="n">lastname</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;Smith&#39;</span><span class="o">`</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>AndAlso</code> First condition will check first and if it is true only, goes to next or else it won&rsquo;t need to check. Because our execution time is saving in a logical operation in which more conditions is combined using <code>AndAlso</code> function.<br>
<code>OrElse</code> same like above</p>
<h2 id="3-common-functions">3. Common Functions</h2>
<h3 id="text"><strong>Text</strong></h3>
<p><code>Asc, AscW</code> returns an integer value represents character code corresponding to a character.<br>
<code>Chr, chrw</code> returns the character associated with the specified character code<br>
<code>Filter</code> =Filter(Fields!Title.Value,&ldquo;Pr&rdquo;,true,0)<br>
<code>Format</code>=Format(Fields!Price.Value, &ldquo;#,##0.00&rdquo;), Format(Fields!Date.Value, &ldquo;yyyy-MM-dd&rdquo;)<br>
<code>FormatCurrency</code> =formatcurrency(Fields!SickLeaveHours.Value,3)<br>
<code>FormatDateTime</code> =FormatDateTime(Fields!BirthDate.Value,Integer)</p>
<p><strong>Ex</strong>:<br>
<em>0 returns 6/3/1977<br>
1 returns Friday, June 03, 1977<br>
2 returns 6/3/1977<br>
3 returns 12:00:00AM<br>
4 returns 00:00</em></p>
<p><code>FormatNumber</code> =FormatNumber(Fields!EmployeeID.Value,2), then result is 2.00<br>
<code>FormatPercent</code> =&ldquo;Percentage : &quot; &amp; formatpercent(Fields!SickLeaveHours.Value)<br>
<code>GetChar</code> =GetChar(Fields!Title.Value,5)<br>
<code>InStr</code> =InStr(Fields!Title.Value,&ldquo;a&rdquo;)<br>
<code>InStrRev</code> =Instrrev(Fields!Title.Value,&ldquo;a&rdquo;)<br>
<code>LCase</code> =Lcase(Fields!Title.Value), Change strings into lower case<br>
<code>Left</code> =Left(Fields!Title.Value,4), Returns left side characters from a string<br>
<code>Len</code> =Len(Fields!Title.Value), Finds length of a string<br>
<code>LSet</code> =Lset(Fields!Title.Value,5), Returns some length of a string from left<br>
<code>LTrim</code> =Ltrim(&rdquo; &ldquo;&amp;Fields!Title.Value), Trim left side of a string<br>
<code>Mid</code> =Mid(Fields!Title.Value,InSTrRev(Fields!Title.Value,&ldquo;T&rdquo;)), Returns characters from the   mentioned starting position<br>
<code>Replace</code> =Replace(Fields!Title.Value,&ldquo;a&rdquo;,&ldquo;A&rdquo;), Replaces one string with another<br>
<code>Right</code> =Right(Fields!Title.Value,10), Returns right side characters from a string<br>
<code>RSet</code> =Rset(Fields!Title.Value,5),Returns some length of a string from left<br>
<code>RTrim</code> =Rtrim(Fields!Title.Value &amp; &quot; &ldquo;), Trim left side of a string<br>
<code>Space</code> =Fields!Title.Value &amp; Space(5) &amp; Fields!Title.Value, Specifies some spaces within strings<br>
<code>StrComp</code> Returns a value indicating the result of a string comparison<br>
<code>vbBinaryCompare 0</code> Perform a binary comparison.<br>
<code>vbTextCompare 1</code> Perform a textual comparison.<br>
<code>string1</code> is less than <code>string2</code> -1<br>
<code>string1</code> is equal to <code>string2</code> 0<br>
<code>string1</code> is greater than <code>string2</code> 1<br>
<code>string1</code> or <code>string2</code> is Null Null<br>
<code>StrConv</code><br>
=Strconv(Fields!Title.Value,vbProperCase)<br>
=Strconv(Fields!Title.Value,vbLowerCase)<br>
=Strconv(Fields!Title.Value,vbUpperCase)<br>
<code>StrDup</code> =StrDup(3,&ldquo;M&rdquo;), Returns a string or object consisting of the specified character repeated the specified number of times.<br>
<code>StrReverse</code> =StrReverse(Fields!Title.Value)<br>
<code>Trim</code> =Trim(&rdquo; &ldquo;&amp; Fields!Title.Value &amp; &quot; &ldquo;)<br>
<code>UCase</code> =Ucase(Fields!Title.Value)</p>
<h3 id="date--time"><strong>Date &amp; Time</strong></h3>
<p><code>CDate</code> Converts a object into date format<br>
=Format(CDate(Fields!BirthDate.Value),&ldquo;MMMM yyyy&rdquo;)<br>
<code>DateAdd</code> Returns a datetime that is the result of adding the specified number of time interval units to the original datetime.<br>
=dateadd(&ldquo;m&rdquo;,12,Fields!BirthDate.Value)<br>
<code>DateDiff</code> Find number of days, months and years between two dates<br>
=datediff(&ldquo;d&rdquo;,Fields!BirthDate.Value,Now)<br>
<code>DatePart</code> DatePart(DateInterval.Weekday, CDate(&ldquo;2009/11/13&rdquo;), FirstDayOfWeek.Monday) returns 5 (Friday)<br>
<code>DateSerial</code> for first day of the month<br>
=DateSerial(Year(Now), Month(Now), 1)<br>
for the last day of the month<br>
=DateSerial(Year(Now), Month(Now)+1, 0) <br>
<code>DateString</code> Returns string value of system date<br>
=datestring()<br>
<code>DateValue</code> Returns current date<br>
<code>Day</code> Returns day value from date<br>
=day(Fields!BirthDate.Value)<br>
<code>FormatDateTime</code> =FormatDateTime(Fields!BirthDate.Value,Integer)
<em>Examples:</em>
0 returns 6/3/1977<br>
1 returns Friday, June 03, 1977<br>
2 returns 6/3/1977<br>
3 returns 12:00:00AM<br>
4 returns 00:00<br>
<code>Hour</code> =Hour(Fields!BirthDate.Value)<br>
<code>Minute</code> =Minute(Fields!BirthDate.Value)<br>
<code>Month</code> =Month(Fields!BirthDate.Value)<br>
<code>MonthName</code> =MonthName(Month(Fields!BirthDate.Value))<br>
<code>Now</code> Indicates current month<br>
=Now() or =Now<br>
<code>Second</code> =Second(Fields!BirthDate.Value)<br>
<code>TimeOfDay</code> =TimeOfDay()<br>
Returns a date value containing the current time of day according to your system<br>
<code>Timer</code> =Timer() <br>
Returns number of seconds elapsed since midnight<br>
<code>TimeSerial</code> =TimeSerial(24,60,60)<br>
Returns a date value representing a specified hour, minute and second<br>
<code>TimeString</code> =TimeString()<br>
Returns string value representing the current time of day according to your system<br>
<code>TimeValue</code> Returns a date value set to jan 1 of year 1<br>
=TimeValue(Fields!BirthDate.Value)<br>
<code>Today</code> Returns Current date<br>
<code>Weekday</code> Returns an integer value representing day of week<br>
=WeekDay(Fields!BirthDate.Value)<br>
<code>WeekdayName</code> =WeekdayName(Weekday(Fields!BirthDate.Value))<br>
Returns name of the day of week<br>
<code>Year</code> =year(Fields!BirthDate.Value)<br>
Returns year of specified date</p>
<h3 id="math">Math</h3>
<p><code>Abs=Abs(-2.36)</code></p>
<p>Returns the absolute value</p>
<p><code>BigMul =BigMul(2,3)</code></p>
<p>Returns multiplication value of two specified numbers</p>
<p><code>Ceiling =Ceiling(2.67)</code></p>
<p>Returns next highest value</p>
<p><code>Cos=Cos(2.33)</code></p>
<p>Returns cos value for specified number</p>
<p><code>Cosh=Cosh(2.33)</code>
Returns hyperbolic cos value</p>
<p><code>DivRem=DivRem(23,2,5)</code></p>
<p><code>Fix=Fix(23.89)</code></p>
<p>Returns integer portion</p>
<p><code>Floor=Floor(24.54)</code></p>
<p>Returns largest integer</p>
<p><code>Int=Int(24.78)</code></p>
<p>Returns integer portion of a number</p>
<p><code>Log=Log(24.78)</code></p>
<p>Returns logarithm value</p>
<p><code>Log10=Log10(24.78)</code></p>
<p>Returns the base 10 logaritm value</p>
<p><code>Max=Max(Fields!EmployeeID.Value)</code></p>
<p>Returns larger value in the specified values</p>
<p><code>Min=Min(Fields!EmployeeID.Value)</code></p>
<p>Returns smaller value in the specified values</p>
<p><code>Pow=Pow(Fields!EmployeeID.Value,2)</code></p>
<p>Returns power of value for specified number</p>
<p><code>Rnd=Rnd()</code></p>
<p>Returns a random number</p>
<p><code>Round=Round(43.16)</code></p>
<p>Returns rounded value to the nearest integer</p>
<p><code>Sign=Sign(-34534543)</code></p>
<p><code>Sin=Sin(Fields!EmployeeID.Value)</code>
Returns the sin value</p>
<p><code>Sinh=Sinh(Fields!EmployeeID.Value)</code>
Returns the hyperbolic sin value</p>
<h3 id="inspection">Inspection</h3>
<p><code>IsArray =IsArray(Fields!EmployeeID.Value)</code></p>
<p>Returns a boolean value indicating whether the specified object is array or not</p>
<p><code>IsDate =IsDate(Fields!BirthDate.Value)</code></p>
<p>Returns a boolean value indicating whether the specified object is Date or not</p>
<p><code>IsNothing =IsNothing(Fields!EmployeeID.Value)</code></p>
<p>Returns a boolean value depends on specified object is Nothing or not</p>
<p><code>IsNumeric =IsNumeric(Fields!EmployeeID.Value)</code></p>
<p>Returns a boolean value depends on specified object is Numeric value or not</p>
<h3 id="program-flow">Program Flow</h3>
<p><code>Choose =CHOOSE(3, &quot;Red&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;White&quot;)</code></p>
<p>Returns a specific value using index in a list of arguments</p>
<p><code>IIf =IIF(Fields!EmployeeID.Value&gt;10,&quot;Yes&quot;,&quot;No&quot;)</code></p>
<p>Returns any one value depends on condition</p>
<p><code>Switch =Switch(Fields!EmployeeID.Value&lt;10,&quot;Red&quot;,Fields!EmployeeID.Value&gt;10,&quot;Green&quot;)</code></p>
<p>Evaluates list of expressions</p>
<h3 id="aggregate">Aggregate</h3>
<p><code>Avg =Avg(Fields!EmployeeID.Value)</code></p>
<p>Returns average value for all specified values</p>
<p><code>Count =Count(Fields!EmployeeID.Value)</code></p>
<p>Returns count of all specified values</p>
<p><code>CountDistinct =CountDistinct(Fields!EmployeeID.Value)</code></p>
<p>Returns count of all distinct values</p>
<p><code>CountRows =CountRows()</code></p>
<p>Returns count of rows</p>
<p><code>First =First(Fields!EmployeeID.Value)</code></p>
<p>Returns first for all specified values</p>
<p><code>Last =Last(Fields!EmployeeID.Value)</code></p>
<p>Returns last for all specified values</p>
<p><code>Max =Max(Fields!EmployeeID.Value)</code></p>
<p>Returns max for all specified values</p>
<p><code>Min =Min(Fields!EmployeeID.Value)</code></p>
<p>Returns min for all specified values</p>
<p><code>StDev =StDev(Fields!EmployeeID.Value)</code></p>
<p>Returns standard deviation value</p>
<p><code>StDevP =StDevP(Fields!EmployeeID.Value)</code></p>
<p>Returns Population standard deviation value</p>
<p><code>Sum =Sum(Fields!EmployeeID.Value)</code></p>
<p>Returns sum of all values</p>
<p><code>Var =Var(Fields!EmployeeID.Value)</code></p>
<p>Returns variance of all values</p>
<p><code>VarP =Var(Fields!EmployeeID.Value)</code></p>
<p>Returns population variance of all values</p>
<p><code>RunningValue =RunningValue(Fields!EmployeeID.Value,sum,nothing)</code></p>
<p>Returns running aggregate of the specified
expression</p>
<h3 id="financial">Financial</h3>
<p><code>DDB DDB</code> (Double Declining Balance) method computes depreciation of an asset for a specified period.</p>
<p>Syntax: <code>DDB (Cost, Salvage, life, period, factor)</code></p>
<p><code>FV FV</code> (Future Value) of an investment based on periodic, constant payments and a constant interest rate.</p>
<p>Syntax: <code>FV (rate, nper, pmt, pv, type)</code></p>
<p><code>IPmt IPmt</code> (Interest Payment) for a given period for an investment based on periodic, constant payment and a constant interest rate</p>
<p><code>IPMT (rate, per, nper, pv, fv, type)</code></p>
<p><code>IRR IRR</code> (Interest Rate of Return) for a series of cash flows represented by the numbers in values.</p>
<p><code>IRR(values,guess)</code></p>
<p><code>MIRR MIRR</code> ( Modified internal rate of return ) for a series of periodic cash flows</p>
<p><code>MIRR(values,finance_rate,reinvest_rate)</code></p>
<p><code>NPer</code> Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.</p>
<p><code>NPER (rate, pmt, pv, fv, type)</code></p>
<p><code>NPV</code> Calculates the net present value of an investment by using a discount rate and a series of future payments (negative values) and income (positive values).</p>
<p>Syntax: <code>NPV(rate,value1,value2, ...)</code></p>
<p><code>Pmt</code> Calculates the payment for a loan based on constant payments and a constant interest rate.</p>
<p><code>PMT(rate,nper,pv,fv,type)</code></p>
<p>PPmt Returns the payment on the principal for a given period for an investment based on periodic, constant payments and a constant interest rate.</p>
<p><code>PPMT(rate,per,nper,pv,fv,type)</code></p>
<p>PV Returns the present value of an investment. The present value is the total amount that a series of future payments is worth now. For example, when you borrow money, the loan amount is the present value to the lender.</p>
<p><code>PV(rate,nper,pmt,fv,type)</code></p>
<p>Rate Returns the interest rate per period of an annuity. RATE is calculated by iteration and can have zero or more solutions.</p>
<p><code>RATE(nper,pmt,pv,fv,type,guess)</code></p>
<p>SLN Returns the straight-line depreciation of an asset for one period.</p>
<p><code>SLN(cost,salvage,life)</code></p>
<p>SYD Returns the sum-of-years&rsquo; digits depreciation of an asset for a specified period.
<code>SYD(cost,salvage,life,per)</code></p>
<h3 id="conversion">Conversion</h3>
<p><code>CBool</code> Convert to boolean</p>
<p><code>CByte</code> Convert to byte</p>
<p><code>CChar</code> Convert to char</p>
<p><code>CDate</code> Convert to date</p>
<p><code>CDbl</code> Convert to double</p>
<p><code>CDec</code> Convert to decimal</p>
<p><code>CInt</code> Convert to integer</p>
<p><code>CLng</code> Convert to long</p>
<p><code>CObj</code> Convert to object</p>
<p><code>CShort</code> Convert to short</p>
<p><code>CSng</code> Convert to single</p>
<p><code>CStr</code> Convert to string</p>
<p><code>Hex =Hex(Fields!EmployeeID.Value)</code></p>
<p>Returns a hexadecimal value of a number</p>
<p><code>Int =Int(43.44)</code></p>
<p>Returns integer portion of a number</p>
<p><code>Oct =Oct(Fields!EmployeeID.Value)</code></p>
<p>Returns a octal value of a number</p>
<p><code>Str =Str(Fields!EmployeeID.Value)</code></p>
<p>Returns string value of a number</p>
<p><code>Val =Val(&quot;32.43&quot;)</code></p>
<p>Returns numeric value in string format</p>
<h3 id="miscellaneous">Miscellaneous</h3>
<p><code>Previous =Previous(Fields!EmployeeID.Value)</code></p>
<p>Returns the previous value</p>
]]></description></item></channel></rss>