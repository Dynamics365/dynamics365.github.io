<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>xml - Tag - Dynamics 365 Finance &amp; Operations | nuxulu.com</title><link>https://nuxulu.com/tags/xml/</link><description>xml - Tag - Dynamics 365 Finance &amp; Operations | nuxulu.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>luan52@outlook.com (Max Nguyen)</managingEditor><webMaster>luan52@outlook.com (Max Nguyen)</webMaster><lastBuildDate>Wed, 04 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://nuxulu.com/tags/xml/" rel="self" type="application/rss+xml"/><item><title>Create and write to XML file in Dynamics AX</title><link>https://nuxulu.com/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/</link><pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate><author>Max Nguyen</author><guid>https://nuxulu.com/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/</guid><description><![CDATA[<p>In this post let&rsquo;s explore creating XML using X++ code in Dynamics AX.</p>
<p>The following example shows how to create and write data to an XML file by using the <code>XmlDocument</code>, <code>XmlElement</code>, and <code>XmlWriter</code> classes. It loops through all of the records in the <code>CarTable</code> and find all the fields in the table automatically by using the <code>DictTable</code> and <code>DictField</code> classes.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#"><span class="line"><span class="cl"><span class="k">static</span> <span class="k">void</span> <span class="n">WriteXml</span><span class="p">(</span><span class="n">Args</span> <span class="n">_args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">XmlDocument</span> <span class="n">xmlDoc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">XmlElement</span> <span class="n">xmlRoot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">XmlElement</span> <span class="n">xmlField</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">XmlElement</span> <span class="n">xmlRecord</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">XMLWriter</span> <span class="n">xmlWriter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">CarTable</span> <span class="n">carTable</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DictTable</span> <span class="n">dTable</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DictTable</span><span class="p">(</span><span class="n">tablenum</span><span class="p">(</span><span class="n">CarTable</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">DictField</span> <span class="n">dField</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">fieldId</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="k">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="err">#</span><span class="n">CarsXmlTags</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Create a new object of the XmlDocument class</span>
</span></span><span class="line"><span class="cl">    <span class="n">xmlDoc</span> <span class="p">=</span> <span class="n">XmlDocument</span><span class="p">::</span><span class="n">newBlank</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Create the root node</span>
</span></span><span class="line"><span class="cl">    <span class="n">xmlRoot</span> <span class="p">=</span> <span class="n">xmlDoc</span><span class="p">.</span><span class="n">createElement</span><span class="p">(</span><span class="err">#</span><span class="n">CarRootNode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Loop through all the records in the carTable</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="k">select</span> <span class="n">carTable</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Create a XmlElement (record) to hold the</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// contents of the current record.</span>
</span></span><span class="line"><span class="cl">        <span class="n">xmlRecord</span> <span class="p">=</span> <span class="n">xmlDoc</span><span class="p">.</span><span class="n">createElement</span><span class="p">(</span><span class="err">#</span><span class="n">CarRecords</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Loop through all the fields in the record</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">=</span><span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="p">&lt;=</span><span class="n">dTable</span><span class="p">.</span><span class="n">fieldCnt</span><span class="p">();</span> <span class="n">i</span><span class="p">++)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Get the fieldId from the field-count</span>
</span></span><span class="line"><span class="cl">            <span class="n">fieldId</span> <span class="p">=</span> <span class="n">dTable</span><span class="p">.</span><span class="n">fieldCnt2Id</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// Find the DictField object that matches the fieldId</span>
</span></span><span class="line"><span class="cl">            <span class="n">dField</span> <span class="p">=</span> <span class="n">dTable</span><span class="p">.</span><span class="n">fieldObject</span><span class="p">(</span><span class="n">fieldId</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// Skip system fields</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">dField</span><span class="p">.</span><span class="n">isSystem</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create a new XmlElement (field) and</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// have the name equal to the name of the</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// dictField</span>
</span></span><span class="line"><span class="cl">            <span class="n">xmlField</span> <span class="p">=</span> <span class="n">xmlDoc</span><span class="p">.</span><span class="n">createElement</span><span class="p">(</span><span class="n">dField</span><span class="p">.</span><span class="n">name</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// Convert values to string. I have just added</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// a couple of conversion as an example.</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Use tableName.(fieldId) instead of fieldname</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// to get the content of the field.</span>
</span></span><span class="line"><span class="cl">            <span class="k">switch</span> <span class="p">(</span><span class="n">dField</span><span class="p">.</span><span class="n">baseType</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="n">Types</span><span class="p">::</span><span class="n">Int64</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">value</span> <span class="p">=</span> <span class="n">int642str</span><span class="p">(</span><span class="n">carTable</span><span class="p">.(</span><span class="n">fieldId</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="n">Types</span><span class="p">::</span><span class="n">Integer</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">value</span> <span class="p">=</span> <span class="n">int2str</span><span class="p">(</span><span class="n">carTable</span><span class="p">.(</span><span class="n">fieldId</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">default</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">value</span> <span class="p">=</span> <span class="n">carTable</span><span class="p">.(</span><span class="n">fieldId</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Set the innerText of the XmlElement (field)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// to the value from the table</span>
</span></span><span class="line"><span class="cl">            <span class="n">xmlField</span><span class="p">.</span><span class="n">innerText</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">             
</span></span><span class="line"><span class="cl">            <span class="c1">// Append the field as a child node to the record</span>
</span></span><span class="line"><span class="cl">            <span class="n">xmlRecord</span><span class="p">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">xmlField</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="c1">// Add the record as a child node to the root</span>
</span></span><span class="line"><span class="cl">        <span class="n">xmlRoot</span><span class="p">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">xmlRecord</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Add the root to the XmlDocument</span>
</span></span><span class="line"><span class="cl">    <span class="n">xmlDoc</span><span class="p">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">xmlRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Create a new object of the XmlWriter class</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// in order to be able to write the xml to a file</span>
</span></span><span class="line"><span class="cl">    <span class="n">xmlWriter</span> <span class="p">=</span> <span class="n">XMLWriter</span><span class="p">::</span><span class="n">newFile</span><span class="p">(</span><span class="s">@&#34;c:tempcars.xml&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Write the content of the XmlDocument to the</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// file as specified by the XmlWriter</span>
</span></span><span class="line"><span class="cl">    <span class="n">xmlDoc</span><span class="p">.</span><span class="n">writeTo</span><span class="p">(</span><span class="n">xmlWriter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The file that is created looks like the one in the following screenshot(only first part of the file is shown):</p>
<p><figure><a class="lightgallery" href="/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/create-and-write-to-xml-file-in-dynamics-ax_1.png" title="&amp;ldquo;create-and-write-to-xml&amp;rdquo;" data-thumbnail="/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/create-and-write-to-xml-file-in-dynamics-ax_1.png" data-sub-html="<h2>create-and-write-to-xml</h2><p>&amp;ldquo;create-and-write-to-xml&amp;rdquo;</p>">
        
    </a><figcaption class="image-caption">create-and-write-to-xml</figcaption>
    </figure></p>
<p>As you can see, this file is based on a standard XML format with tags and values only. You can, however, use tag attributes as well. To put the values from the table into tag attributes instead of their own tags, simply change the following code snippet in the example above</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#"><span class="line"><span class="cl"><span class="c1">// Set the innerText of the XmlElement (field)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// to the value from the table</span>
</span></span><span class="line"><span class="cl"><span class="n">xmlField</span><span class="p">.</span><span class="n">innerText</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Append the field as a child node to the record</span>
</span></span><span class="line"><span class="cl"><span class="n">xmlRecord</span><span class="p">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">xmlField</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>With these lines:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#"><span class="line"><span class="cl"><span class="c1">// Add the attribute to the record</span>
</span></span><span class="line"><span class="cl"><span class="n">xmlRecord</span><span class="p">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="n">dField</span><span class="p">.</span><span class="n">name</span><span class="p">(),</span> <span class="k">value</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The file that is created now looks like the one in the following screenshot:</p>
<p><figure><a class="lightgallery" href="/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/create-and-write-to-xml-file-in-dynamics-ax_2.png" title="&amp;ldquo;create-and-write-to-xml&amp;rdquo;" data-thumbnail="/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/create-and-write-to-xml-file-in-dynamics-ax_2.png" data-sub-html="<h2>create-and-write-to-xml</h2><p>&amp;ldquo;create-and-write-to-xml&amp;rdquo;</p>">
        
    </a><figcaption class="image-caption">create-and-write-to-xml</figcaption>
    </figure></p>
]]></description></item></channel></rss>