<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>operator on Dynamics 365 Finance Operations &amp; Power Platform</title>
    <link>https://nuxulu.com/tags/operator/</link>
    <description>Recent content in operator on Dynamics 365 Finance Operations &amp; Power Platform</description>
    <image>
      <url>https://nuxulu.com/47</url>
      <link>https://nuxulu.com/47</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Nov 2016 08:22:39 +0700</lastBuildDate><atom:link href="https://nuxulu.com/tags/operator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Type system of Dynamics AX 2012</title>
      <link>https://nuxulu.com/posts/2016-11-25-the-type-system-of-dynamics-ax-2012/</link>
      <pubDate>Thu, 24 Nov 2016 08:22:39 +0700</pubDate>
      
      <guid>https://nuxulu.com/posts/2016-11-25-the-type-system-of-dynamics-ax-2012/</guid>
      <description>&lt;p&gt;The Microsoft Dynamics AX runtime manages the storage of &lt;em&gt;value type&lt;/em&gt; data on the &lt;strong&gt;call stack&lt;/strong&gt; and &lt;em&gt;reference type objects&lt;/em&gt; on the &lt;strong&gt;memory heap&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The call stack&lt;/strong&gt; is the memory structure that holds data about the active methods called during program execution. &lt;strong&gt;The memory heap&lt;/strong&gt; is the memory area that allocates storage for objects that are destroyed automatically by the Microsoft Dynamics AX run-time.&lt;/p&gt;
&lt;h2 id=&#34;value-types&#34;&gt;Value types&lt;/h2&gt;
&lt;p&gt;Value types include the built-in &lt;code&gt;primitive types, extended data types, enumeration types, and built-in collection types&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The primitive types&lt;/strong&gt; are boolean, int, int64, real, date, utcDateTime, timeofday, str, and guid.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The extended data types&lt;/strong&gt; are specialized primitive types and specialized base enumerations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The enumeration types&lt;/strong&gt; are base enumerations and extended data types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The collection types&lt;/strong&gt; are the built-in array and container types.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DefaultValue ComboBox in Dynamics AX with X&#43;&#43;</title>
      <link>https://nuxulu.com/posts/2015-11-03-defaultvale-combobox-in-x/</link>
      <pubDate>Fri, 13 Nov 2015 06:57:46 +0700</pubDate>
      
      <guid>https://nuxulu.com/posts/2015-11-03-defaultvale-combobox-in-x/</guid>
      <description>Beside modify metadata on form properties, as best practice we can use code like below to assign default value for combobox.
 You can use this code in the form&amp;rsquo;s init method after super():  {% highlight csharp %} ComboBoxName.selection(ComboBoxName::DefaultValue); {% endhighlight %}
 If this is a table field we should you best practice overriding the initValue method in the table:  {% highlight csharp %} this.ComboBoxName = ComboBoxName::DefaultValue; {% endhighlight %}</description>
    </item>
    
    <item>
      <title>HOW TO USE &#34;LIKE&#34; OPERATOR IN QUERYBUILDRANGE</title>
      <link>https://nuxulu.com/posts/2015-11-13-how-to-use-like-operator-in-querybuildrange/</link>
      <pubDate>Fri, 13 Nov 2015 06:57:46 +0700</pubDate>
      
      <guid>https://nuxulu.com/posts/2015-11-13-how-to-use-like-operator-in-querybuildrange/</guid>
      <description>To make something as the LIKE operator in a query, just assign a value to the QueryRange including a wildcard.
static void QueryBuildRange_Sample(Args _args) { Query query = new Query(); QueryRun queryRun; QueryBuildDataSource qbds; QueryBuildRange queryRange; CustTable custTable; qbds.addDataSource(tableNum(CustTable)); queryRange = qbds.addRange(fieldNum(CustTable, AccountNum)); queryRange.value(&amp;#34;axd*&amp;#34;); queryRun = new QueryRun(query); while(queryRun.next()) { custTable = queryRun.get(tableNum(CustTable)); print custTable.AccountNum; } pause; } </description>
    </item>
    
  </channel>
</rss>
