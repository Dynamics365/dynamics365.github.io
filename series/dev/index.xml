<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title>dev - series - Dynamics 365 Finance &amp; Operations | nuxulu.com</title>
        <link>https://nuxulu.com/series/dev/</link>
        <description>dev - series - Dynamics 365 Finance &amp; Operations | nuxulu.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>luan52@outlook.com (Max Nguyen)</managingEditor>
            <webMaster>luan52@outlook.com (Max Nguyen)</webMaster><lastBuildDate>Wed, 05 May 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://nuxulu.com/series/dev/" rel="self" type="application/rss+xml" /><item>
    <title>Data Entity Tips</title>
    <link>https://nuxulu.com/news/2100-01-01-data-entity-tips/</link>
    <pubDate>Wed, 05 May 2021 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><guid>https://nuxulu.com/news/2100-01-01-data-entity-tips/</guid>
    <description><![CDATA[<h4 id="custom-from-staging-to-target">Custom from staging to target</h4>
<p>When importing data into AX using data entities, sometimes there is no way to match data structure between data source (xml file, excel spredsheet, etc) and AX table. For instance:</p>
<ul>
<li>Single line from a spredsheel source needs to be split amoung table header and table line in D365.</li>
<li>Records creation is assisted by some class and cannot be directly created by DMF (Data Management Framework).</li>
</ul>
<p>From your data entity, create a new static field following the below template:</p>
<blockquote>
<p>Kindly note this is a personal quick recommendation. Obviously this code can be improved.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">static</span> <span class="n">container</span> <span class="n">copyCustomStagingToTarget</span><span class="p">(</span><span class="n">DMFDefinitionGroupExecution</span> <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">CustCustomerStaging</span> <span class="n">staging</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">CustCustomerStaging</span> <span class="n">stagingUpd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Iterate through all records with have not been processed</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="k">select</span> <span class="n">forupdate</span> <span class="n">staging</span>
</span></span><span class="line"><span class="cl">        <span class="k">where</span> <span class="n">staging</span><span class="p">.</span><span class="n">ExecutionId</span>    <span class="p">==</span> <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">ExecutionId</span>
</span></span><span class="line"><span class="cl">        <span class="p">&amp;&amp;</span>   <span class="p">(</span><span class="n">staging</span><span class="p">.</span><span class="n">TransferStatus</span> <span class="p">==</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">NotStarted</span> <span class="p">||</span> <span class="n">staging</span><span class="p">.</span><span class="n">TransferStatus</span> <span class="p">==</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">Validated</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ttsbegin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Do your stuff</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">staging</span><span class="p">.</span><span class="n">TransferStatus</span> <span class="p">=</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">Completed</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">staging</span><span class="p">.</span><span class="n">update</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">ttscommit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">::</span><span class="n">Error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">error</span><span class="p">(</span><span class="s">&#34;Something wrong has happened.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ttsbegin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">update_recordset</span> <span class="n">staging</span>
</span></span><span class="line"><span class="cl">        <span class="n">setting</span> <span class="n">TransferStatus</span> <span class="p">=</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">Error</span>
</span></span><span class="line"><span class="cl">        <span class="k">where</span> <span class="n">staging</span><span class="p">.</span><span class="n">DefinitionGroup</span> <span class="p">==</span> <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">DefinitionGroup</span>
</span></span><span class="line"><span class="cl">        <span class="p">&amp;&amp;</span>    <span class="n">staging</span><span class="p">.</span><span class="n">ExecutionId</span>     <span class="p">==</span> <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">ExecutionId</span>
</span></span><span class="line"><span class="cl">        <span class="p">&amp;&amp;</span>   <span class="p">(</span><span class="n">staging</span><span class="p">.</span><span class="n">TransferStatus</span> <span class="p">==</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">NotStarted</span> <span class="p">||</span> <span class="n">staging</span><span class="p">.</span><span class="n">TransferStatus</span> <span class="p">==</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">Validated</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ttscommit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Method returns a container containing the quantities of inserted and updated records.</span>
</span></span><span class="line"><span class="cl">    <span class="k">select</span> <span class="n">count</span><span class="p">(</span><span class="n">RecId</span><span class="p">)</span> <span class="k">from</span> <span class="n">staging</span>
</span></span><span class="line"><span class="cl">        <span class="k">where</span> <span class="n">staging</span><span class="p">.</span><span class="n">DefinitionGroup</span> <span class="p">==</span> <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">DefinitionGroup</span>
</span></span><span class="line"><span class="cl">            <span class="p">&amp;&amp;</span> <span class="n">staging</span><span class="p">.</span><span class="n">ExecutionId</span> <span class="p">==</span> <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">ExecutionId</span>
</span></span><span class="line"><span class="cl">            <span class="p">&amp;&amp;</span> <span class="n">staging</span><span class="p">.</span><span class="n">TransferStatus</span> <span class="p">==</span> <span class="n">DMFTransferStatus</span><span class="p">::</span><span class="n">Completed</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">staging</span><span class="p">.</span><span class="n">RecId</span><span class="p">,</span> <span class="m">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In order to <em>copyCustomStagingToTarget</em> be executed, you need to set field <em>Set-based processing</em> as <strong>TRUE</strong>.<br>
<em>Data management workspace &gt; Data entities button</em><br>
</p>
<h4 id="exporting-large-amounts-of-data">Exporting large amounts of data</h4>
<p>A list of few things to take into consideration before exporting a millions of records:</p>
<ul>
<li>Do your best to skip staging. This wont be possible if your entity has any computed field or container field. Data management will info about any other field type that is preventing your to skip staging.</li>
<li>When exporting to a BYOD, make sure you have enough <a href="https://docs.microsoft.com/en-gb/azure/azure-sql/database/service-tiers-dtu" target="_blank" rel="noopener noreferrer">DTU</a> assigned to your target Azure database.</li>
</ul>
<h4 id="handling-errors-messages">Handling errors messages</h4>
<p>Basically there are two types of data entities errors messages: from <em>View excecution log</em> message and <em>View staging data</em> message. <em>View excecution log</em> displays messages in macro way e.g. &ldquo;Could not connect into system X&rdquo;, while <em>View staging data</em> displays messages to each distinct staging table record.</p>
<h5 id="creating-logs-in-view-excecution-log">Creating logs in <em>View excecution log</em></h5>
<p>Any message printed during DMF execcution (info, warning and error) will end up being displayed in <em>View excecution log</em> area.</p>
<h5 id="creating-logs-in-view-staging-data">Creating logs in <em>View staging data</em></h5>
<p>To display custom log message to specifics staging records, use the following snippet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">DMFStagingValidationLog</span><span class="p">::</span><span class="n">insertLogs</span><span class="p">(</span><span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">DefinitionGroup</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">ExecutionId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">DMFEntity</span><span class="p">::</span><span class="n">find</span><span class="p">(</span><span class="m">_d</span><span class="n">mfDefinitionGroupExecution</span><span class="p">.</span><span class="n">Entity</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">staging</span><span class="p">.</span><span class="n">RecId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;My custom log message&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">DMFSourceTarget</span><span class="p">::</span><span class="n">Target</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="entity-methods">Entity methods</h4>
<h5 id="mapentitytodatasource">mapEntityToDataSource</h5>
<ul>
<li><strong>Direction</strong>: Importing</li>
<li><strong>Purpose</strong>: When importing, use it to fill either datasource or entity fields based on entity fields.</li>
<li><strong>Example</strong>: In <em>CustCustomerEntity.mapEntityToDataSource()</em>, <em>EmployeeResponsibleNumber</em> field value is used to retrive worker record id and set it into <em>MainContactWorker</em> field from entity itself.</li>
</ul>
]]></description>
</item><item>
    <title>LCS API Database Movement with PowerAutomate</title>
    <link>https://nuxulu.com/news/2100-01-01-lcs-api-database-movement-with-powerautomate/</link>
    <pubDate>Wed, 05 May 2021 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><guid>https://nuxulu.com/news/2100-01-01-lcs-api-database-movement-with-powerautomate/</guid>
    <description><![CDATA[<p>Hello Dynamics &amp; Power Community,</p>
<p>I’m very happy to announce a good news for you the Dynamics365 F&amp;O Community. I’ve got a little gift for you, as part of the new LCS API.</p>
<p>If you were, like me as an AX 2012 or F&amp;O Technical/Architect Consultant, you probably already suffered from not being able to offer customers the ability to automatically refresh your database from one environment to other. Of course, you could do it via scripts, powershell (but really complicated for LCS and F&amp;O : see even impossible), but finally doing it by code actually…. and here I will show you the benefit of the PowerAutomate / Flow to refresh automatically your F&amp;O production instance to an UAT instance, without any line of code !</p>
<p>I will provide you, the How-To setup here in this article (step-by-step), also 3 samples of my GitHub account for PowerAutomate flow.</p>
<p>Hope you will like it, and feel free to share it :)</p>
<p></p>
<p>So…. how to start :)</p>
<p>First of all, here is a quick summary of the new API for LCS - in Dynamics 365 F&amp;O.</p>
<p>Like you know, we were not able to perform automatic Database movement in the past. We get only to an Azure Marketplace a flow between Azure DevOps release pipeline in order to upload your BUILD package and also setup an automatic deployment. It was the very beginning to perform great automatic release pipelines : like me, deploying every night for customers a recent package in our TEST environments every night after BUILD completed.</p>
<p>Database movement operations are a suite of self-service actions that can be used as part of Data Application Lifecycle Management (also referred to as <em>DataALM</em>). These actions provide structured processes for common implementation scenarios such as golden configuration promotion, debugging/diagnostics, destructive testing, and general refresh for training purposes.</p>
<p>In this topic, you will learn how to use database movement operations to perform refresh, export, import, and various flavors of point-in-time restore.</p>
<p>At the time, I write this article, the LCS API have only 4 methods but I hope Microsoft will add soon more methods and of course I will share that with you depending on which and when it will be possible.</p>
<p>We can perform the following operations through the RESTful API:</p>
<ul>
<li>
<p>List DB backups for an LCS project.</p>
</li>
<li>
<p>Create a DB refresh between two environments (only Prod and Sandbox environments, like we can do in LCS).</p>
</li>
<li>
<p>Get an ongoing operation status.</p>
</li>
</ul>
<p>Quick feedbacks for Microsoft : we really need to add also monitoring KPI stuff methods in order to get the DTU SQL Percentage Live for production or other stuff like that, in order to not connect every time in the LCS Portal and check if everything looks good : to be proactive in fact / and maybe also restart service etc… : but yep I maybe ask a lot, it’s a good start now that this API is open, so I know that Microsoft will bring this API even better this year !</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/database/api/dbmovement-api-overview?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">Microsoft Documentation - LCS API</a></p>
<hr>
<p>First, you will need to create an Azure AAD in order to connect to the LCS API.</p>
<p>You can go here for the How-To setup :</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/database/api/dbmovement-api-authentication?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/database/api/dbmovement-api-authentication</a></p>
<p>Don’t forget to copy somewhere your ClientID : ApplicationID and also to generate a ClientSecret. Also don’t forget to put the Dynamics Lifecycle Services like below as a Delegated access, with Grant Admin permission.</p>
<p></p>
<p>So, now you have the access to call the LCS API, and you can authenticate to it. But maybe, like me, if you had in the past configure the AzureDevOps release pipeline process to connect to LCS, you had maybe already an App Registration in your Azure AD, so you can keep it and reuse for this purpose.</p>
<hr>
<p>Just for your information, It was not possible to create directly for you Custom Connectors in PowerAutomate in order to deploy it more easily. Since the LCS API use at the moment a strange and old school authentification. Hope I can share that when OAuth 2.0 will be used for this API !). But these samples will be enough and easy to configure, trust me !</p>
<p>Now, you can get my PowerAutomate / Flow samples directly in my Github Account :</p>
<p>Download all the 3 ZipFiles</p>
<p><a href="https://github.com/AurelienClere-365/ALM-LCS-PowerAutomate" target="_blank" rel="noopener noreferrer">ALM LCS PowerAutomate Samples - Github</a></p>
<p>After, you can go to your PowerAutomate account. I know that partners/customers in FinOps are not (yet ?) going very much in there, but still, I hope I will help you to discover this fantastic feature in the PowerPlatform ! And yes, normally (like me), if you had bought your F&amp;O licences, <strong>you have already a free account for every users, and it will be more than enough to setup some flows like this one.</strong></p>
<p><a href="https://flow.microsoft.com/" target="_blank" rel="noopener noreferrer">https://flow.microsoft.com</a></p>
<p>Go, to “My Flows” in order to import it.</p>
<p></p>
<p>Select my ZIP file from my Github,</p>
<p></p>
<p>Here, don’t be afraid for the 2 resources / connectors (Mail &amp; Push mobile notification) you can setup it before importing or just map to your connectors if you had already setup for other flows before. I just used them in order to give you some example of actions, you can delete them after import process.</p>
<p>When you have done all done 3 imports of the sample, let’s go in 1 by 1 if you don’t mind !</p>
<hr>
<h2 id="1-powerautomate-sample---lcs-api---automatic-refresh-database">1. PowerAutomate Sample - LCS API - Automatic refresh database</h2>
<p></p>
<p>If you go in, I will explain step-by-step in order to configure it and also give inputs why I’ve done that :)</p>
<p>Click on “EDIT” button.</p>
<p>Here is below the whole flow, without any line of code :)</p>
<p></p>
<p>So, first step, since it’s a scheduled flow in my example, I can setup when my flow will run. Here I have put every weedays at 7 p.m but sure you can edit it of course. Keep in mind, that you can of course do it by a trigger from other connector in PowerAutomate. Like maybe do it after an Azure DevOps Pipeline is finished or after a BUILD process, after also an approval by someone else in Microsoft Teams in adaptive card, by a click in a button in a PowerApps : well, I can give 150 examples so you can setup like you want !</p>
<p><strong>Just be careful also on the interval, you can setup only 3 refresh in a day for 1 target environment ! (limitation by LCS)</strong></p>
<p></p>
<p>After I just create a variable to put your LCS project ID. Of course, change the value in it to reflect your current LCS project.</p>
<p>You can grab it directly in your LCS portal if you don’t know it</p>
<p></p>
<p></p>
<p>After, I use the HTTP connector to perform the authentification with of course your Azure Application ID and Secret token that you have created earlier.</p>
<p></p>
<p>You will need here only to change the values of : username, password, clientid and clientsecret.</p>
<p>Keep the resource and grant_type like this, as it is. Don’t change the Content-Type of the header.</p>
<p>One more thing : don’t use an LCS account that of course doesn’t have access and have appropriate security role. And like me, don’t use an account that has a MFA account (Multi Factor Authentification), use like an administrator/service account.</p>
<p>After I just use the Parse JSON feature, in order to get the object of the response. The most important thing is the property : <strong>Access_Token</strong></p>
<p>It will be used after for every call to the LCS API, in the header, you will see :)</p>
<p>Keep in mind that the Token is for 1 hour of expiration !! So don’t forget to refresh your call to authenticate after 1 hour if you need to !</p>
<p></p>
<p>After I have created 2 more variables : the source &amp; target environment of your LCS environments that you want to refresh database. Of course, change by your need !</p>
<p></p>
<p>As a reminder, you can get the Environment ID by going in more details of LCS.</p>
<p></p>
<p>Finally I call the LCS API to refresh the database, like this :</p>
<p>Here you don’t have to change anything, good right ? :)</p>
<p>But, I want to explain the Authorization header. It’s here that we put the Access_Token of the response after authentification.</p>
<p>It’s like : Bearer xxxxxxxxxxxxxxxxx_veryhugemassive_token</p>
<p><strong>The space key is mandatory, so don’t forget it !</strong></p>
<p><strong>Of course at the end, I add it also a Parse JSON to build the object response of the API.</strong></p>
<p></p>
<p>After, I added a conditional split. Of course, the purpose is to achieve a different path in the Flow, if the response is OK or not…</p>
<p></p>
<p>In my “not success path”, I just put a Push Mobile Notification Action, but it’s just an example of course. You can change it by whatever you like. Don’t forget you have now more than 300 connectors in PowerAutomate (Microsoft and other third-party apps !)</p>
<p></p>
<p>On my “success path”, here is for me the most important feature !</p>
<p>First step here, I wait for 1 hour, magic no ? but why ? Well because, we don’t have to call LCS API to fetch the status of the current activity of the database refresh until more than 1 hour. Like me, it takes 1hour30min and sometimes maybe 2 hours to finish all the refresh. But you change it of course by adding just 30 minutes of wait if you had experience faster refresh on your side ! It’s also for me a good example to show you that we can put Expression without to be a massive developper !</p>
<p></p>
<p>After I’ve done a Do Until feature, in order to call every 5 minutes the LCS API to fetch the status. In order to after doing some actions in the same flow.</p>
<p>The end of my “while&rsquo;“ loop is until we’ve got a Status Operation than is not equal to : In Progress. <strong>Just be careful of the Change Limits here, you have to increase it to 300 like me</strong>, because by default it’s 60 : that’s say that we will only do this part for 60 minutes. But I already do that for you :)</p>
<p>Update (17/04/20) : Just found that you can also increase the timeout of the Do Until statement. By default it’s PT1H , you can change by PT2H for 2 hours or more if you need.</p>
<p></p>
<p>After, I just fetch the status of the Operation/Activity of the database refresh to know if it’s finished :) Parsing JSON again of course, every time in fact so I hope you are now familiar with that.</p>
<p></p>
<p>And now, when it’s ended, why I’ve done that ? Well because on my side (and I think you also), you have some “Post-Refresh” statement - script or SQL script to achieve. As you know, after a refresh database, you have all BatchJobs On Hold, only 1 user access activated, and you want maybe to change some parameter to reflect the change and of course don’t activate the Email distributor batch to sent email to a customer from an UAT Instance… believe me I’ve seen that many times !</p>
<p>So that’s why I’ve put this last step here and will explain more deeper with just a small part of X++ code for AX Technical guys.</p>
<p></p>
<p>In fact, it was not possible for me to give you a sample of the Dyn365 F&amp;O connector to share it (without giving my credentials) directly in this sample, so you will need to do it yourself for this part.</p>
<p>So, of course you will erase this part of sending email after completion, it’s irrelevant. You already receive an email from LCS when the refresh is done.</p>
<p>First, you can of course add other actions if you want to, like I’ve said before you have 300 connectors so you can put something else.</p>
<p>But for me, you will change by that !! The Dynamics 365 FinOps connector in order to call Action / in fact it’s like a job in AX. It refers to the methods applied to a data entity.</p>
<p>Create a new step like that by choosing the right connector. You will notice that you have multiple actions. Here you can see that for other Flow/PowerAutomate you can achieve more : by creating, updating, retrieving records etc…. so for other use cases, you can have a look !</p>
<p></p>
<p>Here, I will pick “Execute Action” :</p>
<p></p>
<p>But, like me, my question was : “What the hell are coming from these actions ???”</p>
<p>See the documentation of the connector F&amp;O :</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/fin-ops-connector?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">Learn more</a></p>
<p>Like I said, it’s coming from Methods in the Data Entities in F&amp;O. So like I’ve done below, you can create a custom one, and create method that in fact will do of course your post-refresh database script. Like me, it was done for reactivate all users, batchjobs. But sure, you can do it depending on your needs !</p>
<ul>
<li><strong>Just as a reminder, don’t forget to use the connector F&amp;O with the Environment Manager that have access after a database refresh !</strong></li>
</ul>
<p>So just create a new Data entity, that refer to whatever table coming from AX like that :</p>
<p></p>
<p>Create your methods, that refer to <strong>SysODataActionAttribute</strong>.</p>
<p>Here I don’t give a response (void) but you can of course also put some object if you need to get back to PowerAutomate flow.</p>
<p></p>
<p>Here we are, finished for this first sample.</p>
<hr>
<h2 id="2-lcs-api---export-database">2. LCS API - Export database</h2>
<p>You already know that we can export database also on the LCS Portal by manual action on a Sandbox instance. Of course, it can be good to do it like just after our previous sample because we have done a flow (DataALM) to refresh the production to an UAT instance. If you want to get the .bacpac (backup of SQL Azure) in order to deploy it (implied your production database) to a DEV environment. Maybe also because you want to archive it to a safe repository. So yes, the LCS API has already a method for that, that’s why I made this sample for you.</p>
<p>I assume that you have already download it from my GitHub Account before and already import it like the previous one.</p>
<p>Go in this flow.</p>
<p>I will not explain again this part, because it’s exactly the same as the Database Refresh.</p>
<p></p>
<p>After, I made 2 variables : the backupName wanted and also the environmentId that you want to export the database.</p>
<p></p>
<p>After, I call the LCS API and grab the response to a JSON object.</p>
<p></p>
<p>Finally the conditional split, you can change like before by whatever you want.</p>
<p></p>
<hr>
<h2 id="3-retrieve-list-of-database-backup">3. Retrieve list of database backup</h2>
<hr>
<p>Here, we will have the possibility to retrieve the list of the whole backup list in your LCS Asset Library. As you know, it’s the default storage, where all database backup are coming.</p>
<p></p>
<p>At the end I’ve done a For Each feature, good way to show you this point !</p>
<p></p>
<p>Well… sad news : true. Because I try to add also an another HTTP Connector for the FileLocation (it’s the HTTP location where you can download your backup) but the limitation is for 100MB so you will get like me an error. My aim was after to grab the fileContent to a OneDrive, Google Drive, Sharepoint or Azure Blob Storage, but yes… at this time we can’t.</p>
<p>The only way that I have for you, is to do it by a more complicated way. You can create a powershell script in your own network / share folder (onPremise). You can after download the Data Gateway for PowerAutomate in order to call your script, passing through the FileLocation and your Powershell will download it on your onPremise folder. Yes I didn’t talk about that, but yes we can achieve a connection from PowerAutomate (SaaS - Cloud Only) to connect on an onPremise API - Service.</p>
<p></p>
<p><a href="https://docs.microsoft.com/en-us/power-automate/gateway-reference?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">PowerAutomate - Data Gateway onPremise</a></p>
<p><a href="https://sergeluca.wordpress.com/2017/12/01/upload-and-run-a-remote-powershell-script-from-microsoft-flow/" target="_blank" rel="noopener noreferrer">PowerAutomate - Powershell onPremise</a></p>
<hr>
<p>To conclude : I hope you like it :) Besides that, feel free to contact me, comment, do feedbacks etc…</p>
<p>You can see easily that PowerAutomate in part of the PowerPlatform is really a huge feature that will help us in a lot of flows for F&amp;O project.</p>
<p>Because despite this technical part of DataALM, like I’ve done for other articles in this blog, we can achieve a lot more of use cases now ! Business cases , Business Events etc…</p>
<p>See you ! Stay tuned. Add me on social networks :)</p>
]]></description>
</item><item>
    <title>Azure DevTest Labs powered builds for Dynamics 365 FinOps</title>
    <link>https://nuxulu.com/news/2100-01-01-azure-devtest-labs-powered-builds-for-dynamics-365-finops/</link>
    <pubDate>Mon, 03 May 2021 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><guid>https://nuxulu.com/news/2100-01-01-azure-devtest-labs-powered-builds-for-dynamics-365-finops/</guid>
    <description><![CDATA[<p><strong>This post has been written thanks to <a href="https://twitter.com/jorisdg" target="_blank" rel="noopener noreferrer">Joris de Gruyter</a>‘s session in the past <a href="https://dynamicscon.com/" target="_blank" rel="noopener noreferrer">DynamicsCon</a></strong>: <a href="https://www.youtube.com/watch?v=VIib-m6Q8LQ" target="_blank" rel="noopener noreferrer">Azure Devops Automation for Finance and Operations Like You’ve Never Seen!</a> And there’s also been some investigation and (a lot of) trial-and-error from my side until everything has been working.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/adtl-1024x1024.png" title="Azure DevTest Labs" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/adtl-1024x1024.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 1</h2><p>Azure DevTest Labs</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 1</figcaption>
    </figure></p>
<p>Configuring the build VM in Azure DevTest Labs</p>
<p>If you want to know more about builds, releases, and the Dev ALM of Dynamics 365 you can read my full guide on <a href="https://ariste.info/en/msdyn365-azure-devops-alm/" target="_blank" rel="noopener noreferrer">MSDyn365 &amp; Azure DevOps ALM</a>.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnobut-firstbut-first"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#but-first" target="_blank" rel="noopener noreferrer"></a>But first…</h2>
<p>What I’m showing in this post is not a perfect blueprint. There’s a high probability that if you try exactly the same as I do here, you won’t get the same result. But it’s a good guide to get started and do some investigation on your own and learn.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoazure-devtest-labsazure-devtest-labs"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#azure-devtest-labs" target="_blank" rel="noopener noreferrer"></a>Azure DevTest Labs</h2>
<p><a href="https://azure.microsoft.com/en-us/services/devtest-lab?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure DevTest Labs</a> is an Azure tool/service that allows us to <strong>deploy virtual machines and integrate them with Azure DevOps pipelines</strong>, and many other things, but what I’m going to explain is just the VM and pipeline part.</p>
<p>What will I show in this post? How to <strong>prepare a Dynamics 365 Finance and Operations VHD image to be used as the base to create a build virtual machine from an Azure DevOps pipeline</strong>, build our codebase, synchronize the DB, run tests, even deploy the reports, generate the deployable package and delete the VM.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnogetting-and-preparing-the-vhdgetting-and-preparing-the-vhd"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#getting-and-preparing-the-vhd" target="_blank" rel="noopener noreferrer"></a>Getting and preparing the VHD</h2>
<p>This is by far the most tedious part of all the process because you need to download 11 ZIP files from LCS’ Shared Asset Library, and we all know how fast things download from LCS.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/fast.png" title="LCS download speed" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/fast.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 2</h2><p>LCS download speed</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 2</figcaption>
    </figure></p>
<p>How is LCS download speed?</p>
<p>And to speed it up we can create a blob storage account on Azure and once more turn to <a href="https://mobile.twitter.com/splaxi" target="_blank" rel="noopener noreferrer">Mötz Jensen</a>‘s <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a> and use the Invoke-D365AzCopyTransfer cmdlet. Just go to LCS, click on the “Generate SAS link” button for each file, use it as the source parameter in the command and your blob SAS URL as the destination one. Once you have all the files in your blob you can download them to your local PC at a good speed.</p>
<p>Once you’ve unzipped the VHD you need to change it from Dynamic to Fixed using this PowerShell command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Convert-VHD</span> <span class="err">–</span><span class="n">Path</span> <span class="n">VHDLOCATION</span><span class="p">.</span><span class="n">vhd</span> <span class="err">–</span><span class="n">DestinationPath</span> <span class="n">NEWVHD</span><span class="p">.</span><span class="n">vhd</span> <span class="err">–</span><span class="n">VHDType</span> <span class="n">Fixed</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The reason is <strong>you can’t create an Azure VM from a dynamically-sized VHD</strong>. And it took me several attempts to notice this 🙂</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocreate-a-devtest-labs-accountcreate-a-devtest-labs-account"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#create-a-devtest-labs-account" target="_blank" rel="noopener noreferrer"></a>Create a DevTest Labs account</h2>
<p>To do this part <strong>you need an Azure account</strong>. If you don’t have one you can <a href="https://azure.microsoft.com/en-us/free?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">sign up for a free Azure account</a> with a credit of 180 Euros (200 US Dollars) to be spent during 30 days, plus many other free services during 12 months.</p>
<p>Search for DevTest Labs in the top bar and create a new DevTest Lab. Once it’s created open the details and you should see something like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest1.png" title="Azure DevTest Labs" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest1.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 3</h2><p>Azure DevTest Labs</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 3</figcaption>
    </figure></p>
<p>Azure DevTest Labs</p>
<p>Click on the “Configuration and policies” menu item at the bottom of the list and scroll down in the menu until you see the “Virtual machine bases” section:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest2.png" title="DevTest Labs custom VHD image" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest2.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 4</h2><p>DevTest Labs custom VHD image</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 4</figcaption>
    </figure></p>
<p>DevTest Labs custom image</p>
<p>And now comes the second funniest part of the process: <strong>we need to upload the 130GB VHD image to a blob storage account</strong>! So, click the “Add” button on top and in the new dialog that will open click the “Upload a VHD using PowerShell”. This will generate a PowerShell script to upload the VHD to the DevTest Labs blob. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">Generated script to upload a local VHD to Azure.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">WARNING: The destination will be publicly available for 24 hours, after which it will expire.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm"> Ensure you complete your upload by then.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">Run the following command in a Azure PowerShell console after entering
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">the LocalFilePath to your VHD.
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Add-AzureRmVhd</span> <span class="p">\</span><span class="n">-Destination</span> <span class="s2">&#34;https://YOURBLOB.blob.core.windows.net/uploads/tempImage.vhd?sv=2019-07-07&amp;st=2020-12-27T09%3A08%3A26Z&amp;se=2020-12-28T09%3A23%3A26Z&amp;sr=b&amp;sp=rcw&amp;sig=YTeXpxpVEJdSM7KZle71w8NVw9oznNizSnYj8Q3hngI%3D&#34;</span> <span class="p">\</span><span class="n">-LocalFilePath</span> <span class="s2">&#34;&lt;Enter VHD location here&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest3.png" title="DevTest Labs custom image upload" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest3.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 5</h2><p>DevTest Labs custom image upload</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 5</figcaption>
    </figure></p>
<p>DevTest Labs custom image upload</p>
<p>An alternative to this is using the Azure Storage Explorer as you can see in the image on the left.</p>
<p>You should upload the VHD to the uploads blob.</p>
<p>Any of these methods is good to upload the VHD and I don’t really know which one is faster.</p>
<p>Once the VHD is uploaded open the “Custom images” option again and you should see the VHD in the drop-down:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest4.png" title="DevTest Labs custom image" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest4.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 6</h2><p>DevTest Labs custom image</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 6</figcaption>
    </figure></p>
<p>DevTest Labs custom image</p>
<p>Give the image a name and click OK.</p>
<p>What we have now is the <strong>base for a Dynamics 365 Finance and Operations dev VM</strong> which we need to prepare to use it as a build VM.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocreating-the-vmcreating-the-vm"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#creating-the-vm" target="_blank" rel="noopener noreferrer"></a>Creating the VM</h2>
<p>We’ve got the essential, a VHD ready to be used as a base to create a virtual machine in Azure. Our next step is finding a way to make the deployment of this VM <strong>predictable and automated</strong>. We will attain this thanks to <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure ARM templates</a>.</p>
<p>Go back to your DevTest Labs overview page and click the “Add” button, on the “Choose base” page select the base you’ve just created, and on the next screen click on the “Add or Remove Artifacts” link:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest5.png" title="Add artifacts to the VM" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest5.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 7</h2><p>Add artifacts to the VM</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 7</figcaption>
    </figure></p>
<p>Add artifacts to the VM</p>
<p>Search for <strong>WinRM</strong>, select “Configure WinRM”, and on the next screen enter “Shared IP address” as the hostname box and click “Add”.</p>
<p><strong>Note</strong>: if when the VM runs the artifacts can’t be installed check whether the <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/agent-windows?WT.mc_id=BA-MVP-5003976#manual-installation" target="_blank" rel="noopener noreferrer">Azure VM Agent</a> is installed on the base VHD. Thanks to Joris for pointing this out!</p>
<h3 id="51-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoconfigure-azure-devops-agent-serviceconfigure-azure-devops-agent-service">5.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#configure-azure-devops-agent-service" target="_blank" rel="noopener noreferrer"></a>Configure Azure DevOps Agent Service</h3>
<h3 id="52-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnooption-a-use-an-artifactoption-a-use-an-artifact">5.2. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#option-a-use-an-artifact" target="_blank" rel="noopener noreferrer"></a>Option A: use an artifact</h3>
<p><strong>Update</strong>: thanks to <strong><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#comment-7107" target="_blank" rel="noopener noreferrer">Florian Hopfner</a></strong> for reminding me this because I forgot… If you choose Option A to install the agent service you need to do some things first!</p>
<p>The first thing we need to do is running some PowerShell scripts that create registry entries and environment variables in the VM, go to C:\DynamicsSDK and run these:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="p">$(</span><span class="nb">Join-Path</span> <span class="p">\</span><span class="n">-Path</span> <span class="s2">&#34;C:\\DynamicsSDK&#34;</span> <span class="p">\</span><span class="n">-ChildPath</span> <span class="s2">&#34;DynamicsSDKCommon.psm1&#34;</span><span class="p">)</span> <span class="p">\</span><span class="n">-Function</span> <span class="s2">&#34;Write-Message&#34;</span><span class="p">,</span> <span class="s2">&#34;Set-AX7SdkRegistryValues&#34;</span><span class="p">,</span> <span class="s2">&#34;Set-AX7SdkEnvironmentVariables&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Set</span><span class="p">\</span><span class="n">-AX7SdkEnvironmentVariables</span> <span class="p">\</span><span class="n">-DynamicsSDK</span> <span class="s2">&#34;C:\\DynamicsSDK&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Set</span><span class="p">\</span><span class="n">-AX7SdkRegistryValues</span> <span class="p">\</span><span class="n">-DynamicsSDK</span> <span class="s2">&#34;c:\\DynamicsSDK&#34;</span> <span class="p">\</span><span class="n">-TeamFoundationServerUrl</span> <span class="s2">&#34;https://dev.azure.com/YOUR\_ORG&#34;</span> <span class="p">\</span><span class="n">-AosWebsiteName</span> <span class="nv">$AosWebsiteName</span> <span class="s2">&#34;AosService&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The first one will load the functions and make them available in the command-line and the other two create the registry entries and environment variables.</p>
<p>Now we need to <strong>add an artifact for the Azure DevOps agent service</strong>. This will configure the agent service on the VM each time the VM is deployed. Search for “Azure Pipelines Agent” and click it. You will see this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTest1-311x1024.png" title="DevTest Labs Azure DevOps Agent" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTest1-311x1024.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 8</h2><p>DevTest Labs Azure DevOps Agent</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 8</figcaption>
    </figure></p>
<p>DevTest Labs Azure DevOps Agent</p>
<p>We need to fill some information:</p>
<p>On “<strong>Azure DevOps Organization Name</strong>” you need to provide the name of your organization. For example if your AZDO URL is <a href="https://dev.azure.com/blackbeltcorp" target="_blank" rel="noopener noreferrer">https://dev.azure.com/blackbeltcorp</a> you need to use blackbeltcorp.</p>
<p>On “<strong>AZDO Personal Access Token</strong>” you need to provide a token generated from AZDO.</p>
<p>On “<strong>Agent Name</strong>” give your agent a name, like DevTestAgent. And on “Agent Pool” a name for your pool, a new like DevTestPool or an existing one as Default.</p>
<p>On “<strong>Account Name</strong>” use the same user that we’ll use in our pipeline later. Remember this. And on “<strong>Account Password</strong>” its password. Using secrets with a KeyVault is better, but I won’t explain this here.</p>
<p>And, finally, set “<strong>Replace Agent</strong>” to true.</p>
<h3 id="53-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnooption-b-configure-azure-devops-agent-in-the-vmoption-b-configure-azure-devops-agent-in-the-vm">5.3. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#option-b-configure-azure-devops-agent-in-the-vm" target="_blank" rel="noopener noreferrer"></a>Option B: Configure Azure DevOps Agent in the VM</h3>
<p>To do this you have to create a VM from the base image you created before and then go to C:\DynamicsSDK and run the SetupBuildAgent script with the needed parameters:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">SetupBuildAgent</span><span class="p">.</span><span class="n">ps1</span> <span class="p">\</span><span class="n">-VSO</span><span class="p">\</span><span class="n">_ProjectCollection</span> <span class="s2">&#34;https://dev.azure.com/YOUR\_ORG&#34;</span> <span class="p">\</span><span class="n">-ServiceAccountName</span> <span class="s2">&#34;myUser&#34;</span> <span class="p">\</span><span class="n">-ServiceAccountPassword</span> <span class="s2">&#34;mYPassword&#34;</span> <span class="p">\</span><span class="n">-AgentName</span> <span class="s2">&#34;DevTestAgent&#34;</span> <span class="p">\</span><span class="n">-AgentPoolName</span> <span class="s2">&#34;DevTestPool&#34;</span> <span class="p">\</span><span class="n">-VSOAccessToken</span> <span class="s2">&#34;YOUR\_VSTS\_TOKEN&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>WARNING</strong>: If you choose option B you must create a new base image from the VM where you’ve run the script. Then repeat the WinRM steps to generate the new ARM template which we’ll see next.</p>
<h3 id="54-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoarm-templatearm-template">5.4. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#arm-template" target="_blank" rel="noopener noreferrer"></a>ARM template</h3>
<p>Then go to the “Advanced Settings” tab and click the “<strong>View ARM template</strong>” button:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest6.png" title="Get the ARM template" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest6.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 9</h2><p>Get the ARM template</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 9</figcaption>
    </figure></p>
<p>Get the ARM template</p>
<p>This will display the ARM template to create the VM from our pipeline. It’s something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;$schema&#34;</span><span class="p">:</span> <span class="s">&#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;contentVersion&#34;</span><span class="p">:</span> <span class="s">&#34;1.0.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;newVMName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;aariste001&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;aristeinfo&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;size&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;Standard\_B4ms&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;userName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;myUser&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;password&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;securestring&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;\[\[\[VmPassword\]\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Configure\_WinRM\_hostName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;Public IP address&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_vstsAccount&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;ariste&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_vstsPassword&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;securestring&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_agentName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;DevTestAgent&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_agentNameSuffix&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_poolName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;DevTestPool&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_RunAsAutoLogon&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;bool&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="k">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_windowsLogonAccount&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;aariste&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_windowsLogonPassword&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;securestring&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_driveLetter&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;C&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_workDirectory&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s">&#34;DevTestAgent&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Azure\_Pipelines\_Agent\_replaceAgent&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;bool&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;variables&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labSubnetName&#34;</span><span class="p">:</span> <span class="s">&#34;\[concat(variables(&#39;labVirtualNetworkName&#39;), &#39;Subnet&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labVirtualNetworkId&#34;</span><span class="p">:</span> <span class="s">&#34;\[resourceId(&#39;Microsoft.DevTestLab/labs/virtualnetworks&#39;, parameters(&#39;labName&#39;), variables(&#39;labVirtualNetworkName&#39;))\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labVirtualNetworkName&#34;</span><span class="p">:</span> <span class="s">&#34;\[concat(&#39;Dtl&#39;, parameters(&#39;labName&#39;))\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;vmId&#34;</span><span class="p">:</span> <span class="s">&#34;\[resourceId (&#39;Microsoft.DevTestLab/labs/virtualmachines&#39;, parameters(&#39;labName&#39;), parameters(&#39;newVMName&#39;))\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;vmName&#34;</span><span class="p">:</span> <span class="s">&#34;\[concat(parameters(&#39;labName&#39;), &#39;/&#39;, parameters(&#39;newVMName&#39;))\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;resources&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s">&#34;2018-10-15-preview&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;Microsoft.DevTestLab/labs/virtualmachines&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;\[variables(&#39;vmName&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;location&#34;</span><span class="p">:</span> <span class="s">&#34;\[resourceGroup().location\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labVirtualNetworkId&#34;</span><span class="p">:</span> <span class="s">&#34;\[variables(&#39;labVirtualNetworkId&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;notes&#34;</span><span class="p">:</span> <span class="s">&#34;Dynamics365FnO10013AgentLessV2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;customImageId&#34;</span><span class="p">:</span> <span class="s">&#34;/subscriptions/6715778f-c852-453d-b6bb-907ac34f280f/resourcegroups/devtestlabs365/providers/microsoft.devtestlab/labs/devtestd365/customimages/dynamics365fno10013agentlessv2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;size&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;size&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;userName&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;userName&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;password&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;password&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;isAuthenticationWithSshKey&#34;</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;artifacts&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;artifactId&#34;</span><span class="p">:</span> <span class="s">&#34;\[resourceId(&#39;Microsoft.DevTestLab/labs/artifactSources/artifacts&#39;, parameters(&#39;labName&#39;), &#39;public repo&#39;, &#39;windows-winrm&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;parameters&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;hostName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Configure\_WinRM\_hostName&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;artifactId&#34;</span><span class="p">:</span> <span class="s">&#34;\[resourceId(&#39;Microsoft.DevTestLab/labs/artifactSources/artifacts&#39;, parameters(&#39;labName&#39;), &#39;public repo&#39;, &#39;windows-vsts-build-agent&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;parameters&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;vstsAccount&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_vstsAccount&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;vstsPassword&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_vstsPassword&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;agentName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_agentName&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;agentNameSuffix&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_agentNameSuffix&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;poolName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_poolName&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;RunAsAutoLogon&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_RunAsAutoLogon&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;windowsLogonAccount&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_windowsLogonAccount&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;windowsLogonPassword&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_windowsLogonPassword&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;driveLetter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_driveLetter&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;workDirectory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_workDirectory&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;replaceAgent&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_replaceAgent&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labSubnetName&#34;</span><span class="p">:</span> <span class="s">&#34;\[variables(&#39;labSubnetName&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;disallowPublicIpAddress&#34;</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;storageType&#34;</span><span class="p">:</span> <span class="s">&#34;Premium&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;allowClaim&#34;</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;networkInterface&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;sharedPublicIpAddressConfiguration&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;inboundNatRules&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;transportProtocol&#34;</span><span class="p">:</span> <span class="s">&#34;tcp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;backendPort&#34;</span><span class="p">:</span> <span class="m">3389</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;outputs&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;labVMId&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;type&#34;</span><span class="p">:</span> <span class="s">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;value&#34;</span><span class="p">:</span> <span class="s">&#34;\[variables(&#39;vmId&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>NOTE</strong>: if you’re using option B you won’t have the artifact node for the VSTS agent.</p>
<p>This JSON file will be used as the base to create our VMs from the Azure DevOps pipeline. This is known as <a href="https://docs.microsoft.com/en-us/azure/devops/learn/what-is-infrastructure-as-code?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Infrastructure as Code</a> (IaC) and it’s a way of defining our infrastructure in a file as it were code. It’s another part of the DevOps practice that should solve the “it works on my machine” issue.</p>
<p>If we take a look to the JSON’s parameters node there’s the following information:</p>
<ul>
<li>newVMName and labName will be the name of the VM and the DevTest Labs lab we’re using. The VM name is not really important because we’ll set the name later in the pipeline.</li>
<li>size is the VM size, a D3 V2 in the example above, but we can change it and will do it later.</li>
<li>userName &amp; passWord will be the credentials to access the VM and must be the same we’ve used to configure the Azure DevOps agent.</li>
<li>Configure_WinRM_hostName is the artifact we added to the VM template that will allow the pipelines to run in this machine.</li>
</ul>
<p>To do it faster and for demo purposes I’m using a plain text password in the ARM template, changing the password node to something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;password&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;yourPassword&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span><span class="err">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I will do the same with all the <em>secureString</em> nodes, but you shouldn’t and should instead use an Azure KeyVault which comes with the DevTest Labs account.</p>
<p>Of course <strong>you would never upload this template to Azure DevOps with a password in plain text</strong>. There’s plenty of resources online that teach how to use parameters, Azure KeyVault, etc. to accomplish this, for example this one: <a href="https://devkimchi.com/2019/04/24/6-ways-passing-secrets-to-arm-templates/" target="_blank" rel="noopener noreferrer">6 Ways Passing Secrets to ARM Templates</a>.</p>
<p>OK, now grab that file and save it to your Azure DevOps repo. I’ve created a folder in my repo’s root called ARM where I’m saving all the ARM templates:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs2.png" title="ARM templates on Azure DevOps" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs2.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 10</h2><p>ARM templates on Azure DevOps</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 10</figcaption>
    </figure></p>
<p>ARM templates on Azure DevOps</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnopreparing-the-vmpreparing-the-vm"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#preparing-the-vm" target="_blank" rel="noopener noreferrer"></a>Preparing the VM</h2>
<p>The VHD image you download can be used as a developer VM with no additional work, just run Visual Studio, connect it to your AZDO project and done. But if you want to use it as a build box you need to do several things first.</p>
<p>Remember that the default user and password for these VHDs are Administrator and Pass@word1.</p>
<h3 id="61-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnodisable-servicesdisable-services">6.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#disable-services" target="_blank" rel="noopener noreferrer"></a>Disable services</h3>
<p>First of all we will stop and disable services like the Batch, Management Reporter, SSAS, SSIS, etc. Anything you see that’s not needed to run a build.</p>
<h3 id="62-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocreate-a-new-sql-usercreate-a-new-sql-user">6.2. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#create-a-new-sql-user" target="_blank" rel="noopener noreferrer"></a>Create a new SQL user</h3>
<p>Open <a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15&amp;WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">SSMS</a> (as an Administrator) and create a new SQL user as a copy of the axdbadmin one. Then open the web.config file and update the DB user and password to use the one you’ve just created.</p>
<h3 id="63-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoprepare-ssrs-optionalprepare-ssrs-optional">6.3. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#prepare-ssrs-optional" target="_blank" rel="noopener noreferrer"></a>Prepare SSRS (optional)</h3>
<p>If you want to deploy reports as part of your build pipeline you need to go to SSMS again (and as an Admin again), and open a new query in the reporting DB to execute the following query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">exec</span><span class="w"> </span><span class="n">DeleteEncryptedContent</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="64-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnopowershell-scriptspowershell-scripts">6.4. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#powershell-scripts" target="_blank" rel="noopener noreferrer"></a>PowerShell Scripts</h3>
<p>The default build definition that runs on a build VM uses several PowerShell scripts to run some tasks. I’m adding an additional script called PrepareForAgent.</p>
<p>The scripts can be found in the C:\DynamicsSDK folder of the VM.</p>
<h4 id="641-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoprepareforbuildprepareforbuild">6.4.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#prepareforbuild" target="_blank" rel="noopener noreferrer"></a>PrepareForBuild</h4>
<p>This script comes with the VM and <strong>we need to modify it</strong> to avoid one thing: the PackagesLocalDirectory backup which is usually done in the first build. We need to get rid of this or we’ll waste around an hour per run until the files are copied.</p>
<p>We don’t need this because our VM will be new each time we run the pipeline!</p>
<p>So open the script, go to line 696 and look for this piece of code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">\</span><span class="c"># Create packages backup (if it does not exist).</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$NewBackupCreated</span> <span class="p">\=</span> <span class="nb">Backup-AX7Packages</span> <span class="p">\</span><span class="n">-BackupPath</span> <span class="nv">$PackagesBackupPath</span> <span class="p">\</span><span class="n">-DeploymentPackagesPath</span> <span class="nv">$DeploymentPackagesPath</span> <span class="p">\</span><span class="n">-LogLocation</span> <span class="nv">$LogLocation</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">\</span><span class="c"># Restore packages backup (unless a new backup was just created).</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(!</span><span class="nv">$NewBackupCreated</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nb">Restore-AX7Packages</span> <span class="p">\</span><span class="n">-BackupPath</span> <span class="nv">$PackagesBackupPath</span> <span class="p">\</span><span class="n">-DeploymentPackagesPath</span> <span class="nv">$DeploymentPackagesPath</span> <span class="p">\</span><span class="n">-LogLocation</span> <span class="nv">$LogLocation</span> <span class="p">\</span><span class="n">-RestoreAllFiles</span><span class="err">:</span><span class="nv">$RestorePackagesAllFiles</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(!</span><span class="nv">$DatabaseBackupToRestore</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nv">$DatabaseBackupPath</span> <span class="p">\=</span> <span class="nb">Get-BackupPath</span> <span class="p">\</span><span class="n">-Purpose</span> <span class="s2">&#34;Databases&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nb">Backup-AX7Database</span> <span class="p">\</span><span class="n">-BackupPath</span> <span class="nv">$DatabaseBackupPath</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">\</span><span class="c"># Restore a database backup (if specified).</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nb">Restore-AX7Database</span> <span class="p">\</span><span class="n">-DatabaseBackupToRestore</span> <span class="nv">$DatabaseBackupToRestore</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We need to modify it until we end up with this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$DatabaseBackupToRestore</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nb">Restore-AX7Database</span> <span class="p">\</span><span class="n">-DatabaseBackupToRestore</span> <span class="nv">$DatabaseBackupToRestore</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We just need the DB restore part and skip the backup, otherwise we’ll be losing 45 minutes in each run for something we don’t need because the VM will be deleted when the build is completed.</p>
<h3 id="65-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnooptional-but-recommended-install-d365fo-toolsoptional-but-recommended-install-d365fotoolshttpsgithubcomd365collaboratived365fotools">6.5. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#optional-but-recommended-install-d365fo-tools" target="_blank" rel="noopener noreferrer"></a><strong>Optional (but recommended)</strong>: install <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a></h3>
<p>Just run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="p">\</span><span class="n">-Name</span> <span class="n">d365fo</span><span class="p">.</span><span class="n">tools</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We can use the tools to do a module sync, partial sync or deploy just our reports instead of all.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocreate-a-new-imagecreate-a-new-image"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#create-a-new-image" target="_blank" rel="noopener noreferrer"></a>Create a new image</h2>
<p>Once we’ve done all these prepare steps we can log out of this VM and stop it. <strong>Do not delete it yet!</strong> Go to “Create custom image”, give the new image a name, select “I have not generalized this virtual machine” and click the “OK” button.</p>
<p>This will generate a new image that you can use as a base image with all the changes you’ve done to the original VHD.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoazure-devops-pipelinesazure-devops-pipelines"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#azure-devops-pipelines" target="_blank" rel="noopener noreferrer"></a>Azure DevOps Pipelines</h2>
<p>We’re ready to setup our new build pipeline in Azure DevOps. This pipeline will consist of three steps: create a new VM, run all the build steps, and delete the VM:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs4.png" title="Azure DevTest Labs powered builds for Dynamics 365 FnO 1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs4.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 11</h2><p>Azure DevTest Labs powered builds for Dynamics 365 FnO 1</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 11</figcaption>
    </figure></p>
<p>First of all check that your pipeline runs on Azure pipelines (aka Azure-hosted):</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-2.png" title="DevTest Labs Azure Pipelines" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-2.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 12</h2><p>DevTest Labs Azure Pipelines</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 12</figcaption>
    </figure></p>
<p>DevTest Labs Azure Pipelines</p>
<p>The create and delete steps will run on the Azure Pipelines pool. The build step will run on our DevTestLabs pool, or the name you gave it when configuring the artifact on DevTest Labs or the script on the VM.</p>
<h3 id="81-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocreate-azure-devtest-labs-vmcreate-azure-devtest-labs-vm">8.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#create-azure-devtest-labs-vm" target="_blank" rel="noopener noreferrer"></a>Create Azure DevTest Labs VM</h3>
<p>Create a new pipeline and choose the “Use the classic editor” option. Make sure you’ve selected TFVC as your source and click “Continue” and “Empty job”. Add a new task to the pipeline, look for “Azure DevTest Labs Create VM”. We just need to fill in the missing parameters with our subscription, lab, etc.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs5.png" title="Create VM Azure DevTest Labs" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs5.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 13</h2><p>Create VM Azure DevTest Labs</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 13</figcaption>
    </figure></p>
<p>Create VM Azure DevTest Labs</p>
<p>Remember this step must run on the Azure-hosted pipeline.</p>
<h3 id="82-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnobuildbuild">8.2. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#build" target="_blank" rel="noopener noreferrer"></a>Build</h3>
<p>This is an easy one. Just export a working pipeline and import it. And this step needs to run on your self-hosted pool:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-3.png" title="Runs on self-hosted pool" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-3.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 14</h2><p>Runs on self-hosted pool</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 14</figcaption>
    </figure></p>
<p>Runs on self-hosted pool</p>
<h4 id="821-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnooptional-use-selectivesync-not-recommended-see-next-optionoptional-use-selectivesync-not-recommended-see-next-option">8.2.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#optional-use-selectivesync-not-recommended-see-next-option" target="_blank" rel="noopener noreferrer"></a>Optional: use SelectiveSync (not recommended, see next option)</h4>
<p>You can replace the Database Sync task for a PowerShell script that will only sync the tables in your models:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-9.png" title="SelectiveSync.ps1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-9.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 15</h2><p>SelectiveSync.ps1</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 15</figcaption>
    </figure></p>
<p>SelectiveSync.ps1</p>
<p>Thanks Joris for the tip!</p>
<h4 id="822-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnooptional-use-d365fo-tools-to-sync-your-packages-modelsoptional-use-d365fotools-to-sync-your-packagesmodels">8.2.2. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#optional-use-d365fo-tools-to-sync-your-packages-models" target="_blank" rel="noopener noreferrer"></a>Optional: use d365fo.tools to sync your packages/models</h4>
<p>This is a better option than the SelectiveSync above. You can synchronize your packages or models only to gain some time. This cmdlet uses sync.exe like Visual Studio does and should be better than SelectiveSync.</p>
<p>Add a new PowerShell task, select Inline Script and this is the command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Invoke-D365DbSyncModule</span> <span class="p">\</span><span class="n">-Module</span> <span class="s2">&#34;Module1&#34;</span><span class="p">,</span> <span class="s2">&#34;Module2&#34;</span> <span class="p">\</span><span class="n">-ShowOriginalProgress</span> <span class="p">\</span><span class="n">-Verbose</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="823-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnooptional-use-d365fo-tools-to-deploy-ssrs-reportsoptional-use-d365fotools-to-deploy-ssrs-reports">8.2.3. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#optional-use-d365fo-tools-to-deploy-ssrs-reports" target="_blank" rel="noopener noreferrer"></a>Optional: use d365fo.tools to deploy SSRS reports</h4>
<p>If you really want to add the report deployment step to your pipeline you can save some more extra time using <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a> and just deploy the reports in your models like we’ve done with the DB sync.</p>
<p>Run this in a new PowerShell task to do it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Publish-D365SsrsReport</span> <span class="p">\</span><span class="n">-Module</span> <span class="n">YOUR</span><span class="p">\</span><span class="n">_MODULE</span> <span class="p">\</span><span class="n">-ReportName</span> <span class="p">\*</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="83-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnodelete-azure-devtest-labs-vmdelete-azure-devtest-labs-vm">8.3. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#delete-azure-devtest-labs-vm" target="_blank" rel="noopener noreferrer"></a>Delete Azure DevTest Labs VM</h3>
<p>It’s almost the same as the create step, complete the subscription, lab and VM fields and done:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image.png" title="Delete VM" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 16</h2><p>Delete VM</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 16</figcaption>
    </figure></p>
<p>Delete VM</p>
<p>And this step, like the create one, will run on the Azure-hosted agent.</p>
<h3 id="84-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnodependencies-and-conditionsdependencies-and-conditions">8.4. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#dependencies-and-conditions" target="_blank" rel="noopener noreferrer"></a>Dependencies and conditions</h3>
<p>When all three steps are configured we need to add dependencies and conditions to some of them. For example, to make sure that the delete VM step runs when the build step fails, but it doesn’t when the create VM step fails.</p>
<h4 id="841-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnobuildbuild">8.4.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#build" target="_blank" rel="noopener noreferrer"></a>Build</h4>
<p>The build step depends on the create VM step, and will only run if the previous step succeeds:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-4.png" title="Build step dependencies and conditions" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-4.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 17</h2><p>Build step dependencies and conditions</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 17</figcaption>
    </figure></p>
<p>Build step dependencies and conditions</p>
<h4 id="842-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnodelete-vmdelete-vm">8.4.2. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#delete-vm" target="_blank" rel="noopener noreferrer"></a>Delete VM</h4>
<p>The delete step depends on all previous steps and must run when the create VM step succeeds. If the create step fails there’s no VM and we don’t need to delete it:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-5.png" title="Dependencies and conditions on delete VM step" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-5.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 18</h2><p>Dependencies and conditions on delete VM step</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 18</figcaption>
    </figure></p>
<p>Dependencies and conditions on delete VM step</p>
<p>This is the custom condition we’ll use:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">and(always(), eq(dependencies.Job\_1.status, &#39;Succeeded&#39;))
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you need to know your first step’s job name just export the pipeline to YAML and you’ll find it there:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-6.png" title="Export pipeline to YAML" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-6.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 19</h2><p>Export pipeline to YAML</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 19</figcaption>
    </figure></p>
<p>Export pipeline to YAML</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-7.png" title="Job name on YAML" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-7.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 20</h2><p>Job name on YAML</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 20</figcaption>
    </figure></p>
<p>Job name on YAML</p>
<p>If this step fails when the pipeline is run, wait to delete the VM manually, first change the VM name in the delete step, save your pipeline and then use the dropdown to show the VMs in the selected subscription, and save the pipeline.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnorun-the-buildrun-the-build"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#run-the-build" target="_blank" rel="noopener noreferrer"></a>Run the build</h2>
<p>And, I think, we’re done and ready to run our Azure DevTest Labs pipeline for Dynamics 365 Finance and Operations… click “Run pipeline” and wait…</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-10-382x1024.png" title="Azure DevTest Labs powered builds for Dynamics 365 FnO 2" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-10-382x1024.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 21</h2><p>Azure DevTest Labs powered builds for Dynamics 365 FnO 2</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 21</figcaption>
    </figure></p>
<p>Tadaaaa!!</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnotimestimes"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#times" target="_blank" rel="noopener noreferrer"></a>Times</h2>
<p>The pipeline from the image above is one with real code from a customer but I can’t compare the times with the Azure-hosted builds because there’s no sync, or tests there. Regarding the build time the Azure-hosted takes one minute less, but it needs to install the nugets first.</p>
<p>But for example this is a comparison I did:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/B2msVSB4ms.png" title="Azure DevTest Labs B2ms vs B4ms" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/B2msVSB4ms.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 22</h2><p>Azure DevTest Labs B2ms vs B4ms</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 22</figcaption>
    </figure></p>
<p>Azure DevTest Labs B2ms vs B4ms</p>
<p>It takes around 1 hour to create the VM, build, do a full DB synch, deploy reports, run tests, generate a Deployable Package and, finally, delete the VM:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/Full.jpg" title="Azure DevTest Labs powered builds for Dynamics 365 FnO 3" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/Full.jpg" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 23</h2><p>Azure DevTest Labs powered builds for Dynamics 365 FnO 3</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 23</figcaption>
    </figure></p>
<p>If you skip deploying the SSRS reports your build will run in 15 minutes less, that’s around 45 minutes.</p>
<p>If you use the partial sync process instead of a full DB sync it’ll be 5-7 minutes less.</p>
<p>This would leave us with a 35-40 minutes build.</p>
<h3 id="101-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocomparison-1comparison-1">10.1. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#comparison-1" target="_blank" rel="noopener noreferrer"></a>Comparison 1</h3>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp1.png" title="Azure DevTest Labs powered builds for Dynamics 365 FnO 4" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp1.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 24</h2><p>Azure DevTest Labs powered builds for Dynamics 365 FnO 4</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 24</figcaption>
    </figure></p>
<p>No DB Sync</p>
<p>The image above shows a simple package being compiled, without any table, so the selective sync goes really fast. The build times improve with VM size.</p>
<h3 id="102-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocomparison-2comparison-2">10.2. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#comparison-2" target="_blank" rel="noopener noreferrer"></a>Comparison 2</h3>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp2.png" title="Azure DevTest Labs powered builds for Dynamics 365 FnO 5" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp2.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 25</h2><p>Azure DevTest Labs powered builds for Dynamics 365 FnO 5</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 25</figcaption>
    </figure></p>
<p>Same code Full DB Sync</p>
<p>This one is compiling the same codebase but is doing a full DB sync. The sync time improves in the B4ms VM compared to the B2ms but it’s almost the same in the B8ms. Build times are better for larger VM sizes.</p>
<h3 id="103-httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnocomparison-3comparison-3">10.3. <a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#comparison-3" target="_blank" rel="noopener noreferrer"></a>Comparison 3</h3>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-14.png" title="Azure DevTest Labs powered builds for Dynamics 365 FnO 6" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-14.png" data-sub-html="<h2>Azure DevTest Labs powered builds for Dynamics 365 FnO 26</h2><p>Azure DevTest Labs powered builds for Dynamics 365 FnO 6</p>">
        
    </a><figcaption class="image-caption">Azure DevTest Labs powered builds for Dynamics 365 FnO 26</figcaption>
    </figure></p>
<p>Real code + full sync</p>
<p>And in the image above we see a more realistic build. The codebase is larger and we’re doing a full DB sync.</p>
<p>Similar as the comparison before there a good enhancement between a B2ms and a B4ms, but not between a B4ms and B8ms.</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnoshow-me-the-moneyshow-me-the-money"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#show-me-the-money" target="_blank" rel="noopener noreferrer"></a>Show me the money!</h2>
<p>I think this is the interesting comparison. How did a Tier-1 MS-hosted build VM cost? Around 400€? How does it compare to using the Azure DevTest Labs alternative?</p>
<p>There’s only one fix cost when using Azure DevTest Labs: the blob storage where the VHD is uploaded. The VHD’s size is around 130GB and this should have a cost of, more or less, 5 euros/month. Keep in mind that <strong>you need to clean up your custom images when yours is prepared</strong>, the new ones are created as snapshots and also take space in the storage account.</p>
<p>Then we have the variable costs that come with the deployment of a VM each build but it’s just <strong>absurd</strong>. Imagine we’re using a B4ms VM, with a 256GB Premium SSD disk, we would pay 0.18€/hour for the VM plus the proportional part of 35.26€/month of the SSD disk, which would be like 5 cents/hour?</p>
<p>But this can run on a B2ms VM too which is half the compute price of the VM, down to 9 cents per hour.</p>
<p>If we run this build once a day each month, 30 times, the cost of a B4ms would be like… 7€? Add the blob storage and we’ll be paying <strong>12€ per month to run our builds with DB sync and tests</strong>.</p>
<p>Is it cheaper than deploying a cloud-hosted environment, and starting and stopping it using <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">the new d365fo.tools Cmdlets</a> each time we run the build? <strong>Yes it is!</strong> Because if we deploy a CHE we’ll be paying the price of the SSD disk for the whole month!</p>
<h2 id="httpsaristeinfoen202102azure-devtest-labs-build-dynamics-365-fnosome-final-remarkssome-final-remarks"><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#some-final-remarks" target="_blank" rel="noopener noreferrer"></a>Some final remarks</h2>
<ol>
<li>I have accomplished this <strong>mostly through trial-and-error</strong>. There’s lots of enhancements and best practices to be applied to all the process, specially using an <a href="https://docs.microsoft.com/en-us/azure/key-vault/general/overview?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure Key Vault</a> to store all the secrets to be used in the Azure DevOps Agent artifact and the pipeline.</li>
<li>This in another clear example that <a href="https://ariste.info/en/2019/07/do-you-want-to-become-a-better-x-developer/" target="_blank" rel="noopener noreferrer">X++ developers need to step outside of X++</a> and Dynamics 365 FnO. We’re not X++ only developers anymore, we’re very lucky to be working on a product that is using Azure.</li>
<li>I’m sure there’s scenarios where using DevTest Labs to create a build VM is useful. Maybe not for an implementation partner, but maybe it is for an ISV partner. It’s just an additional option.</li>
<li>The only bad thing to me is that we need to apply the version upgrades manually to the VHDs because they’re published only twice a year.</li>
<li>As I said at the beginning of the post, it may have worked to me with all these steps, but if you try you maybe need to change some things. But it’s a good way to start.</li>
</ol>
]]></description>
</item><item>
    <title>Develop custom Data Entities for Dual-write</title>
    <link>https://nuxulu.com/news/2100-01-01-develop-custom-data-entities-for-dual-write/</link>
    <pubDate>Sun, 02 May 2021 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><guid>https://nuxulu.com/news/2100-01-01-develop-custom-data-entities-for-dual-write/</guid>
    <description><![CDATA[<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/dual-write-home-page?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Dual-write</a> has been around for almost two years now. It’s one of the ways of <strong>integrating Dynamics 365 Finance and Operations and <a href="https://docs.microsoft.com/en-us/powerapps/maker/data-platform?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Dataverse</a></strong> along with <a href="https://ariste.info/en/2020/09/dynamics-365-odata-cds-virtual-entities/" target="_blank" rel="noopener noreferrer">Virtual Entities</a>.</p>
<p>The standard solution comes with many <strong>out-of-the-box entities</strong> available to synchronize. This has been one of the great improvements since Dual-write was made available in preview, when <a href="https://jatomas.com/" target="_blank" rel="noopener noreferrer">Juanan</a> and I <a href="https://www.youtube.com/watch?v=z_dLGDF7Ci0" target="_blank" rel="noopener noreferrer">demoed it in the 2019 Dynamics Saturday in Madrid</a>.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW-1024x1024.png" title="Dual write" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW-1024x1024.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 1</h2><p>Dual write</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 1</figcaption>
    </figure></p>
<p>This is how Dual write really works</p>
<p>But what if we need to develop a <strong>new custom Data Entity in MSDyn365FO</strong> and use it in Dual-write? It’s easy but there’s some things we need to remember when doing it.</p>
<h2 id="httpsaristeinfoen202103develop-custom-data-entities-dual-writedual-writedual-write"><a href="https://ariste.info/en/2021/03/develop-custom-data-entities-dual-write/#dual-write" target="_blank" rel="noopener noreferrer"></a>Dual-write</h2>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/dual-write-home-page?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Dual-write</a> is a bidirectional integration that will synchronously write in Dataverse when data is created, updated or deleted in MSDyn365FO in near-real-time. On the Finance and Operations side it uses data entities to export data to Dataverse.</p>
<p>Right now there’s a set of several OOB entities that come ready to be synchronized, and thanks to <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/initial-sync-guidance?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Initial Sync</a> we can populate data in Dataverse choosing FnO as the source when starting the sync, or also choose Dataverse as the source.</p>
<p>If you want to learn more about Dual-write you can:</p>
<ul>
<li>Read <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/dual-write-home-page?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">the docs</a> which have plenty of information. <strong>Read the docs</strong>. Always.</li>
<li><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/connection-setup?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Guidance for Dual-Write setup</a></li>
<li><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/requirements-and-prerequisites?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">System requirements and prerequisites</a></li>
<li>Watch some of <a href="https://daxture.blogspot.com/" target="_blank" rel="noopener noreferrer">Faisal Fareed</a>‘s sessions about Dual-write: <a href="https://dynamicscon.com/" target="_blank" rel="noopener noreferrer">DynamicsCon</a> 2020: <a href="https://www.youtube.com/watch?v=DbyLLQswM5o" target="_blank" rel="noopener noreferrer">The Power of Dual-write</a> or Scottish Summit 2021: <a href="https://www.youtube.com/watch?v=O2iuM6dWklI" target="_blank" rel="noopener noreferrer">D365 FO integration with Dataverse – Dual write, Virtual Entities, OR Data Integrator</a>. He’s got some more which you can find on Youtube.</li>
</ul>
<h2 id="httpsaristeinfoen202103develop-custom-data-entities-dual-writecreate-the-data-entitycreate-the-data-entity"><a href="https://ariste.info/en/2021/03/develop-custom-data-entities-dual-write/#create-the-data-entity" target="_blank" rel="noopener noreferrer"></a>Create the Data-entity</h2>
<p>In Visual Studio we need to create the entity from our table. I’ve created a new table called AASBookTable with just four fields: BookId, Author, Name and ISBN. Its primary key is the BookId field which is also its <strong>alternate key</strong> and will be used as natural key in the entity.</p>
<p>Next, we create the data entity and make sure we’re marking the “<strong>Enable data management capabilities</strong>” checkbox:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW1.png" title="Dynamics 365 Finance and Operations Data entity wizard" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW1.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 2</h2><p>Dynamics 365 Finance and Operations Data entity wizard</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 2</figcaption>
    </figure></p>
<p>Enable data management capabilities must be checked</p>
<p>If the entity doesn’t have data management enabled it won’t be displayed in the list in the Dual-write tables setup.</p>
<h2 id="httpsaristeinfoen202103develop-custom-data-entities-dual-writecreate-a-table-in-dataversecreate-a-table-in-dataverse"><a href="https://ariste.info/en/2021/03/develop-custom-data-entities-dual-write/#create-a-table-in-dataverse" target="_blank" rel="noopener noreferrer"></a>Create a table in Dataverse</h2>
<p>Now we need to create a table in our Dataverse environment. This table must have at least some of the fields we want to synchronize to Dataverse <strong>AND</strong> a company field. <strong>The <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/company-data?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">company</a> concept doesn’t exist in Dataverse/CRM</strong> but thanks to the OOB mappings and <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/initial-sync-guidance?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Initial Sync</a> we can solve this with just a few clicks and will have a company table in Dataverse with all our FnO legal entities.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW2.png" title="Company field related to table company" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW2.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 3</h2><p>Company field related to table company</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 3</figcaption>
    </figure></p>
<p>Company field related to table company</p>
<p>Following my example I’ve created a table with the same four fields and a company field with the <strong>data type Lookup</strong> and its related table Company, where the FnO legal entities are synchronized.</p>
<p>As I said, if we don’t create this field we won-t be able to setup Dual-write for this table.</p>
<h2 id="httpsaristeinfoen202103develop-custom-data-entities-dual-writecreate-table-mapcreate-table-map"><a href="https://ariste.info/en/2021/03/develop-custom-data-entities-dual-write/#create-table-map" target="_blank" rel="noopener noreferrer"></a>Create table map</h2>
<p>Our table and data entity are ready, and now <strong>we need to <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/enable-entity-map?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">create a mapping</a> between them</strong> in the Dual-write workspace in FnO. Click the “Add table map” button:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW3.png" title="Dynamics 365 Dual-write add table map" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW3.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 4</h2><p>Dynamics 365 Dual-write add table map</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 4</figcaption>
    </figure></p>
<p>Dynamics 365 Dual-write add table map</p>
<p>A new dialog will open and we need to select the FnO entity and the Dataverse table:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW4-edited.png" title="Entity map" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW4-edited.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 5</h2><p>Entity map</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 5</figcaption>
    </figure></p>
<p>Entity map</p>
<p>Select the entity and table we’ve created and click save. Then we can define the field mapping:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW13-1024x629.png" title="Dynamics 365 Dual-write field maps" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW13-1024x629.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 6</h2><p>Dynamics 365 Dual-write field maps</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 6</figcaption>
    </figure></p>
<p>Dynamics 365 Dual-write field maps</p>
<p>Because I’ve created both it’s clear what to map. And after doing this we can click save and it’s done, right? No! <strong>WRONG</strong>! If we do just this we’ll get an error, this error:</p>
<blockquote>
<p>Project validation failed. SourceEntitySchema: Books has a primaryCompanyField set to DataAreaId and DestinationEntitySchema: cr008_bookses doesn’t have primary company field set. Dual-write only supports mapping between cross-company entities or company-specific entities from both sides..keys are missing for either AX or CRM.keys are missing for either CRM or AX</p>
</blockquote>
<p>Or we can also get an error regarding a missing integration key for the company field. In the end both are caused because <strong>we’ve missed defining the integration key</strong> for this new Dataverse table:</p>
<h2 id="httpsaristeinfoen202103develop-custom-data-entities-dual-writeintegration-keyintegration-key"><a href="https://ariste.info/en/2021/03/develop-custom-data-entities-dual-write/#integration-key" target="_blank" rel="noopener noreferrer"></a>Integration key</h2>
<p>Go back to the main Dual-write form and click on the “Integration key” button:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW7.png" title="Dual/write integration key" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW7.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 7</h2><p>Dual/write integration key</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 7</figcaption>
    </figure></p>
<p>Dual-write integration key</p>
<p>The integration key will be <strong>the same as the FnO data entity key, plus the company</strong> if your data entity has a company context. Remember that when we create indexes in FnO the DataAreaId field isn’t included in the field, but it is in the SQL Server index along the partition field.</p>
<p>The integration key for our custom Dual-write mapping will look like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW11.png" title="Dual/write integration key" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW11.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 8</h2><p>Dual/write integration key</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 8</figcaption>
    </figure></p>
<p>Dual/write integration key</p>
<p>Remember we’ve added the company field to our Dataverse table? You can see in the image above that the field includes the relation to the Company table in Dataverse. We won’t be able to save the field mapping if we create the key using our Dataverse table’s company field instead of its Company table relation, like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW9.png" title="Dual/write integration key" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW9.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 9</h2><p>Dual/write integration key</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 9</figcaption>
    </figure></p>
<p>Dual/write integration key</p>
<p>See the difference? In the first image the field reads <em>c008_company.cdm_companycode</em> while in the second one it’s <em>c008_company</em>. If we set the integration key using the field in our table instead of the related table and save the fields’ mapping we’ll get an error saying the company is missing in the key because it’s expecting the relation!</p>
<h2 id="httpsaristeinfoen202103develop-custom-data-entities-dual-writeactionaction"><a href="https://ariste.info/en/2021/03/develop-custom-data-entities-dual-write/#action" target="_blank" rel="noopener noreferrer"></a>Action!</h2>
<p>The table and field mappings are ready, just click run and go create a new book in the FnO form:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW14.png" title="Finance and Operations form" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW14.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 10</h2><p>Finance and Operations form</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 10</figcaption>
    </figure></p>
<p>Finance and Operations form</p>
<p>Then we go to our Dataverse table and check its data…</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW15.png" title="Dataverse table data" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW15.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 11</h2><p>Dataverse table data</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 11</figcaption>
    </figure></p>
<p>Dataverse table data</p>
<p>It’s there! And of course it’s working in both directions. If I create a record in Dataverse it’ll be created in FnO too. I’ll use the Excel add-in to add a new book:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW16.png" title="Dataverse Excel add-in" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW16.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 12</h2><p>Dataverse Excel add-in</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 12</figcaption>
    </figure></p>
<p>Dataverse Excel add-in</p>
<p>And after refreshing the form in FnO we can see it there too:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/03/DW17.png" title="Develop custom Data Entities for Dual-write 1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/03/DW17.png" data-sub-html="<h2>Develop custom Data Entities for Dual-write 13</h2><p>Develop custom Data Entities for Dual-write 1</p>">
        
    </a><figcaption class="image-caption">Develop custom Data Entities for Dual-write 13</figcaption>
    </figure></p>
<p>This is a really simple example of how we can create a custom table, use it in a data entity and then use this entity in our dual-write setup. It’s something that can be easily done but we need to <strong>remember the “company thing”</strong>, otherwise this will never work!</p>
<p>Dual-write is even easier to configure nowadays thanks to <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/dual-write/lcs-setup?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">LCS allowing us to create and link a new Dataverse environment when we deploy a new Finance and Operations environment</a>.</p>
]]></description>
</item><item>
    <title>Dynamics 365 for Finance Operations and Azure DevOps</title>
    <link>https://nuxulu.com/news/2100-01-01-dynamics-365-for-finance--operations-and-azure-devops/</link>
    <pubDate>Sat, 01 May 2021 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><guid>https://nuxulu.com/news/2100-01-01-dynamics-365-for-finance--operations-and-azure-devops/</guid>
    <description><![CDATA[<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almdynamics-365-for-finance-operations-and-azure-devopsdynamics-365-for-finance--operations-and-azure-devops"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#dynamics-365-for-finance-operations-and-azure-devops" target="_blank" rel="noopener noreferrer"></a><strong>Dynamics 365 for Finance &amp; Operations and Azure DevOps</strong></h2>
<h3 id="011-httpsaristeinfoenmsdyn365-azure-devops-almazure-devopsazure-devops">0.1.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-devops" target="_blank" rel="noopener noreferrer"></a>Azure DevOps</h3>
<p><a href="https://dev.azure.com/" target="_blank" rel="noopener noreferrer">Azure DevOps</a> will be the service we will use for source control. Microsoft Dynamics 365 for Finance and Operations supports TFVC out of the box as its version-control system.</p>
<p>But Azure DevOps does not only offer a source control tool. Of course, developers will be the most benefited of using it, but from project management to the functional team and customers, everybody can be involved in using Azure DevOps. <a href="https://docs.microsoft.com/en-us/dynamics365/unified-operations/dev-itpro/lifecycle-services/bpm-overview?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">BPM</a> synchronization and task creation, team planning, source control, automated builds and <a href="https://ariste.info/en/2019/02/setting-up-release-pipeline-in-azure-devops-for-dynamics-365-for-finance-and-operations/" target="_blank" rel="noopener noreferrer">releases</a>, are some of the tools it offers. All these changes will need some learning from the team, but in the short-term all of this will help to better manage implementations.</p>
<p>As I said it looks like the technical team is the most affected by the addition of source control to Visual Studio, but it’s the most benefited too…</p>
<h3 id="012-httpsaristeinfoenmsdyn365-azure-devops-almfirst-stepsfirst-steps">0.1.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#first-steps" target="_blank" rel="noopener noreferrer"></a>First steps</h3>
<p>To use all the features described in this guide we need to create an Azure DevOps project and connect it to LCS. This will be the first step and it’s mandatory so let’s see how we have to do everything.</p>
<h4 id="0121-httpsaristeinfoenmsdyn365-azure-devops-almcreate-an-azure-devops-organizationcreate-an-azure-devops-organization">0.1.2.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-an-azure-devops-organization" target="_blank" rel="noopener noreferrer"></a>Create an Azure DevOps organization</h4>
<p>You might or might not have to do this. If you or your customer already have an account, you can use it and just create a new project in it. Otherwise head to <a href="https://dev.azure.com/" target="_blank" rel="noopener noreferrer">https://dev.azure.com</a> and create a new organization:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/AzureDevOpsSign.png.webp" title="Azure DevOps sign up" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/AzureDevOpsSign.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 2</h2><p>Azure DevOps sign up</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 2</figcaption>
    </figure></p>
<p>Azure DevOps sign up</p>
<p>After creating it you need to create a new project with the following options:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/ProjType.png.webp" title="Create Azure DevOps project" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/ProjType.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 3</h2><p>Create Azure DevOps project</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 3</figcaption>
    </figure></p>
<p>Create Azure DevOps project</p>
<p>Press the “Create project” button and you’re done. Now let’s connect this Azure DevOps project to our LCS project.</p>
<p>When a customer signs up for Finance and Operations the LCS project is of type “Implementation project” is created automatically. Your customers need to invite you to their project. If you’re an ISV you can use the “Migrate, create solutions, and learn” projects.</p>
<p>In any of both cases you need to go to “Project settings” and select the “Visual Studio Team Services” Tab. Scroll down and you should see two fields. Fill the field with your DevOps URL without the project part. If you got a <a href="https://dev.azure.com/YOUR" target="_blank" rel="noopener noreferrer">https://dev.azure.com/YOUR</a>_ORG URL type you need to change it to https://YOUR_ORG.visualstudio.com:</p>
<p><figure><a class="lightgallery" href="https://i0.wp.com/ariste.info/wp-content/uploads/2020/05/LCS1.png?fit=1024%2C462&amp;ssl=1" title="Azure DevOps setup on LCS" data-thumbnail="https://i0.wp.com/ariste.info/wp-content/uploads/2020/05/LCS1.png?fit=1024%2C462&amp;ssl=1" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 4</h2><p>Azure DevOps setup on LCS</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 4</figcaption>
    </figure></p>
<p>Azure DevOps setup on LCS</p>
<p>And to get the “Personal access token” we go back to our Azure DevOps project, click on the user settings icon, and then select “Personal access tokens”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-personal-token.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-personal-token.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 5</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 1</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 5</figcaption>
    </figure></p>
<p>We add a new token, set its expiration and give it full access. Finally press the “Create” button and a new dialog will appear with your token, copy it, and paste it in LCS.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-personal-token-2.png.webp" title="Azure DevOps personal token" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-personal-token-2.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 6</h2><p>Azure DevOps personal token</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 6</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-personal-token-3.png.webp" title="Azure DevOps personal token" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-personal-token-3.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 7</h2><p>Azure DevOps personal token</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 7</figcaption>
    </figure></p>
<p>Back to LCS, once you’ve pasted the token press the “Continue” button. On the next step just select your project, press “Continue” and finally “Save” on the last step.</p>
<p>If you have any problem you can take a look at the docs where everything is really well <a href="https://docs.microsoft.com/en-us/dynamics365/unified-operations/dev-itpro/lifecycle-services/support-experience?WT.mc_id=BA-MVP-5003976#configure-lcs" target="_blank" rel="noopener noreferrer">documented</a>.</p>
<h3 id="013-httpsaristeinfoenmsdyn365-azure-devops-almthe-build-serverthe-build-server">0.1.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#the-build-server" target="_blank" rel="noopener noreferrer"></a>The build server</h3>
<p>Once we’ve linked LCS and Azure DevOps we’ll have to deploy the <a href="https://ariste.info/en/2019/02/unresponsive-builds-in-azure-devops/" target="_blank" rel="noopener noreferrer">build server</a>. This will be the heart of our CI/CD processes.</p>
<p>Even though the build virtual machine has the same topology as a developer box, it really isn’t a developer VM and should never be used as one, do not use it as a developer VM! It has Visual Studio installed in it, the AosService folder with all the standard packages and SQL Server with an AxDB, just like all other developer machines, but that’s not its purpose.</p>
<p>We won’t be using any of those features. The “heart” of the build machine is the build agent, an application which Azure DevOps uses to execute the build definition’s tasks from Azure DevOps.</p>
<p>We can also use Azure hosted build agents. Azure hosted agents allow us to run a build without a VM, the pipeline runs on Azure. We’ll see this later.</p>
<h4 id="0131-httpsaristeinfoenmsdyn365-azure-devops-almthe-build-vmthe-build-vm">0.1.3.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#the-build-vm" target="_blank" rel="noopener noreferrer"></a>The build VM</h4>
<p>This VM is usually the dev box on Microsoft’s subscription but you can also use a regular cloud-hosted environment as a build VM.</p>
<p>When this VM is deployed there’s two things happening: the basic source code structure and the default build definition are created.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-source-control.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 2" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-source-control.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 8</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 2</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 8</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-default-build-pipeline.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 3" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Azure-DevOps-default-build-pipeline.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 9</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 3</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 9</figcaption>
    </figure></p>
<h3 id="014-httpsaristeinfoenmsdyn365-azure-devops-almvisual-studiovisual-studio">0.1.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#visual-studio" target="_blank" rel="noopener noreferrer"></a>Visual Studio</h3>
<p>We have the basics to start working. Log into your dev VM and start Visual Studio, we must map the Main folder to the development machine’s packages folder. Open the team explorer and select “Connect to a Project…”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Visual-Studio.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 4" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Visual-Studio.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 10</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 4</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 10</figcaption>
    </figure></p>
<p>It will ask for your credentials and then show all projects available with the account you’ve used. Select the project we have created in the steps earlier and click on “Connect”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Visual-Studio-connect-DevOps.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 5" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Visual-Studio-connect-DevOps.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 11</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 5</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 11</figcaption>
    </figure></p>
<p>Now open the “Source Control Explorer”, select the Main folder and click on the “Not mapped” text:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Map.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 6" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Map.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 12</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 6</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 12</figcaption>
    </figure></p>
<p>Map the Main folder to the K:\AosService\PackagesLocalDirectory folder on your service drive (this could be drive C if you’re using a local VM instead of a cloud-hosted environment):</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Map-to-PackagesLocalDirectory.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 7" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Map-to-PackagesLocalDirectory.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 13</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 7</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 13</figcaption>
    </figure></p>
<p>What we’ve done in this step is telling Visual Studio that what’s in our Azure DevOps project, inside the Main folder, will go into the K:\AosService\PackagesLocalDirectory folder of our development VM.</p>
<p>The Main folder we have in our source control tree is a regular folder, but we can <a href="https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/branch-folders-files?view=azure-devops&amp;WT.mc_id=DOP-MVP-5003976#convert-a-folder-to-a-branch" target="_blank" rel="noopener noreferrer">convert it into a branch</a> if we need it.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/2020-05-16-12_00_27.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 8" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/2020-05-16-12_00_27.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 14</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 8</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 14</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/2020-05-16-12_00_45.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 9" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/2020-05-16-12_00_45.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 15</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 9</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 15</figcaption>
    </figure></p>
<p>In the image above, you can see the icon for Main changes when it’s converted to a branch. Branches allow us to perform some actions that aren’t available to folders. Some differences can be seen in the context menu:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_13_11-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" title="Menú contextual carpeta" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_13_11-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 16</h2><p>Menú contextual carpeta</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 16</figcaption>
    </figure></p>
<p>Folder context menu</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_13_28-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" title="Menú contextual rama" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_13_28-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 17</h2><p>Menú contextual rama</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 17</figcaption>
    </figure></p>
<p>Branch context menu</p>
<p>For instance, branches can display the hierarchy of all the project branches (in this case it’s only Main and Dev so it’s quite simple).</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_14_11-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" title="Jerarquía de las ramas" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_14_11-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 18</h2><p>Jerarquía de las ramas</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 18</figcaption>
    </figure></p>
<p>Properties dialogs are different too. The folder one:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_10_06-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 10" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_10_06-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 19</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 10</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 19</figcaption>
    </figure></p>
<p>And the branch one, where we can see the different relationships between the other branches created from Main:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_09_23-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" title="Propiedades de la rama" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-11-14_09_23-ie-dev01dev.northeurope.cloudapp.azure_.com_61466-Remote-Desktop-Connection.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 20</h2><p>Propiedades de la rama</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 20</figcaption>
    </figure></p>
<p>This might be not that interesting or useful, but one of the things converting a folder into a branch is seeing where has a changeset been merge into.</p>
<h3 id="015-httpsaristeinfoenmsdyn365-azure-devops-almsome-advicesome-advice">0.1.5. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#some-advice" target="_blank" rel="noopener noreferrer"></a>Some advice</h3>
<p>I strongly recommend moving the Projects folder out of the Main branch (or whatever you call it) into the root of the project, at the same level as BuildProcessTemplates and Trunk. In fact, and this is my personal preference, I would keep anything that’s not code outside of a branch. By doing this you only need to take care of the code when merging and branching.</p>
<p>Those who have been working with AX for several years were used to not use version-control systems. MSDyn365FO has taken us to uncharted territory, so it is not uncommon for different teams to work in different ways, depending on their experience and what they’ve found in the path. Each team will need to invest some time to discover what’s better for them regarding code, branching and methodologies. Many times, this will be based on experimentation and trial and error, and with the pace of implementation projects trial and error turns out bad.</p>
<h3 id="016-httpsaristeinfoenmsdyn365-azure-devops-almbranching-strategiesbranching-strategies">0.1.6. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#branching-strategies" target="_blank" rel="noopener noreferrer"></a>Branching strategies</h3>
<p>I want to make it clear in advance: I’m not an expert in managing code nor Azure DevOps, at all. All that I’ve written here is product of my experience (good and bad) of over 4 years working with Finance and Operations. In this <a href="https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/branching-strategies-with-tfvc?view=azure-devops&amp;WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">article on branching strategies from the docs</a> there’s more information regarding branching and links to articles of the DevOps team. And there’s even more info in the <a href="http://aka.ms/vsarsolutions" target="_blank" rel="noopener noreferrer">DevOps Rangers’ Library of tooling and guidance solutions</a>!</p>
<h4 id="0161-httpsaristeinfoenmsdyn365-azure-devops-almmain-releasemain-release">0.1.6.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#main-release" target="_blank" rel="noopener noreferrer"></a>Main-Release</h4>
<p>One possible strategy is using a Main and a Release branch. We have already learnt that the Main branch is created when the Build VM is deployed. The usual is that in an implementation project all development will be done on that branch until the Go Live, and just before that a new Release branch will be created.</p>
<p>We will keep development work on the Main branch, and when that passes validation, we’ll move it to Release. This branching strategy is really simple and will keep us mostly worry-free.</p>
<h4 id="0162-httpsaristeinfoenmsdyn365-azure-devops-almdev-main-releasedev--main--release">0.1.6.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#dev-main-release" target="_blank" rel="noopener noreferrer"></a>Dev – Main – Release</h4>
<p>This strategy is similar to the Main – Release one but includes a Dev branch for each developer. This dev branch must be maintained by the developer using it. He can do as many check-ins as he wants during a development, and when it’s done merge all these changes to the Main branch in a single changeset. Of course, this adds some <em>bureaucracy</em> because we also need to forward integrate changes from Main into our Dev branch, but it will allow us to have a cleaner list of changesets when merging them from Main to the Release branch.</p>
<p>Whatever branching strategy you choose try to avoid having pending changesets to be merged for a long time. The amount of merge conflicts that will appear is directly proportional to the time the changeset has been waiting to be merged.</p>
<p>I wrote all of this based on my experience. It’s obviously not the same working for an ISV than for an implementation partner. An ISV has different needs, it must maintain different code versions to support all their customers and they don’t necessarily need to work in a Main – Release manner. They could have one (or more) branch for each version. However, since the end of overlayering this is not necessary. More ideas about this can be found in the article linked at the beginning.</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almazure-pipelinesazure-pipelines"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-pipelines" target="_blank" rel="noopener noreferrer"></a>Azure Pipelines</h2>
<h3 id="021-httpsaristeinfoenmsdyn365-azure-devops-almbuildsbuilds">0.2.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#builds" target="_blank" rel="noopener noreferrer"></a>Builds</h3>
<p>We’ve already seen that the default build definition has all the default steps active. We can disable (or remove) all the steps we’re not going to use. For example, the testing steps can be removed if we have no unit testing. We can also create new build definitions from scratch, however it’s easier to clone the default one and modify it to other branches or needs.</p>
<p>Since version 8.1 all the X++ hotfixes are gone, the updates are applied in a single deployable package as binaries. This implies that the source-controlled Metadata folder will only contain our custom packages and models, no standard packages anymore.</p>
<h3 id="022-httpsaristeinfoenmsdyn365-azure-devops-almcontinuous-integrationcontinuous-integration">0.2.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#continuous-integration" target="_blank" rel="noopener noreferrer"></a>Continuous Integration</h3>
<p>Continuous Integration (CI) is the process of automating the build and testing of code every time a team member commits changes to version control. (<a href="https://docs.microsoft.com/en-us/azure/devops/learn/what-is-continuous-integration?WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">source</a>)</p>
<p>Should your project/team use CI? Yes, yes, yes. This is one of the key feature of using an automated build process.</p>
<p>This is how a build definition for CI that will only compile our codebase looks like:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-20-15_06_43-AXZ-Dev-Continuous-Build-Azure-DevOps-Services.png.webp" title="Definicion build continua" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-20-15_06_43-AXZ-Dev-Continuous-Build-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 21</h2><p>Definicion build continua</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 21</figcaption>
    </figure></p>
<p>Only the prepare and build steps. Then we need to go to the “Triggers” tab and enable the CI option:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-20-15_07_54-AXZ-Dev-Continuous-Build-Azure-DevOps-Services.png.webp" title="DevOps continuous integration" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/2019-02-20-15_07_54-AXZ-Dev-Continuous-Build-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 22</h2><p>DevOps continuous integration</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 22</figcaption>
    </figure></p>
<p>Right after each developer check-in, a build will be queued, and the code compiled. In case there’s a compilation error we’ll be notified about it. Of course, we all build the solutions before checking them in and don’t need this CI build. Right?</p>
<p>![tysonjaja](./MSDyn365 &amp; Azure DevOps ALM - ariste.info_files/tysonjaja.gif &ldquo;MSDyn365 &amp; Azure DevOps ALM 23&rdquo;)</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/tysonjaja.gif" title="tysonjaja" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/tysonjaja.gif" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 23</h2><p>tysonjaja</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 23</figcaption>
    </figure></p>
<p>And because we all know that “Slow and steady wins the race”, but at some point during a project that’s not possible, so this kind of build definition can help us out. Especially when merging code between branches. This will allow us to be 100% sure when creating a DP to release to production that it’ll work. I can tell you that having to do a release to prod in a hurry and seeing the Main build failing is not nice.</p>
<h3 id="023-httpsaristeinfoenmsdyn365-azure-devops-almgated-check-insgated-check-ins">0.2.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#gated-check-ins" target="_blank" rel="noopener noreferrer"></a>Gated check-ins</h3>
<p>A gated check-in is a bit different than a CI build. The gated check-in will trigger an automated build BEFORE checking-in the code. If it fails, the changeset is not cheked-in until the errors are fixed and checked-in again.</p>
<p>This option might seem perfect for the merge check-ins to the Main branch. I’ve found some issues trying to use it, for example:</p>
<ul>
<li>If multiple merges &amp; check-ins from the same development are done and the first fails but the second doesn’t, you’ll still have pending merges to be done. You can try batching the builds, but I haven’t tried that.</li>
<li>Issues with error notifications and pending code on dev VMs.</li>
<li>If many check-ins are made, you’ll end up with lots of queued builds (and we only have one available agent per DevOps project). This can also be solved using the “Batch changes while a build is in progress”.</li>
</ul>
<p>I think the CI option is working perfectly to validate code. As I’ve already said several times, choose the strategy that better suits your team and your needs. Experiment with CI and Gated check-in builds and decide what is better for you.</p>
<h3 id="024-httpsaristeinfoenmsdyn365-azure-devops-almset-up-the-new-azure-devops-tasks-for-packaging-and-model-versioningset-up-the-new-azure-devops-tasks-for-packaging-and-model-versioning">0.2.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#set-up-the-new-azure-devops-tasks-for-packaging-and-model-versioning" target="_blank" rel="noopener noreferrer"></a>Set up the new Azure DevOps tasks for Packaging and Model Versioning</h3>
<p>Almost all the tasks of the default build definition use PowerShell scripts that run on the Build VM. We can change 3 of those steps for newer tasks. In order to use these newer tasks, we need to install the “Dynamics 365 Unified Operations Tools”. We’ll be using them to set up our release pipeline too so consider doing it now.</p>
<h4 id="0241-httpsaristeinfoenmsdyn365-azure-devops-almupdate-model-version-taskupdate-model-version-task">0.2.4.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#update-model-version-task" target="_blank" rel="noopener noreferrer"></a>Update Model Version task</h4>
<p>This one is the easiest, just add it to your build definition under the current model versioning task, disable the original one and you’re done. If you have any filters in your current task, like excluding any model, you must add the filter in the <em>Descriptor Search Pattern</em> field using <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/file-matching-patterns?view=azure-devops&amp;WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure DevOps pattern syntax</a>.</p>
<h4 id="0242-httpsaristeinfoenmsdyn365-azure-devops-almcreate-deployable-package-taskcreate-deployable-package-task">0.2.4.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-deployable-package-task" target="_blank" rel="noopener noreferrer"></a>Create Deployable Package task</h4>
<p>This task will replace the <em>Generate packages</em> from the current build definitions. To set it up we just need to do a pair of changes to the default values:</p>
<h5 id="02421-httpsaristeinfoenmsdyn365-azure-devops-almx-tools-pathx-tools-path">0.2.4.2.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#x-tools-path" target="_blank" rel="noopener noreferrer"></a>X++ Tools Path</h5>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/09/2019-09-05-11_25_12-AXZ-Dev-Build-DP-test-new-Azure-DevOps-Services.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 11" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/09/2019-09-05-11_25_12-AXZ-Dev-Build-DP-test-new-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 24</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 11</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 24</figcaption>
    </figure></p>
<p>This is your build VM’s physical bin folder, the AosService folder is usually on the unit K for cloud-hosted VMs. I guess this will change when we go VM-less to do the builds.</p>
<p><strong>Update!:</strong> the route to the unit can be changed for $(ServiceDrive), getting a path like $(ServiceDrive)\AOSService\PackagesLocalDirectory\bin.</p>
<h5 id="02422-httpsaristeinfoenmsdyn365-azure-devops-almlocation-of-the-x-binaries-to-packagelocation-of-the-x-binaries-to-package">0.2.4.2.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#location-of-the-x-binaries-to-package" target="_blank" rel="noopener noreferrer"></a>Location of the X++ binaries to package</h5>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/09/2019-09-05-11_29_55-AXZ-Dev-Build-DP-test-new-Azure-DevOps-Services.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 12" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/09/2019-09-05-11_29_55-AXZ-Dev-Build-DP-test-new-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 25</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 12</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 25</figcaption>
    </figure></p>
<p>The task comes with this field filled in as <em>$(Build.BinariesDirectory)</em> but this didn’t work out for our build definitions, maybe the variable isn’t set up on the proj file. After changing this to <em>$(Agent.BuildDirectory)\Bin</em> the package is generated.</p>
<h5 id="02423-httpsaristeinfoenmsdyn365-azure-devops-almfilename-and-path-for-the-deployable-packagefilename-and-path-for-the-deployable-package">0.2.4.2.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#filename-and-path-for-the-deployable-package" target="_blank" rel="noopener noreferrer"></a>Filename and path for the deployable package</h5>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/09/2019-09-05-11_33_28-AXZ-Dev-Build-DP-test-new-Azure-DevOps-Services.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 13" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/09/2019-09-05-11_33_28-AXZ-Dev-Build-DP-test-new-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 26</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 13</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 26</figcaption>
    </figure></p>
<p>The path on the image should be changed to <em>$(Build.ArtifactStagingDirectory)\Packages\AXDeployableRuntime_$(Build.BuildNumber).zip</em>. You can leave it without the <em>Packages</em> folder in the path, but if you do that you will need to change the <em>Path to Publish</em> field in the <em>Publish Artifact: Package</em> step of the definition.</p>
<h4 id="0243-httpsaristeinfoenmsdyn365-azure-devops-almadd-licenses-to-deployable-package-taskadd-licenses-to-deployable-package-task">0.2.4.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#add-licenses-to-deployable-package-task" target="_blank" rel="noopener noreferrer"></a>Add Licenses to Deployable Package task</h4>
<p>This task will add the license files to an existing Deployable Package. Remember that the path of the deployable package must be the same as the one in the <em>Create Deployable Package</em> task.</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almazure-hosted-build-for-dynamics-365-finance-scmazure-hosted-build-for-dynamics-365-finance--scm"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-hosted-build-for-dynamics-365-finance-scm" target="_blank" rel="noopener noreferrer"></a>Azure hosted build for Dynamics 365 Finance &amp; SCM</h2>
<p>The day we’ve been waiting for has come! The <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-tools/hosted-build-automation?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure hosted builds</a> are in public preview since PU35!! We can now stop asking <a href="https://twitter.com/jorisdg" target="_blank" rel="noopener noreferrer">Joris</a> when will this be available, because it already is! <strong><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-tools/hosted-build-automation?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Check the docs</a>!</strong></p>
<p>I’ve been able to write this because, thanks to <a href="https://twitter.com/_Gilabert_" target="_blank" rel="noopener noreferrer">Antonio Gilabert</a>, we’ve been testing this at <a href="https://www.axazure.com/" target="_blank" rel="noopener noreferrer">Axazure</a> for a few months with access to the private preview. And of course thanks to Joris for inviting us to the preview!</p>
<p><figure><a class="lightgallery" href="https://i1.wp.com/ariste.info/wp-content/uploads/2020/05/AzureDevOpsPipeline-2.png?fit=702%2C1024&amp;ssl=1" title="Azure hosted build" data-thumbnail="https://i1.wp.com/ariste.info/wp-content/uploads/2020/05/AzureDevOpsPipeline-2.png?fit=702%2C1024&amp;ssl=1" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 27</h2><p>Azure hosted build</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 27</figcaption>
    </figure></p>
<p>Riding the Azure Pipelines by <a href="https://cazapelusas.com/" target="_blank" rel="noopener noreferrer">Caza Pelusas</a></p>
<p>What does this mean? We no longer need a VM to run the build pipelines! <strong>Nah, we still need!</strong> If you’re <strong>running tests or synchronizing the DB</strong> as a part of your build pipeline you still need the VM. But we can move CI builds to the Azure hosted agent!</p>
<p>You can also read my full guide on <a href="https://ariste.info/en/msdyn365-azure-devops-alm/" target="_blank" rel="noopener noreferrer">MSDyn365FO &amp; Azure DevOps ALM</a>.</p>
<p>Remember <strong>this is a public preview</strong>. If you want to join the preview you first need to be part of the Dynamics 365 <a href="https://experience.dynamics.com/" target="_blank" rel="noopener noreferrer">Insider Program</a> where you can join the “<strong>Dynamics 365 for Finance and Operations Insider Community</strong>“. Once invited you should see a new LCS project called PEAP Assets, and inside its Asset Library you’ll find the nugets in the Nuget package section.</p>
<h3 id="031-httpsaristeinfoenmsdyn365-azure-devops-almazure-agentsazure-agents">0.3.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-agents" target="_blank" rel="noopener noreferrer"></a>Azure agents</h3>
<p>With the capacity to run an <strong>extra</strong> Azure-hosted build we get another agent to run a pipeline and can run multiple pipelines at the same time. But it <strong>still won’t be parallel pipelines</strong>, because we only get one VM-less agent. This means <strong>we can run a self-hosted and azure hosted pipeline at the same time, but we cannot run two of the same type in parallel</strong>. If we want that we need to <a href="https://docs.microsoft.com/en-us/azure/devops/organizations/billing/buy-more-build-vs?view=azure-devops&amp;WT.mc_id=DOP-MVP-5003976#microsoft-hosted-cicd" target="_blank" rel="noopener noreferrer">purchase extra agents</a>.</p>
<p>With a private Azure DevOps project we get 2GB of Artifacts space (we’ll see that later) and one self-hosted and one Microsoft hosted agent with 1800 free minutes:</p>
<p><figure><a class="lightgallery" href="https://i1.wp.com/ariste.info/wp-content/uploads/2020/04/08CEA665-618A-4F15-B9EC-F86A405FA7D8.jpeg?fit=909%2C1024&amp;ssl=1" title="08CEA665 618A 4F15 B9EC F86A405FA7D8" data-thumbnail="https://i1.wp.com/ariste.info/wp-content/uploads/2020/04/08CEA665-618A-4F15-B9EC-F86A405FA7D8.jpeg?fit=909%2C1024&amp;ssl=1" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 28</h2><p>08CEA665 618A 4F15 B9EC F86A405FA7D8</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 28</figcaption>
    </figure></p>
<p>Azure hosted build: Azure DevOps project pricing</p>
<p><strong>We’ll still keep the build VM</strong>, so it’s difficult to tell a customer we need to pay extra money without getting rid of its cost. Plus we’ve been doing everything with one agent until now and it’s been fine, right? So <strong>take this like extra capacity</strong>, we can divide the build between both agents and leave the MS hosted one for short builds to squeeze the 1800 free minutes as much as possible.</p>
<h3 id="032-httpsaristeinfoenmsdyn365-azure-devops-almhow-does-it-workhow-does-it-work">0.3.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#how-does-it-work" target="_blank" rel="noopener noreferrer"></a>How does it work?</h3>
<p>There’s really no magic in this. We move from a self-hosted agent in the build VM to a <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?WT.mc_id=DOP-MVP-5003976&amp;view=azure-devops" target="_blank" rel="noopener noreferrer">Microsoft-hosted agent.</a></p>
<p>The Azure hosted build relies on <a href="https://docs.microsoft.com/en-us/nuget/what-is-nuget?WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">nuget packages</a> to compile our X++ code. The contents of the PackagesLocalDirectory folder, platform and the compiler tools have basically been put into nugets and what we have in the build VM is now on 3 nugets.</p>
<p>When the build runs it downloads &amp; installs the nugets and uses them to compile our code on the Azure hosted build along the standard packages.</p>
<h3 id="033-httpsaristeinfoenmsdyn365-azure-devops-almwhat-do-i-needwhat-do-i-need">0.3.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#what-do-i-need" target="_blank" rel="noopener noreferrer"></a>What do I need?</h3>
<p>To configure the Azure hosted build we need:</p>
<ul>
<li>
<p>The 3 nuget packages from <a href="https://lcs.dynamics.com/" target="_blank" rel="noopener noreferrer">LCS</a>: Compiler tools, Platform X++ and Application X++.</p>
</li>
<li>
<p><a href="https://www.nuget.org/downloads" target="_blank" rel="noopener noreferrer">nuget.exe</a></p>
</li>
<li>
<p>A user with rights at the organization level to upload the nugets to Azure DevOps.</p>
</li>
<li>
<p>Some patience to get everything running 🙂</p>
</li>
</ul>
<p>So the first step is going to the PEAP LCS’ Asset Library and downloading the 3 nuget packages:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-13_44_51.png.webp" title="Nugets for the Azure Hosted Build" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-13_44_51.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 29</h2><p>Nugets for the Azure Hosted Build</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 29</figcaption>
    </figure></p>
<p>Nugets for the Azure Hosted Build</p>
<h3 id="034-httpsaristeinfoenmsdyn365-azure-devops-almazure-devops-artifactazure-devops-artifact">0.3.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-devops-artifact" target="_blank" rel="noopener noreferrer"></a>Azure DevOps artifact</h3>
<p>All of this can be done on your PC or in a dev VM, but you’ll need to add some files and <strong>a VS project to your source control</strong> so you need to use the developer box for sure.</p>
<p>Head to your Azure DevOps project and go to the Artifacts section. Here we’ll create a new feed and give it a name:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-09_24_19.png.webp" title="Azure DevOps artifact feed" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-09_24_19.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 30</h2><p>Azure DevOps artifact feed</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 30</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-09_24_55.png.webp" title="Azure DevOps artifact feed" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-09_24_55.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 31</h2><p>Azure DevOps artifact feed</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 31</figcaption>
    </figure></p>
<p>You get 2GB for artifacts, the 3 nuget packages’ size is around 500MB, you should have no issues with space unless you have other artifacts in your project.</p>
<p>Now press the “Connect to feed” button and select nuget.exe. You’ll find the instructions to continue there but I’ll explain it anyway.</p>
<p>Then you need to <a href="https://www.nuget.org/downloads" target="_blank" rel="noopener noreferrer">download nuget.exe</a> and put it in the Windows PATH. You can also get the nugets and nuget.exe in the same folder and forget about the PATH. Up to you. Finally, install the credential provider: download <a href="https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/helpers/installcredprovider.ps1" target="_blank" rel="noopener noreferrer">this Powershell script</a> and run it. If the script keeps asking for your credentials and fails try adding -AddNetfx as a parameter. Thanks to Erik Norell for finding this and sharing in the <a href="https://ariste.info/en/2020/05/azure-hosted-build-dynamics365-finance-scm/#comment-1793" target="_blank" rel="noopener noreferrer">comments of the original post</a>!</p>
<p>Create a new file called <em>nuget.config</em> in the same folder where you’ve downloaded the nugets. It will have the content you can see in the “Connect to feed” page, something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version\=&#34;1.0&#34; encoding\=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration</span><span class="err">\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;packageSources</span><span class="err">\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;clear</span> <span class="err">/\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;add</span> <span class="err">key\=&#34;AASBuild&#34;</span> <span class="err">value\=&#34;https://pkgs.dev.azure.com/aariste/aariste365FO/\_packaging/AASBuild/nuget/v3/index.json&#34;</span> <span class="err">/\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="err">&lt;</span>/packageSources\&gt;
</span></span><span class="line"><span class="cl"><span class="err">&lt;</span>/configuration\&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>This file’s content has to be exactly the same as what’s displayed in your “Connect to feed” page.</strong></p>
<p>And finally, we’ll push (upload) the nugets to our artifacts feed. We have to do this for each one of the 3 nugets we’ve downloaded:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">nuget</span><span class="p">.</span><span class="n">exe</span> <span class="n">push</span> <span class="n">-Source</span> <span class="s2">&#34;AASBuild&#34;</span> <span class="n">-ApiKey</span> <span class="n">az</span> <span class="p">&lt;</span><span class="n">packagePath</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You’ll get prompted for the user. Remember it needs to have enough rights on the project.</p>
<p>Of course, you need to change “AASBuild” for your artifact feed name. And we’re done with the artifacts.</p>
<h3 id="035-httpsaristeinfoenmsdyn365-azure-devops-almprepare-azure-devopsprepare-azure-devops">0.3.5. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#prepare-azure-devops" target="_blank" rel="noopener noreferrer"></a>Prepare Azure DevOps</h3>
<p>This new agent needs a solution to build our packages. This means we have to create an empty solution in Visual Studio and set the package of the project to our main package. Like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_20_58.png.webp" title="2020 04 24 14 20 58" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_20_58.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 32</h2><p>2020 04 24 14 20 58</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 32</figcaption>
    </figure></p>
<p>Visual Studio solution</p>
<p>If you have more than one package or models, you need to add a project to this solution for each separate model you have.</p>
<p>We have to create another file called <em>packages.config</em> with the following content:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version\=&#34;1.0&#34; encoding\=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;packages&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.Platform.DevALM.BuildXpp&#34;</span> <span class="err">version\=&#34;7.0.5644.16778&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.Application.DevALM.BuildXpp&#34;</span> <span class="err">version\=&#34;10.0.464.13&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.Platform.CompilerPackage&#34;</span> <span class="err">version\=&#34;7.0.5644.16778&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/packages&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The version tag will depend on when you’re reading this, but the one above is the correct one for PU35. <strong>We’ll need to update this file each time a new version of the nugets is published.</strong></p>
<p>And, to end with this part, we need to add the solution, the nuget.config and the packages.config files to TFVC. This is what I’ve done:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_29_01.png.webp" title="2020 04 24 14 29 01" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_29_01.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 33</h2><p>2020 04 24 14 29 01</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 33</figcaption>
    </figure></p>
<p>Azure DevOps</p>
<p>You can see I’ve created a Build folder in the root of my DevOps project. That’s only my preference, but I like to only have code in my branches, even the projects are outside of the branches, I only want the code to move between merges and branches. Place the files and solution inside the Build folder (or wherever you decide).</p>
<h3 id="036-httpsaristeinfoenmsdyn365-azure-devops-almconfigure-pipelineconfigure-pipeline">0.3.6. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#configure-pipeline" target="_blank" rel="noopener noreferrer"></a>Configure pipeline</h3>
<p>Now we need to create a new pipeline, you can just import <a href="https://github.com/microsoft/Dynamics365-Xpp-Samples-Tools/blob/master/CI-CD/Pipeline-Samples/xpp-classic-ci.json" target="_blank" rel="noopener noreferrer">this template</a> from the newly created <a href="https://github.com/microsoft/Dynamics365-Xpp-Samples-Tools" target="_blank" rel="noopener noreferrer">X++ (Dynamics 365) Samples and Tools Github project</a>. After importing the template we’ll modify it a bit. Initially, it will look like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_35_07-1.png.webp" title="2020 04 24 14 35 07 1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_35_07-1.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 34</h2><p>2020 04 24 14 35 07 1</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 34</figcaption>
    </figure></p>
<p>Azure hosted build: Default imported pipeline</p>
<p>As you can see the pipeline has all the steps needed to generate the DP, but some of them, the ones contained in the Dynamics 365 tasks, won’t load correctly after the import. <strong>You just need to add those steps to your pipeline manually and complete its setup.</strong></p>
<h4 id="0361-httpsaristeinfoenmsdyn365-azure-devops-almpipeline-rootpipeline-root">0.3.6.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#pipeline-root" target="_blank" rel="noopener noreferrer"></a>Pipeline root</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_38_27.png.webp" title="2020 04 24 14 38 27" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_38_27.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 35</h2><p>2020 04 24 14 38 27</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 35</figcaption>
    </figure></p>
<p>You need to select the Hosted Azure Pipelines for the Agent pool, and vs2017-win2016 as Agent Specification.</p>
<h4 id="0362-httpsaristeinfoenmsdyn365-azure-devops-almget-sourcesget-sources">0.3.6.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#get-sources" target="_blank" rel="noopener noreferrer"></a>Get sources</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_42_07.png.webp" title="DevOps mappings" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_42_07.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 36</h2><p>DevOps mappings</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 36</figcaption>
    </figure></p>
<p>Azure hosted build: Our mappings</p>
<p>I’ve mapped 2 things here: our codebase in the first mapping and the Build folder where I’ve added the solution and config files. If you’ve placed these files inside your Metadata folder you don’t need the extra mapping.</p>
<h4 id="0363-httpsaristeinfoenmsdyn365-azure-devops-almnuget-install-packagesnuget-install-packages">0.3.6.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#nuget-install-packages" target="_blank" rel="noopener noreferrer"></a>NuGet install Packages</h4>
<p>This step gets the nugets from our artifacts feeds and the installs to be used in each pipeline execution.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-25-12_41_47-1.png.webp" title="2020 04 25 12 41 47 1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-25-12_41_47-1.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 37</h2><p>2020 04 25 12 41 47 1</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 37</figcaption>
    </figure></p>
<p>Azure hosted build: nuget install</p>
<p>The command uses the config files we have uploaded to the Build folder, and as you can see it’s fetching the files from the <em>$(build.sourcesDirectory)\Build</em> directory we’ve configured in the Get sources step. If you’ve placed those files in a diferent place you need to change the paths as needed.</p>
<h4 id="0364-httpsaristeinfoenmsdyn365-azure-devops-almupdate-model-versionupdate-model-version">0.3.6.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#update-model-version" target="_blank" rel="noopener noreferrer"></a>Update Model Version</h4>
<p>This is one of the steps that are displaying issues even though I got the Dynamics 365 tools installed from the Azure DevOps marketplace. If you got it right you probably don’t need to change anything. If you have the same issue as me, just add a new step and select the “Update Model Version” task and change the fields so it looks like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_53_56-1.png.webp" title="Update Model Version" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_53_56-1.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 38</h2><p>Update Model Version</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 38</figcaption>
    </figure></p>
<p>Azure hosted build: Update Model Version</p>
<h4 id="0365-httpsaristeinfoenmsdyn365-azure-devops-almbuild-solutionbuild-solution">0.3.6.5. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#build-solution" target="_blank" rel="noopener noreferrer"></a>Build solution</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-25-09_33_56.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 14" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-25-09_33_56.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 39</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 14</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 39</figcaption>
    </figure></p>
<p>Build solution step</p>
<p>In the build solution step, you have a wildcard in the solution field: **\\*.sln. If you leave this wildcard it will build all the projects you have in the repo and, depending on the number of projects you have, the build could time out.</p>
<p>I solve this by selecting a solution, that contains all the models I have, that I have placed in the Build folder in my repo, and update that solution if you add or remove any model.</p>
<p>Thanks to <a href="https://twitter.com/IevgenMir" target="_blank" rel="noopener noreferrer">Ievgen Miroshnikov</a> for pointing this out!</p>
<p>There could be an additional issue with the rnrproj files as <a href="https://ariste.info/en/2020/05/azure-hosted-build-dynamics365-finance-scm/#comment-5584" target="_blank" rel="noopener noreferrer">Josh Williams points out in a comment</a>. If your project was created pre-PU27 try creating a new solution to avoid problems.</p>
<h4 id="0366-httpsaristeinfoenmsdyn365-azure-devops-almcreate-deployable-packagecreate-deployable-package">0.3.6.6. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-deployable-package" target="_blank" rel="noopener noreferrer"></a>Create Deployable Package</h4>
<p>This is another one of the steps that are not loading correctly for me. Again, add it and change as needed:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_55_32.png.webp" title="2020 04 24 14 55 32" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_55_32.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 40</h2><p>2020 04 24 14 55 32</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 40</figcaption>
    </figure></p>
<p>Azure hosted build: Create Deployable Package</p>
<h4 id="0367-httpsaristeinfoenmsdyn365-azure-devops-almadd-licenses-to-deployable-packageadd-licenses-to-deployable-package">0.3.6.7. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#add-licenses-to-deployable-package" target="_blank" rel="noopener noreferrer"></a>Add Licenses to Deployable Package</h4>
<p>Another step with issues. Do the same as with the others:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_57_35.png.webp" title="2020 04 24 14 57 35" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-24-14_57_35.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 41</h2><p>2020 04 24 14 57 35</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 41</figcaption>
    </figure></p>
<p>Azure hosted build: Add Licenses to Deployable Package</p>
<p>And that’s all. You can queue the build to test if it’s working. For the first runs you can disable the steps after the “Build solution” one to see if the nugets are downloaded correctly and your code built. After that try generating the DP and publishing the artifact.</p>
<p>You’ve configured your Azure hosted build, now it’s your turn to decide in which cases will you use the self-hosted or the azure hosted build.</p>
<h3 id="037-httpsaristeinfoenmsdyn365-azure-devops-almupdate-for-version-10-0-18update-for-version-10018">0.3.7. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#update-for-version-10-0-18" target="_blank" rel="noopener noreferrer"></a>Update for version 10.0.18</h3>
<p>Since version 10.0.18 we’ll be getting 4 NuGet packages instead of 3 because of the Microsoft.Dynamics.AX.Application.DevALM.BuildXpp NuGet size is getting near or over the max size which is 500MB and will come as 2 NuGet packages from now on.</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-tools/pipeline-nuget-split?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">You can read about this in the docs</a>.</p>
<p>There just 2 small changes we need to do to the pipeline if we’re already using it, one to the packages.config file and another one to the pipeline.</p>
<h4 id="0371-httpsaristeinfoenmsdyn365-azure-devops-almpackages-configpackagesconfig">0.3.7.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#packages-config" target="_blank" rel="noopener noreferrer"></a>packages.config</h4>
<p>The packages.config file will have an additional line for the Application Suite NuGet.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version\=&#34;1.0&#34; encoding\=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;packages</span><span class="err">\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.Platform.DevALM.BuildXpp&#34;</span> <span class="err">version\=&#34;7.0.5968.16973&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="err">/\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.Application.DevALM.BuildXpp&#34;</span> <span class="err">version\=&#34;10.0.793.16&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="err">/\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.ApplicationSuite.DevALM.BuildXpp&#34;</span> <span class="err">version\=&#34;10.0.793.16&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="err">/\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;package</span> <span class="err">id\=&#34;Microsoft.Dynamics.AX.Platform.CompilerPackage&#34;</span> <span class="err">version\=&#34;7.0.5968.16973&#34;</span> <span class="err">targetFramework\=&#34;net40&#34;</span> <span class="err">/\</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">&lt;</span>/packages\&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="0372-httpsaristeinfoenmsdyn365-azure-devops-almpipelinepipeline">0.3.7.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#pipeline" target="_blank" rel="noopener noreferrer"></a>Pipeline</h4>
<p>We need to add a new variable to the pipeline variables called AppSuitePackage with the value Microsoft.Dynamics.<em>AX.ApplicationSuite.DevALM.BuildXpp</em>.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/05/image-1024x664.png.webp" title="New Azure DevOps pipeline variable" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/05/image-1024x664.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 42</h2><p>New Azure DevOps pipeline variable</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 42</figcaption>
    </figure></p>
<p>New Azure DevOps pipeline variable</p>
<p>And then use it in the build step and change it to:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">/</span><span class="n">p:BuildTasksDirectory</span><span class="p">\=</span><span class="s2">&#34;</span><span class="p">$(</span><span class="n">NugetsPath</span><span class="p">)</span><span class="s2">\\</span><span class="p">$(</span><span class="n">ToolsPackage</span><span class="p">)</span><span class="s2">\\DevAlm&#34;</span> <span class="p">/</span><span class="n">p:MetadataDirectory</span><span class="p">\=</span><span class="s2">&#34;</span><span class="p">$(</span><span class="n">MetadataPath</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">/</span><span class="n">p:FrameworkDirectory</span><span class="p">\=</span><span class="s2">&#34;</span><span class="p">$(</span><span class="n">NuGetsPath</span><span class="p">)</span><span class="s2">\\</span><span class="p">$(</span><span class="n">ToolsPackage</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">/</span><span class="n">p:ReferenceFolder</span><span class="p">\=</span><span class="s2">&#34;</span><span class="p">$(</span><span class="n">NuGetsPath</span><span class="p">)</span><span class="s2">\\</span><span class="p">$(</span><span class="n">PlatPackage</span><span class="p">)</span><span class="s2">\\ref\\net40;</span><span class="p">$(</span><span class="n">NuGetsPath</span><span class="p">)</span><span class="s2">\\</span><span class="p">$(</span><span class="n">AppPackage</span><span class="p">)</span><span class="s2">\\ref\\net40;</span><span class="p">$(</span><span class="n">MetadataPath</span><span class="p">)</span><span class="s2">;</span><span class="p">$(</span><span class="n">Build</span><span class="p">.</span><span class="n">BinariesDirectory</span><span class="p">)</span><span class="s2">;</span><span class="p">$(</span><span class="n">NuGetsPath</span><span class="p">)</span><span class="s2">\\</span><span class="p">$(</span><span class="n">AppSuitePackage</span><span class="p">)</span><span class="s2">\\ref\\net40&#34;</span> <span class="p">/</span><span class="n">p:ReferencePath</span><span class="p">\=</span><span class="s2">&#34;</span><span class="p">$(</span><span class="n">NuGetsPath</span><span class="p">)</span><span class="s2">\\</span><span class="p">$(</span><span class="n">ToolsPackage</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">/</span><span class="n">p:OutputDirectory</span><span class="p">\=</span><span class="s2">&#34;</span><span class="p">$(</span><span class="n">Build</span><span class="p">.</span><span class="n">BinariesDirectory</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="httpsaristeinfoenmsdyn365-azure-devops-almazure-devtest-labs-powered-buildsazure-devtest-labs-powered-builds"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-devtest-labs-powered-builds" target="_blank" rel="noopener noreferrer"></a>Azure DevTest Labs powered builds</h2>
<p>The <strong><a href="https://ariste.info/en/2020/10/tier-1-microsoft-managed-removed/" target="_blank" rel="noopener noreferrer">end of Tier-1 Microsoft-managed build VMs</a> is near</strong>, and this will leave us without the capacity to synchronize the DB or run tests in a pipeline, unless we deploy a new build VM in our, or our customer’s, Azure subscription. Of course, there might be a cost concern with it, and there’s where <strong>Azure DevTest Labs</strong> can help us!</p>
<p><strong>This post has been written thanks to <a href="https://twitter.com/jorisdg" target="_blank" rel="noopener noreferrer">Joris de Gruyter</a>‘s session in the past <a href="https://dynamicscon.com/" target="_blank" rel="noopener noreferrer">DynamicsCon</a></strong>: <a href="https://www.youtube.com/watch?v=VIib-m6Q8LQ" target="_blank" rel="noopener noreferrer">Azure Devops Automation for Finance and Operations Like You’ve Never Seen!</a> And there’s also been some investigation and (a lot of) trial-and-error from my side until everything has been working.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/adtl-1024x1024.png.webp" title="Azure DevTest Labs" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/adtl-1024x1024.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 43</h2><p>Azure DevTest Labs</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 43</figcaption>
    </figure></p>
<p>Configuring the build VM in Azure DevTest Labs</p>
<p>If you want to know more about builds, releases, and the Dev ALM of Dynamics 365 you can read my full guide on <a href="https://ariste.info/en/msdyn365-azure-devops-alm/" target="_blank" rel="noopener noreferrer">MSDyn365 &amp; Azure DevOps ALM</a>.</p>
<h3 id="041-httpsaristeinfoenmsdyn365-azure-devops-almbut-firstbut-first">0.4.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#but-first" target="_blank" rel="noopener noreferrer"></a>But first…</h3>
<p>What I’m showing in this post is not a perfect blueprint. There’s a high probability that if you try exactly the same as I do here, you won’t get the same result. But it’s a good guide to get started and do some investigation on your own and learn.</p>
<h3 id="042-httpsaristeinfoenmsdyn365-azure-devops-almazure-devtest-labsazure-devtest-labs">0.4.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-devtest-labs" target="_blank" rel="noopener noreferrer"></a>Azure DevTest Labs</h3>
<p><a href="https://azure.microsoft.com/en-us/services/devtest-lab?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure DevTest Labs</a> is an Azure tool/service that allows us to <strong>deploy virtual machines and integrate them with Azure DevOps pipelines</strong>, and many other things, but what I’m going to explain is just the VM and pipeline part.</p>
<p>What will I show in this post? How to <strong>prepare a Dynamics 365 Finance and Operations VHD image to be used as the base to create a build virtual machine from an Azure DevOps pipeline</strong>, build our codebase, synchronize the DB, run tests, even deploy the reports, generate the deployable package and delete the VM.</p>
<h3 id="043-httpsaristeinfoenmsdyn365-azure-devops-almgetting-and-preparing-the-vhdgetting-and-preparing-the-vhd">0.4.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#getting-and-preparing-the-vhd" target="_blank" rel="noopener noreferrer"></a>Getting and preparing the VHD</h3>
<p>This is by far the most tedious part of all the process because you need to download 11 ZIP files from LCS’ Shared Asset Library, and we all know how fast things download from LCS.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/fast.png.webp" title="LCS download speed" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/fast.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 44</h2><p>LCS download speed</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 44</figcaption>
    </figure></p>
<p>How is LCS download speed?</p>
<p>And to speed it up we can create a blob storage account on Azure and once more turn to <a href="https://mobile.twitter.com/splaxi" target="_blank" rel="noopener noreferrer">Mötz Jensen</a>‘s <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a> and use the Invoke-D365AzCopyTransfer cmdlet. Just go to LCS, click on the “Generate SAS link” button for each file, use it as the source parameter in the command and your blob SAS URL as the destination one. Once you have all the files in your blob you can download them to your local PC at a good speed.</p>
<p>Once you’ve unzipped the VHD you need to change it from Dynamic to Fixed using this PowerShell command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Convert-VHD</span> <span class="err">–</span><span class="n">Path</span> <span class="n">VHDLOCATION</span><span class="p">.</span><span class="n">vhd</span> <span class="err">–</span><span class="n">DestinationPath</span> <span class="n">NEWVHD</span><span class="p">.</span><span class="n">vhd</span> <span class="err">–</span><span class="n">VHDType</span> <span class="n">Fixed</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The reason is <strong>you can’t create an Azure VM from a dynamically-sized VHD</strong>. And it took me several attempts to notice this 🙂</p>
<h3 id="044-httpsaristeinfoenmsdyn365-azure-devops-almcreate-a-devtest-labs-accountcreate-a-devtest-labs-account">0.4.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-a-devtest-labs-account" target="_blank" rel="noopener noreferrer"></a>Create a DevTest Labs account</h3>
<p>To do this part <strong>you need an Azure account</strong>. If you don’t have one you can <a href="https://azure.microsoft.com/en-us/free?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">sign up for a free Azure account</a> with a credit of 180 Euros (200 US Dollars) to be spent during 30 days, plus many other free services during 12 months.</p>
<p>Search for DevTest Labs in the top bar and create a new DevTest Lab. Once it’s created open the details and you should see something like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest1.png.webp" title="Azure DevTest Labs" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest1.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 45</h2><p>Azure DevTest Labs</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 45</figcaption>
    </figure></p>
<p>Azure DevTest Labs</p>
<p>Click on the “Configuration and policies” menu item at the bottom of the list and scroll down in the menu until you see the “Virtual machine bases” section:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest2.png.webp" title="DevTest Labs custom VHD image" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest2.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 46</h2><p>DevTest Labs custom VHD image</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 46</figcaption>
    </figure></p>
<p>DevTest Labs custom image</p>
<p>And now comes the second funniest part of the process: <strong>we need to upload the 130GB VHD image to a blob storage account</strong>! So, click the “Add” button on top and in the new dialog that will open click the “Upload a VHD using PowerShell”. This will generate a PowerShell script to upload the VHD to the DevTest Labs blob. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">&lt;# Generated script to upload a local VHD to Azure. WARNING: The destination will be publicly available for 24 hours, after which it will expire. Ensure you complete your upload by then. Run the following command in a Azure PowerShell console after entering the LocalFilePath to your VHD. #&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nb">Add-AzureRmVhd</span> <span class="n">-Destination</span> <span class="s2">&#34;https://YOURBLOB.blob.core.windows.net/uploads/tempImage.vhd?sv=2019-07-07&amp;st=2020-12-27T09%3A08%3A26Z&amp;se=2020-12-28T09%3A23%3A26Z&amp;sr=b&amp;sp=rcw&amp;sig=YTeXpxpVEJdSM7KZle71w8NVw9oznNizSnYj8Q3hngI%3D&#34;</span> <span class="n">-LocalFilePath</span> <span class="s2">&#34;&lt;Enter VHD location here&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Generated script to upload a local VHD to Azure.</p>
<p>WARNING: The destination will be publicly available for 24 hours, after which it will expire.</p>
<p>Ensure you complete your upload by then.</p>
<p>Run the following command in a Azure PowerShell console after entering</p>
<p>the LocalFilePath to your VHD.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Add-AzureRmVhd</span> <span class="p">\</span><span class="n">-Destination</span> <span class="s2">&#34;https://YOURBLOB.blob.core.windows.net/uploads/tempImage.vhd?sv=2019-07-07&amp;st=2020-12-27T09%3A08%3A26Z&amp;se=2020-12-28T09%3A23%3A26Z&amp;sr=b&amp;sp=rcw&amp;sig=YTeXpxpVEJdSM7KZle71w8NVw9oznNizSnYj8Q3hngI%3D&#34;</span> <span class="p">\</span><span class="n">-LocalFilePath</span> <span class="s2">&#34;&lt;Enter VHD location here&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest3.png.webp" title="DevTest Labs custom image upload" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest3.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 47</h2><p>DevTest Labs custom image upload</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 47</figcaption>
    </figure></p>
<p>DevTest Labs custom image upload</p>
<p>An alternative to this is using the Azure Storage Explorer as you can see in the image on the left.</p>
<p>You should upload the VHD to the uploads blob.</p>
<p>Any of these methods is good to upload the VHD and I don’t really know which one is faster.</p>
<p>Once the VHD is uploaded open the “Custom images” option again and you should see the VHD in the drop-down:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest4.png.webp" title="DevTest Labs custom image" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest4.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 48</h2><p>DevTest Labs custom image</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 48</figcaption>
    </figure></p>
<p>DevTest Labs custom image</p>
<p>Give the image a name and click OK.</p>
<p>What we have now is the <strong>base for a Dynamics 365 Finance and Operations dev VM</strong> which we need to prepare to use it as a build VM.</p>
<h3 id="045-httpsaristeinfoenmsdyn365-azure-devops-almcreating-the-vmcreating-the-vm">0.4.5. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#creating-the-vm" target="_blank" rel="noopener noreferrer"></a>Creating the VM</h3>
<p>We’ve got the essential, a VHD ready to be used as a base to create a virtual machine in Azure. Our next step is finding a way to make the deployment of this VM <strong>predictable and automated</strong>. We will attain this thanks to <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure ARM templates</a>.</p>
<p>Go back to your DevTest Labs overview page and click the “Add” button, on the “Choose base” page select the base you’ve just created, and on the next screen click on the “Add or Remove Artifacts” link:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest5.png.webp" title="Add artifacts to the VM" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest5.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 49</h2><p>Add artifacts to the VM</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 49</figcaption>
    </figure></p>
<p>Add artifacts to the VM</p>
<p>Search for <strong>WinRM</strong>, select “Configure WinRM”, and on the next screen enter “Shared IP address” as the hostname box and click “Add”.</p>
<p><strong>Note</strong>: if when the VM runs the artifacts can’t be installed check whether the <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/agent-windows?WT.mc_id=BA-MVP-5003976#manual-installation" target="_blank" rel="noopener noreferrer">Azure VM Agent</a> is installed on the base VHD. Thanks to Joris for pointing this out!</p>
<h4 id="0451-httpsaristeinfoenmsdyn365-azure-devops-almconfigure-azure-devops-agent-serviceconfigure-azure-devops-agent-service">0.4.5.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#configure-azure-devops-agent-service" target="_blank" rel="noopener noreferrer"></a>Configure Azure DevOps Agent Service</h4>
<h5 id="04511-httpsaristeinfoenmsdyn365-azure-devops-almoption-a-use-an-artifactoption-a-use-an-artifact">0.4.5.1.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#option-a-use-an-artifact" target="_blank" rel="noopener noreferrer"></a>Option A: use an artifact</h5>
<p><strong>Update</strong>: thanks to <strong><a href="https://ariste.info/en/2021/02/azure-devtest-labs-build-dynamics-365-fno/#comment-7107" target="_blank" rel="noopener noreferrer">Florian Hopfner</a></strong> for reminding me this because I forgot… If you choose Option A to install the agent service you need to do some things first!</p>
<p>The first thing we need to do is running some PowerShell scripts that create registry entries and environment variables in the VM, go to C:\DynamicsSDK and run these:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="p">$(</span><span class="nb">Join-Path</span> <span class="p">\</span><span class="n">-Path</span> <span class="s2">&#34;C:\\DynamicsSDK&#34;</span> <span class="p">\</span><span class="n">-ChildPath</span> <span class="s2">&#34;DynamicsSDKCommon.psm1&#34;</span><span class="p">)</span> <span class="p">\</span><span class="n">-Function</span> <span class="s2">&#34;Write-Message&#34;</span><span class="p">,</span> <span class="s2">&#34;Set-AX7SdkRegistryValues&#34;</span><span class="p">,</span> <span class="s2">&#34;Set-AX7SdkEnvironmentVariables&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Set</span><span class="p">\</span><span class="n">-AX7SdkEnvironmentVariables</span> <span class="p">\</span><span class="n">-DynamicsSDK</span> <span class="s2">&#34;C:\\DynamicsSDK&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Set</span><span class="p">\</span><span class="n">-AX7SdkRegistryValues</span> <span class="p">\</span><span class="n">-DynamicsSDK</span> <span class="s2">&#34;c:\\DynamicsSDK&#34;</span> <span class="p">\</span><span class="n">-TeamFoundationServerUrl</span> <span class="s2">&#34;https://dev.azure.com/YOUR\_ORG&#34;</span> <span class="p">\</span><span class="n">-AosWebsiteName</span> <span class="nv">$AosWebsiteName</span> <span class="s2">&#34;AosService&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The first one will load the functions and make them available in the command-line and the other two create the registry entries and environment variables.</p>
<p>Now we need to <strong>add an artifact for the Azure DevOps agent service</strong>. This will configure the agent service on the VM each time the VM is deployed. Search for “Azure Pipelines Agent” and click it. You will see this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTest1-311x1024.png.webp" title="DevTest Labs Azure DevOps Agent" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTest1-311x1024.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 50</h2><p>DevTest Labs Azure DevOps Agent</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 50</figcaption>
    </figure></p>
<p>DevTest Labs Azure DevOps Agent</p>
<p>We need to fill some information:</p>
<p>On “<strong>Azure DevOps Organization Name</strong>” you need to provide the name of your organization. For example if your AZDO URL is <a href="https://dev.azure.com/blackbeltcorp" target="_blank" rel="noopener noreferrer">https://dev.azure.com/blackbeltcorp</a> you need to use blackbeltcorp.</p>
<p>On “<strong>AZDO Personal Access Token</strong>” you need to provide a token generated from AZDO.</p>
<p>On “<strong>Agent Name</strong>” give your agent a name, like DevTestAgent. And on “Agent Pool” a name for your pool, a new like DevTestPool or an existing one as Default.</p>
<p>On “<strong>Account Name</strong>” use the same user that we’ll use in our pipeline later. Remember this. And on “<strong>Account Password</strong>” its password. Using secrets with a KeyVault is better, but I won’t explain this here.</p>
<p>And, finally, set “<strong>Replace Agent</strong>” to true.</p>
<h5 id="04512-httpsaristeinfoenmsdyn365-azure-devops-almoption-b-configure-azure-devops-agent-in-the-vmoption-b-configure-azure-devops-agent-in-the-vm">0.4.5.1.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#option-b-configure-azure-devops-agent-in-the-vm" target="_blank" rel="noopener noreferrer"></a>Option B: Configure Azure DevOps Agent in the VM</h5>
<p>To do this you have to create a VM from the base image you created before and then go to C:\DynamicsSDK and run the SetupBuildAgent script with the needed parameters:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">SetupBuildAgent</span><span class="p">.</span><span class="n">ps1</span> <span class="p">\</span><span class="n">-VSO</span><span class="p">\</span><span class="n">_ProjectCollection</span> <span class="s2">&#34;https://dev.azure.com/YOUR\_ORG&#34;</span> <span class="p">\</span><span class="n">-ServiceAccountName</span> <span class="s2">&#34;myUser&#34;</span> <span class="p">\</span><span class="n">-ServiceAccountPassword</span> <span class="s2">&#34;mYPassword&#34;</span> <span class="p">\</span><span class="n">-AgentName</span> <span class="s2">&#34;DevTestAgent&#34;</span> <span class="p">\</span><span class="n">-AgentPoolName</span> <span class="s2">&#34;DevTestPool&#34;</span> <span class="p">\</span><span class="n">-VSOAccessToken</span> <span class="s2">&#34;YOUR\_VSTS\_TOKEN&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>WARNING</strong>: If you choose option B you must create a new base image from the VM where you’ve run the script. Then repeat the WinRM steps to generate the new ARM template which we’ll see next.</p>
<h4 id="0452-httpsaristeinfoenmsdyn365-azure-devops-almarm-templatearm-template">0.4.5.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#arm-template" target="_blank" rel="noopener noreferrer"></a>ARM template</h4>
<p>Then go to the “Advanced Settings” tab and click the “<strong>View ARM template</strong>” button:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/12/DevTest6.png.webp" title="Get the ARM template" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/12/DevTest6.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 51</h2><p>Get the ARM template</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 51</figcaption>
    </figure></p>
<p>Get the ARM template</p>
<p>This will display the ARM template to create the VM from our pipeline. It’s something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;$schema&#34;</span><span class="p">:</span> <span class="s2">&#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;contentVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;newVMName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;aariste001&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;aristeinfo&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;Standard\_B4ms&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;userName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;myUser&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;securestring&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;\[\[\[VmPassword\]\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Configure\_WinRM\_hostName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;Public IP address&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_vstsAccount&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;ariste&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_vstsPassword&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;securestring&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_agentName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;DevTestAgent&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_agentNameSuffix&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_poolName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;DevTestPool&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_RunAsAutoLogon&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;bool&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_windowsLogonAccount&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;aariste&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_windowsLogonPassword&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;securestring&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_driveLetter&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;C&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_workDirectory&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;DevTestAgent&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;Azure\_Pipelines\_Agent\_replaceAgent&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;bool&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;variables&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labSubnetName&#34;</span><span class="p">:</span> <span class="s2">&#34;\[concat(variables(&#39;labVirtualNetworkName&#39;), &#39;Subnet&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labVirtualNetworkId&#34;</span><span class="p">:</span> <span class="s2">&#34;\[resourceId(&#39;Microsoft.DevTestLab/labs/virtualnetworks&#39;, parameters(&#39;labName&#39;), variables(&#39;labVirtualNetworkName&#39;))\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labVirtualNetworkName&#34;</span><span class="p">:</span> <span class="s2">&#34;\[concat(&#39;Dtl&#39;, parameters(&#39;labName&#39;))\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;vmId&#34;</span><span class="p">:</span> <span class="s2">&#34;\[resourceId (&#39;Microsoft.DevTestLab/labs/virtualmachines&#39;, parameters(&#39;labName&#39;), parameters(&#39;newVMName&#39;))\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;vmName&#34;</span><span class="p">:</span> <span class="s2">&#34;\[concat(parameters(&#39;labName&#39;), &#39;/&#39;, parameters(&#39;newVMName&#39;))\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;resources&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;2018-10-15-preview&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;Microsoft.DevTestLab/labs/virtualmachines&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;\[variables(&#39;vmName&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="s2">&#34;\[resourceGroup().location\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labVirtualNetworkId&#34;</span><span class="p">:</span> <span class="s2">&#34;\[variables(&#39;labVirtualNetworkId&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;notes&#34;</span><span class="p">:</span> <span class="s2">&#34;Dynamics365FnO10013AgentLessV2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;customImageId&#34;</span><span class="p">:</span> <span class="s2">&#34;/subscriptions/6715778f-c852-453d-b6bb-907ac34f280f/resourcegroups/devtestlabs365/providers/microsoft.devtestlab/labs/devtestd365/customimages/dynamics365fno10013agentlessv2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;size&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;userName&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;userName&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;password&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;isAuthenticationWithSshKey&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;artifacts&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;artifactId&#34;</span><span class="p">:</span> <span class="s2">&#34;\[resourceId(&#39;Microsoft.DevTestLab/labs/artifactSources/artifacts&#39;, parameters(&#39;labName&#39;), &#39;public repo&#39;, &#39;windows-winrm&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;hostName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Configure\_WinRM\_hostName&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;artifactId&#34;</span><span class="p">:</span> <span class="s2">&#34;\[resourceId(&#39;Microsoft.DevTestLab/labs/artifactSources/artifacts&#39;, parameters(&#39;labName&#39;), &#39;public repo&#39;, &#39;windows-vsts-build-agent&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;vstsAccount&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_vstsAccount&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;vstsPassword&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_vstsPassword&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;agentName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_agentName&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;agentNameSuffix&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_agentNameSuffix&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;poolName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_poolName&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;RunAsAutoLogon&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_RunAsAutoLogon&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;windowsLogonAccount&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_windowsLogonAccount&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;windowsLogonPassword&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_windowsLogonPassword&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;driveLetter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_driveLetter&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;workDirectory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_workDirectory&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;replaceAgent&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[parameters(&#39;Azure\_Pipelines\_Agent\_replaceAgent&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labSubnetName&#34;</span><span class="p">:</span> <span class="s2">&#34;\[variables(&#39;labSubnetName&#39;)\]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;disallowPublicIpAddress&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;storageType&#34;</span><span class="p">:</span> <span class="s2">&#34;Premium&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;allowClaim&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;networkInterface&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;sharedPublicIpAddressConfiguration&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;inboundNatRules&#34;</span><span class="p">:</span> <span class="err">\</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;transportProtocol&#34;</span><span class="p">:</span> <span class="s2">&#34;tcp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;backendPort&#34;</span><span class="p">:</span> <span class="mi">3389</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="err">\</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;outputs&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;labVMId&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;\[variables(&#39;vmId&#39;)\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>NOTE</strong>: if you’re using option B you won’t have the artifact node for the VSTS agent.</p>
<p>This JSON file will be used as the base to create our VMs from the Azure DevOps pipeline. This is known as <a href="https://docs.microsoft.com/en-us/azure/devops/learn/what-is-infrastructure-as-code?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Infrastructure as Code</a> (IaC) and it’s a way of defining our infrastructure in a file as it were code. It’s another part of the DevOps practice that should solve the “it works on my machine” issue.</p>
<p>If we take a look to the JSON’s parameters node there’s the following information:</p>
<ul>
<li>newVMName and labName will be the name of the VM and the DevTest Labs lab we’re using. The VM name is not really important because we’ll set the name later in the pipeline.</li>
<li>size is the VM size, a D3 V2 in the example above, but we can change it and will do it later.</li>
<li>userName &amp; passWord will be the credentials to access the VM and must be the same we’ve used to configure the Azure DevOps agent.</li>
<li>Configure_WinRM_hostName is the artifact we added to the VM template that will allow the pipelines to run in this machine.</li>
</ul>
<p>To do it faster and for demo purposes I’m using a plain text password in the ARM template, changing the password node to something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;password&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;string&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;defaultValue&#34;</span><span class="p">:</span> <span class="s2">&#34;yourPassword&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span><span class="err">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I will do the same with all the <em>secureString</em> nodes, but you shouldn’t and should instead use an Azure KeyVault which comes with the DevTest Labs account.</p>
<p>Of course <strong>you would never upload this template to Azure DevOps with a password in plain text</strong>. There’s plenty of resources online that teach how to use parameters, Azure KeyVault, etc. to accomplish this, for example this one: <a href="https://devkimchi.com/2019/04/24/6-ways-passing-secrets-to-arm-templates/" target="_blank" rel="noopener noreferrer">6 Ways Passing Secrets to ARM Templates</a>.</p>
<p>OK, now grab that file and save it to your Azure DevOps repo. I’ve created a folder in my repo’s root called ARM where I’m saving all the ARM templates:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs2.png.webp" title="ARM templates on Azure DevOps" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs2.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 52</h2><p>ARM templates on Azure DevOps</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 52</figcaption>
    </figure></p>
<p>ARM templates on Azure DevOps</p>
<h3 id="046-httpsaristeinfoenmsdyn365-azure-devops-almpreparing-the-vmpreparing-the-vm">0.4.6. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#preparing-the-vm" target="_blank" rel="noopener noreferrer"></a>Preparing the VM</h3>
<p>The VHD image you download can be used as a developer VM with no additional work, just run Visual Studio, connect it to your AZDO project and done. But if you want to use it as a build box you need to do several things first.</p>
<p>Remember that the default user and password for these VHDs are Administrator and Pass@word1.</p>
<h4 id="0461-httpsaristeinfoenmsdyn365-azure-devops-almdisable-servicesdisable-services">0.4.6.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#disable-services" target="_blank" rel="noopener noreferrer"></a>Disable services</h4>
<p>First of all we will stop and disable services like the Batch, Management Reporter, SSAS, SSIS, etc. Anything you see that’s not needed to run a build.</p>
<h4 id="0462-httpsaristeinfoenmsdyn365-azure-devops-almcreate-a-new-sql-usercreate-a-new-sql-user">0.4.6.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-a-new-sql-user" target="_blank" rel="noopener noreferrer"></a>Create a new SQL user</h4>
<p>Open <a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15&amp;WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">SSMS</a> (as an Administrator) and create a new SQL user as a copy of the axdbadmin one. Then open the web.config file and update the DB user and password to use the one you’ve just created.</p>
<h4 id="0463-httpsaristeinfoenmsdyn365-azure-devops-almprepare-ssrs-optionalprepare-ssrs-optional">0.4.6.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#prepare-ssrs-optional" target="_blank" rel="noopener noreferrer"></a>Prepare SSRS (optional)</h4>
<p>If you want to deploy reports as part of your build pipeline you need to go to SSMS again (and as an Admin again), and open a new query in the reporting DB to execute the following query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">exec</span><span class="w"> </span><span class="n">DeleteEncryptedContent</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="0464-httpsaristeinfoenmsdyn365-azure-devops-almpowershell-scriptspowershell-scripts">0.4.6.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#powershell-scripts" target="_blank" rel="noopener noreferrer"></a>PowerShell Scripts</h4>
<p>The default build definition that runs on a build VM uses several PowerShell scripts to run some tasks. I’m adding an additional script called PrepareForAgent.</p>
<p>The scripts can be found in the C:\DynamicsSDK folder of the VM.</p>
<h5 id="04641-httpsaristeinfoenmsdyn365-azure-devops-almprepareforbuildprepareforbuild">0.4.6.4.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#prepareforbuild" target="_blank" rel="noopener noreferrer"></a>PrepareForBuild</h5>
<p>This script comes with the VM and <strong>we need to modify it</strong> to avoid one thing: the PackagesLocalDirectory backup which is usually done in the first build. We need to get rid of this or we’ll waste around an hour per run until the files are copied.</p>
<p>We don’t need this because our VM will be new each time we run the pipeline!</p>
<p>So open the script, go to line 696 and look for this piece of code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Create packages backup (if it does not exist).</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$NewBackupCreated</span> <span class="p">\=</span> <span class="nb">Backup-AX7Packages</span> <span class="p">\</span><span class="n">-BackupPath</span> <span class="nv">$PackagesBackupPath</span> <span class="p">\</span><span class="n">-DeploymentPackagesPath</span> <span class="nv">$DeploymentPackagesPath</span> <span class="p">\</span><span class="n">-LogLocation</span> <span class="nv">$LogLocation</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Restore packages backup (unless a new backup was just created).</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(!</span><span class="nv">$NewBackupCreated</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nb">Restore-AX7Packages</span> <span class="p">\</span><span class="n">-BackupPath</span> <span class="nv">$PackagesBackupPath</span> <span class="p">\</span><span class="n">-DeploymentPackagesPath</span> <span class="nv">$DeploymentPackagesPath</span> <span class="p">\</span><span class="n">-LogLocation</span> <span class="nv">$LogLocation</span> <span class="p">\</span><span class="n">-RestoreAllFiles</span><span class="err">:</span><span class="nv">$RestorePackagesAllFiles</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(!</span><span class="nv">$DatabaseBackupToRestore</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nv">$DatabaseBackupPath</span> <span class="p">\=</span> <span class="nb">Get-BackupPath</span> <span class="p">\</span><span class="n">-Purpose</span> <span class="s2">&#34;Databases&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nb">Backup-AX7Database</span> <span class="p">\</span><span class="n">-BackupPath</span> <span class="nv">$DatabaseBackupPath</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c"># Restore a database backup (if specified).</span>
</span></span><span class="line"><span class="cl"> <span class="nb">Restore-AX7Database</span> <span class="p">\</span><span class="n">-DatabaseBackupToRestore</span> <span class="nv">$DatabaseBackupToRestore</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We need to modify it until we end up with this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$DatabaseBackupToRestore</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nb">Restore-AX7Database</span> <span class="p">\</span><span class="n">-DatabaseBackupToRestore</span> <span class="nv">$DatabaseBackupToRestore</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We just need the DB restore part and skip the backup, otherwise we’ll be losing 45 minutes in each run for something we don’t need because the VM will be deleted when the build is completed.</p>
<h4 id="0465-httpsaristeinfoenmsdyn365-azure-devops-almoptional-but-recommended-install-d365fo-toolsoptional-but-recommended-install-d365fotoolshttpsgithubcomd365collaboratived365fotools">0.4.6.5. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#optional-but-recommended-install-d365fo-tools" target="_blank" rel="noopener noreferrer"></a><strong>Optional (but recommended)</strong>: install <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a></h4>
<p>Just run this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">d365fo</span><span class="p">.</span><span class="n">tools</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We can use the tools to do a module sync, partial sync or deploy just our reports instead of all.</p>
<h3 id="047-httpsaristeinfoenmsdyn365-azure-devops-almcreate-a-new-imagecreate-a-new-image">0.4.7. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-a-new-image" target="_blank" rel="noopener noreferrer"></a>Create a new image</h3>
<p>Once we’ve done all these prepare steps we can log out of this VM and stop it. <strong>Do not delete it yet!</strong> Go to “Create custom image”, give the new image a name, select “I have not generalized this virtual machine” and click the “OK” button.</p>
<p>This will generate a new image that you can use as a base image with all the changes you’ve done to the original VHD.</p>
<h3 id="048-httpsaristeinfoenmsdyn365-azure-devops-almazure-devops-pipelinesazure-devops-pipelines">0.4.8. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-devops-pipelines" target="_blank" rel="noopener noreferrer"></a>Azure DevOps Pipelines</h3>
<p>We’re ready to setup our new build pipeline in Azure DevOps. This pipeline will consist of three steps: create a new VM, run all the build steps, and delete the VM:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs4.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 15" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs4.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 53</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 15</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 53</figcaption>
    </figure></p>
<p>First of all check that your pipeline runs on Azure pipelines (aka Azure-hosted):</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-2.png.webp" title="DevTest Labs Azure Pipelines" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-2.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 54</h2><p>DevTest Labs Azure Pipelines</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 54</figcaption>
    </figure></p>
<p>DevTest Labs Azure Pipelines</p>
<p>The create and delete steps will run on the Azure Pipelines pool. The build step will run on our DevTestLabs pool, or the name you gave it when configuring the artifact on DevTest Labs or the script on the VM.</p>
<h4 id="0481-httpsaristeinfoenmsdyn365-azure-devops-almcreate-azure-devtest-labs-vmcreate-azure-devtest-labs-vm">0.4.8.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-azure-devtest-labs-vm" target="_blank" rel="noopener noreferrer"></a>Create Azure DevTest Labs VM</h4>
<p>Create a new pipeline and choose the “Use the classic editor” option. Make sure you’ve selected TFVC as your source and click “Continue” and “Empty job”. Add a new task to the pipeline, look for “Azure DevTest Labs Create VM”. We just need to fill in the missing parameters with our subscription, lab, etc.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs5.png.webp" title="Create VM Azure DevTest Labs" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/DevTestLabs5.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 55</h2><p>Create VM Azure DevTest Labs</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 55</figcaption>
    </figure></p>
<p>Create VM Azure DevTest Labs</p>
<p>Remember this step must run on the Azure-hosted pipeline.</p>
<h4 id="0482-httpsaristeinfoenmsdyn365-azure-devops-almbuildbuild">0.4.8.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#build" target="_blank" rel="noopener noreferrer"></a>Build</h4>
<p>This is an easy one. Just export a working pipeline and import it. And this step needs to run on your self-hosted pool:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-3.png.webp" title="Runs on self-hosted pool" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-3.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 56</h2><p>Runs on self-hosted pool</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 56</figcaption>
    </figure></p>
<p>Runs on self-hosted pool</p>
<h5 id="04821-httpsaristeinfoenmsdyn365-azure-devops-almoptional-use-selectivesync-not-recommended-see-next-optionoptional-use-selectivesync-not-recommended-see-next-option">0.4.8.2.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#optional-use-selectivesync-not-recommended-see-next-option" target="_blank" rel="noopener noreferrer"></a>Optional: use SelectiveSync (not recommended, see next option)</h5>
<p>You can replace the Database Sync task for a PowerShell script that will only sync the tables in your models:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-9.png.webp" title="SelectiveSync.ps1" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-9.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 57</h2><p>SelectiveSync.ps1</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 57</figcaption>
    </figure></p>
<p>SelectiveSync.ps1</p>
<p>Thanks Joris for the tip!</p>
<h5 id="04822-httpsaristeinfoenmsdyn365-azure-devops-almoptional-use-d365fo-tools-to-sync-your-packages-modelsoptional-use-d365fotools-to-sync-your-packagesmodels">0.4.8.2.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#optional-use-d365fo-tools-to-sync-your-packages-models" target="_blank" rel="noopener noreferrer"></a>Optional: use d365fo.tools to sync your packages/models</h5>
<p>This is a better option than the SelectiveSync above. You can synchronize your packages or models only to gain some time. This cmdlet uses sync.exe like Visual Studio does and should be better than SelectiveSync.</p>
<p>Add a new PowerShell task, select Inline Script and this is the command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Invoke-D365DbSyncModule</span> <span class="n">-Module</span> <span class="s2">&#34;Module1&#34;</span><span class="p">,</span> <span class="s2">&#34;Module2&#34;</span> <span class="n">-ShowOriginalProgress</span> <span class="n">-Verbose</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="04823-httpsaristeinfoenmsdyn365-azure-devops-almoptional-use-d365fo-tools-to-deploy-ssrs-reportsoptional-use-d365fotools-to-deploy-ssrs-reports">0.4.8.2.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#optional-use-d365fo-tools-to-deploy-ssrs-reports" target="_blank" rel="noopener noreferrer"></a>Optional: use d365fo.tools to deploy SSRS reports</h5>
<p>If you really want to add the report deployment step to your pipeline you can save some more extra time using <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a> and just deploy the reports in your models like we’ve done with the DB sync.</p>
<p>Run this in a new PowerShell task to do it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Publish-D365SsrsReport</span> <span class="n">-Module</span> <span class="n">YOUR</span><span class="p">\</span><span class="n">_MODULE</span> <span class="n">-ReportName</span> <span class="p">\*</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="0483-httpsaristeinfoenmsdyn365-azure-devops-almdelete-azure-devtest-labs-vmdelete-azure-devtest-labs-vm">0.4.8.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#delete-azure-devtest-labs-vm" target="_blank" rel="noopener noreferrer"></a>Delete Azure DevTest Labs VM</h4>
<p>It’s almost the same as the create step, complete the subscription, lab and VM fields and done:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image.png.webp" title="Delete VM" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 58</h2><p>Delete VM</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 58</figcaption>
    </figure></p>
<p>Delete VM</p>
<p>And this step, like the create one, will run on the Azure-hosted agent.</p>
<h4 id="0484-httpsaristeinfoenmsdyn365-azure-devops-almdependencies-and-conditionsdependencies-and-conditions">0.4.8.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#dependencies-and-conditions" target="_blank" rel="noopener noreferrer"></a>Dependencies and conditions</h4>
<p>When all three steps are configured we need to add dependencies and conditions to some of them. For example, to make sure that the delete VM step runs when the build step fails, but it doesn’t when the create VM step fails.</p>
<h5 id="04841-httpsaristeinfoenmsdyn365-azure-devops-almbuildbuild">0.4.8.4.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#build" target="_blank" rel="noopener noreferrer"></a>Build</h5>
<p>The build step depends on the create VM step, and will only run if the previous step succeeds:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-4.png.webp" title="Build step dependencies and conditions" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-4.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 59</h2><p>Build step dependencies and conditions</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 59</figcaption>
    </figure></p>
<p>Build step dependencies and conditions</p>
<h5 id="04842-httpsaristeinfoenmsdyn365-azure-devops-almdelete-vmdelete-vm">0.4.8.4.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#delete-vm" target="_blank" rel="noopener noreferrer"></a>Delete VM</h5>
<p>The delete step depends on all previous steps and must run when the create VM step succeeds. If the create step fails there’s no VM and we don’t need to delete it:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-5.png.webp" title="Dependencies and conditions on delete VM step" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-5.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 60</h2><p>Dependencies and conditions on delete VM step</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 60</figcaption>
    </figure></p>
<p>Dependencies and conditions on delete VM step</p>
<p>This is the custom condition we’ll use:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="n">and</span><span class="p">(</span><span class="n">always</span><span class="p">(),</span> <span class="n">eq</span><span class="p">(</span><span class="n">dependencies</span><span class="p">.</span><span class="n">Job</span><span class="err">\</span><span class="m">_1.</span><span class="n">status</span><span class="p">,</span> <span class="err">&#39;</span><span class="n">Succeeded</span><span class="err">&#39;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you need to know your first step’s job name just export the pipeline to YAML and you’ll find it there:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-6.png.webp" title="Export pipeline to YAML" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-6.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 61</h2><p>Export pipeline to YAML</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 61</figcaption>
    </figure></p>
<p>Export pipeline to YAML</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-7.png.webp" title="Job name on YAML" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-7.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 62</h2><p>Job name on YAML</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 62</figcaption>
    </figure></p>
<p>Job name on YAML</p>
<p>If this step fails when the pipeline is run, wait to delete the VM manually, first change the VM name in the delete step, save your pipeline and then use the dropdown to show the VMs in the selected subscription, and save the pipeline.</p>
<h3 id="049-httpsaristeinfoenmsdyn365-azure-devops-almrun-the-buildrun-the-build">0.4.9. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#run-the-build" target="_blank" rel="noopener noreferrer"></a>Run the build</h3>
<p>And, I think, we’re done and ready to run our Azure DevTest Labs pipeline for Dynamics 365 Finance and Operations… click “Run pipeline” and wait…</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-10-382x1024.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 16" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-10-382x1024.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 63</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 16</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 63</figcaption>
    </figure></p>
<p>Tadaaaa!!</p>
<h3 id="0410-httpsaristeinfoenmsdyn365-azure-devops-almtimestimes">0.4.10. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#times" target="_blank" rel="noopener noreferrer"></a>Times</h3>
<p>The pipeline from the image above is one with real code from a customer but I can’t compare the times with the Azure-hosted builds because there’s no sync, or tests there. Regarding the build time the Azure-hosted takes one minute less, but it needs to install the nugets first.</p>
<p>But for example this is a comparison I did:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/B2msVSB4ms.png.webp" title="Azure DevTest Labs B2ms vs B4ms" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/B2msVSB4ms.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 64</h2><p>Azure DevTest Labs B2ms vs B4ms</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 64</figcaption>
    </figure></p>
<p>Azure DevTest Labs B2ms vs B4ms</p>
<p>It takes around 1 hour to create the VM, build, do a full DB synch, deploy reports, run tests, generate a Deployable Package and, finally, delete the VM:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/Full.jpg.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 17" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/Full.jpg.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 65</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 17</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 65</figcaption>
    </figure></p>
<p>If you skip deploying the SSRS reports your build will run in 15 minutes less, that’s around 45 minutes.</p>
<p>If you use the partial sync process instead of a full DB sync it’ll be 5-7 minutes less.</p>
<p>This would leave us with a 35-40 minutes build.</p>
<h4 id="04101-httpsaristeinfoenmsdyn365-azure-devops-almcomparison-1comparison-1">0.4.10.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#comparison-1" target="_blank" rel="noopener noreferrer"></a>Comparison 1</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp1.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 18" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp1.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 66</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 18</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 66</figcaption>
    </figure></p>
<p>No DB Sync</p>
<p>The image above shows a simple package being compiled, without any table, so the selective sync goes really fast. The build times improve with VM size.</p>
<h4 id="04102-httpsaristeinfoenmsdyn365-azure-devops-almcomparison-2comparison-2">0.4.10.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#comparison-2" target="_blank" rel="noopener noreferrer"></a>Comparison 2</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp2.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 19" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/Dtcomp2.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 67</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 19</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 67</figcaption>
    </figure></p>
<p>Same code Full DB Sync</p>
<p>This one is compiling the same codebase but is doing a full DB sync. The sync time improves in the B4ms VM compared to the B2ms but it’s almost the same in the B8ms. Build times are better for larger VM sizes.</p>
<h4 id="04103-httpsaristeinfoenmsdyn365-azure-devops-almcomparison-3comparison-3">0.4.10.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#comparison-3" target="_blank" rel="noopener noreferrer"></a>Comparison 3</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2021/01/image-14.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 20" data-thumbnail="https://static.ariste.info/wp-content/uploads/2021/01/image-14.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 68</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 20</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 68</figcaption>
    </figure></p>
<p>Real code + full sync</p>
<p>And in the image above we see a more realistic build. The codebase is larger and we’re doing a full DB sync.</p>
<p>Similar as the comparison before there a good enhancement between a B2ms and a B4ms, but not between a B4ms and B8ms.</p>
<h3 id="0411-httpsaristeinfoenmsdyn365-azure-devops-almshow-me-the-moneyshow-me-the-money">0.4.11. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#show-me-the-money" target="_blank" rel="noopener noreferrer"></a>Show me the money!</h3>
<p>I think this is the interesting comparison. How did a Tier-1 MS-hosted build VM cost? Around 400€? How does it compare to using the Azure DevTest Labs alternative?</p>
<p>There’s only one fix cost when using Azure DevTest Labs: the blob storage where the VHD is uploaded. The VHD’s size is around 130GB and this should have a cost of, more or less, 5 euros/month. Keep in mind that <strong>you need to clean up your custom images when yours is prepared</strong>, the new ones are created as snapshots and also take space in the storage account.</p>
<p>Then we have the variable costs that come with the deployment of a VM each build but it’s just <strong>absurd</strong>. Imagine we’re using a B4ms VM, with a 256GB Premium SSD disk, we would pay 0.18€/hour for the VM plus the proportional part of 35.26€/month of the SSD disk, which would be like 5 cents/hour?</p>
<p>But this can run on a B2ms VM too which is half the compute price of the VM, down to 9 cents per hour.</p>
<p>If we run this build once a day each month, 30 times, the cost of a B4ms would be like… 7€? Add the blob storage and we’ll be paying <strong>12€ per month to run our builds with DB sync and tests</strong>.</p>
<p>Is it cheaper than deploying a cloud-hosted environment, and starting and stopping it using <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">the new d365fo.tools Cmdlets</a> each time we run the build? <strong>Yes it is!</strong> Because if we deploy a CHE we’ll be paying the price of the SSD disk for the whole month!</p>
<h3 id="0412-httpsaristeinfoenmsdyn365-azure-devops-almsome-final-remarkssome-final-remarks">0.4.12. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#some-final-remarks" target="_blank" rel="noopener noreferrer"></a>Some final remarks</h3>
<ol>
<li>I have accomplished this <strong>mostly through trial-and-error</strong>. There’s lots of enhancements and best practices to be applied to all the process, specially using an <a href="https://docs.microsoft.com/en-us/azure/key-vault/general/overview?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure Key Vault</a> to store all the secrets to be used in the Azure DevOps Agent artifact and the pipeline.</li>
<li>This in another clear example that <a href="https://ariste.info/en/2019/07/do-you-want-to-become-a-better-x-developer/" target="_blank" rel="noopener noreferrer">X++ developers need to step outside of X++</a> and Dynamics 365 FnO. We’re not X++ only developers anymore, we’re very lucky to be working on a product that is using Azure.</li>
<li>I’m sure there’s scenarios where using DevTest Labs to create a build VM is useful. Maybe not for an implementation partner, but maybe it is for an ISV partner. It’s just an additional option.</li>
<li>The only bad thing to me is that we need to apply the version upgrades manually to the VHDs because they’re published only twice a year.</li>
<li>As I said at the beginning of the post, it may have worked to me with all these steps, but if you try you maybe need to change some things. But it’s a good way to start.</li>
</ol>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almadd-and-build-net-projectsadd-and-build-net-projects"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#add-and-build-net-projects" target="_blank" rel="noopener noreferrer"></a>Add and build .NET projects</h2>
<p>I bet that most of us have had to develop some .NET class library to solve something in Dynamics 365 Finance and Operations. You create a C# project, build it, and add the DLL as a reference in your FnO project. Don’t do that anymore! You can add the .NET project to source control, build it in your pipeline, and the DLL gets added to the deployable package!</p>
<p>I’ve been trying this during the last days after a conversation on Yammer, and while I’ve managed to build .NET and X++ code in the same pipeline, I’ve found some issues or limitations.</p>
<h3 id="051-httpsaristeinfoenmsdyn365-azure-devops-almbuild-net-in-your-pipelinebuild-net-in-your-pipeline">0.5.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#build-net-in-your-pipeline" target="_blank" rel="noopener noreferrer"></a>Build .NET in your pipeline</h3>
<p><strong>Note</strong>: what I show in this post is done using the <a href="https://ariste.info/en/2020/05/azure-hosted-build-dynamics365-finance-scm/" target="_blank" rel="noopener noreferrer">Azure-hosted pipeline</a> but it should also be possible to do it using a self-hosted agent (aka old build VM).</p>
<p>The build step of the pipeline invokes <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019&amp;WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">msbuild.exe</a> which can build .NET code. If we check the logs of the build step we will see it:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-29-13_03_44.png.webp" title="msbuild.exe builds C# projects and our X&#43;&#43; ones too!" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-29-13_03_44.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 69</h2><p>msbuild.exe builds C# projects and our X&#43;&#43; ones too!</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 69</figcaption>
    </figure></p>
<p>msbuild.exe builds C# projects and our X++ ones too!</p>
<p>Remember that X++ is part of the .NET family after all… a second cousin or something like it.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-29-13_21_54.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 21" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-29-13_21_54.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 70</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 21</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 70</figcaption>
    </figure></p>
<p>Build folder</p>
<p>If you’ve read the blog post about <a href="https://ariste.info/en/2020/05/azure-hosted-build-dynamics365-finance-scm/" target="_blank" rel="noopener noreferrer">Azure-hosted builds</a> you must’ve seen I’m putting the solution that references all my models in a folder called Build at the root of my source control tree (left image).</p>
<p>That’s just a personal preference that helps me keep the .config files and the solution I use to build all the models in a single, separate place.</p>
<p>By using a solution and pointing the build process to use it I also keep control of what’s being built in a single place.</p>
<h3 id="052-httpsaristeinfoenmsdyn365-azure-devops-almadd-a-c-project-to-fnoadd-a-c-project-to-fno">0.5.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#add-a-c-project-to-fno" target="_blank" rel="noopener noreferrer"></a>Add a C# project to FnO</h3>
<p>Our first step will usually be creating a Finance and Operations project. Once it’s created we right-click on the solution and select “Add new project”. Then we select a Visual C# Class Library project:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-12_51_37.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 22" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-12_51_37.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 71</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 22</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 71</figcaption>
    </figure></p>
<p>C# project in Dynamics 365</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-12_54_25.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 23" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-12_54_25.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 72</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 23</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 72</figcaption>
    </figure></p>
<p>Now we should have a solution with a FnO Project and a C# project (right image).</p>
<p>To demo this I’ll create a class called Calculator with a single method that accepts two decimal values as parameters and returns it’s sum. An add method.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">Calculator</span> <span class="p">{</span> <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Add</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">a</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">Calculator</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Add</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">a</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">return</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now compile the C# project alone, not the whole solution. This will create the DLL in the bin folder of the project. We have to do this before adding the C# project as a reference to the FnO project.</p>
<p>Right click on the References node of the FnO project and select “Add Reference…”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_00_34.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 24" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_00_34.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 73</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 24</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 73</figcaption>
    </figure></p>
<p>Add reference to FnO project</p>
<p>A window will open and you should see the C# project in the “Projects” tab:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_01_58.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 25" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_01_58.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 74</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 25</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 74</figcaption>
    </figure></p>
<p>Add C# project reference to FnO project</p>
<p>Select it and click the Ok button. That will add the C# project as a reference to our FnO project, but we still need to do something or this won’t compile in our pipeline. We have to manually add the reference to the project that has been created in the AOT. So, right-click on the reference and select “Add to source control”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_31_10.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 26" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_31_10.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 75</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 26</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 75</figcaption>
    </figure></p>
<p>Add the reference to source control</p>
<p>In the FnO project add a Runnable Class, we’ll call the C# library there:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">AASBuildNetDemoLibrary</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AASBuildNetTest</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="n">Args</span> <span class="err">\</span><span class="m">_</span><span class="n">args</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="kt">var</span> <span class="n">calc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">        <span class="n">calc</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">AASBuildNetDemoLibrary</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AASBuildNetTest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="n">Args</span> <span class="err">\</span><span class="m">_</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="kt">var</span> <span class="n">calc</span> <span class="err">\</span><span class="p">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">calc</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Add the solution to source control if you haven’t, make sure all the objects are also added and check it in.</p>
<h3 id="053-httpsaristeinfoenmsdyn365-azure-devops-almbuild-pipelinebuild-pipeline">0.5.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#build-pipeline" target="_blank" rel="noopener noreferrer"></a>Build pipeline</h3>
<p>If I go to my Azure DevOps repo we’ll see the following:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_38_19.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 27" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_38_19.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 76</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 27</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 76</figcaption>
    </figure></p>
<p>Projects and objects</p>
<p>You can see I’ve checked-in the solution under the Build folder, as I said earlier this is my personal preference and I do that to keep the solutions I’ll use to build the code under control.</p>
<p>In my build pipeline I make sure I’m using this solution to build the code:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_43_12.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 28" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_43_12.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 77</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 28</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 77</figcaption>
    </figure></p>
<p>Build Dynamics 365 solution</p>
<p>Run the pipeline and when it’s done you can check the build step and you’ll see a line that reads:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">Copying</span> <span class="n">file</span> <span class="n">from</span> <span class="s2">&#34;D:\\a\\9\\s\\Build\\AASBuildNetDemo\\AASBuildNetDemoLibrary\\bin\\Debug\\AASBuildNetDemoLibrary.dll&#34;</span> <span class="n">to</span> <span class="s2">&#34;D:\\a\\9\\b\\AASDemo\\bin\\AASBuildNetDemoLibrary.dll&#34;</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And if you download the DP, unzip it, navigate to AOSService\Packages\files and unzip the file in there, then open the bin folder, you’ll see our library’s DLL there:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_52_47.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 29" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-30-13_52_47.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 78</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 29</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 78</figcaption>
    </figure></p>
<p>Victory!</p>
<h3 id="054-httpsaristeinfoenmsdyn365-azure-devops-almthings-i-dont-like-understand-need-to-investigatethings-i-dont-likeunderstandneed-to-investigate">0.5.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#things-i-dont-like-understand-need-to-investigate" target="_blank" rel="noopener noreferrer"></a>Things I don’t like/understand/need to investigate</h3>
<p>I’ve always done this with a single solution and only one C# project. I have some doubts about how this will work with many C# projects, models, solutions, etc.</p>
<p>For example, if a model has a dependency on the DLL but it’s built before the DLL the build will fail. I’m sure there’s a way to set an order to solve dependencies like there is for FnO projects within a solution.</p>
<p>Or maybe I could try building all the C#/.NET projects before, pack them in a nuget and use the DLLs later in the FnO build, <a href="https://msdyn365fo.wordpress.com/2020/08/13/integration-of-nuget-packages-from-azure-devops-artifacts-into-the-dynalm-process/" target="_blank" rel="noopener noreferrer">something similar to what Paul Heisterkamp explained in his blog</a>.</p>
<p>Anyway, it’s your choice how to manage your C# projects and what solution fits your workflow the best, but at least you’ve got an example here 🙂</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almsetup-release-pipelinessetup-release-pipelines"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#setup-release-pipelines" target="_blank" rel="noopener noreferrer"></a>Setup Release Pipelines</h2>
<p>We’ve seen how the default build definition is created and how we can modify it. Now we’ll see how to configure our release pipelines!</p>
<p>The release pipelines allow us to automatically deploy our Deployable Packages to a Tier 2+ environment. This is part of the Continuous Delivery (CD) strategy. We can only do this for the UAT environments, it’s not possible to automate the deployment to the production environment.</p>
<h3 id="061-httpsaristeinfoenmsdyn365-azure-devops-almsetting-up-release-pipeline-in-azure-devops-for-dynamics-365-for-finance-and-operationssetting-up-release-pipeline-in-azure-devops-for-dynamics-365-for-finance-and-operations">0.6.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#setting-up-release-pipeline-in-azure-devops-for-dynamics-365-for-finance-and-operations" target="_blank" rel="noopener noreferrer"></a>Setting up Release Pipeline in Azure DevOps for Dynamics 365 for Finance and Operations</h3>
<p>To configure the release pipeline, we need:</p>
<ul>
<li>AAD app registration</li>
<li>LCS project</li>
<li>An Azure DevOps project linked to the LCS project above</li>
<li>A service account</li>
</ul>
<p>I recommend a service account to do this, with a non-expiring password and no MFA enabled. It must have enough privileges on LCS, Azure and Azure DevOps too. This is not mandatory and can be done even with your user (if it has enough rights) for testing purposes, but if you’re setting this up don’t use your user and go for a service account.</p>
<h3 id="062-httpsaristeinfoenmsdyn365-azure-devops-almaad-app-creationaad-app-creation">0.6.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#aad-app-creation" target="_blank" rel="noopener noreferrer"></a>AAD app creation</h3>
<p>The first step to take is creating an app registration on Azure Active Directory to upload the generated deployable package to LCS. Head to <a href="https://portal.azure.com/" target="_blank" rel="noopener noreferrer">Azure portal</a>  and once logged in go to Azure ActiveDirectory, then App Registrations and create a new Native app:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/New-AAD-App.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 30" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/New-AAD-App.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 79</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 30</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 79</figcaption>
    </figure></p>
<p>Next go to “Settings” and “Required permissions” to add the Dynamics Lifecycle Services API:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/Add-permission.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 31" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/Add-permission.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 80</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 31</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 80</figcaption>
    </figure></p>
<p>In the dialog that will open change to the “APIs my organization uses” tab and select “Dynamics Lifecycle Services”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/LCS.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 32" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/LCS.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 81</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 32</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 81</figcaption>
    </figure></p>
<p>Select the only available permission in the next screen and click on the “Add permissions” button. Finally press the “Grant admin consent” button to apply the changes. This last step can be easily forgotten and the package upload to LCS cannot be done if not granted. Once done take note of the Application ID, we’ll use it later.</p>
<h3 id="063-httpsaristeinfoenmsdyn365-azure-devops-almcreate-the-release-pipeline-in-devopscreate-the-release-pipeline-in-devops">0.6.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-the-release-pipeline-in-devops" target="_blank" rel="noopener noreferrer"></a>Create the release pipeline in DevOps</h3>
<p>Go to Azure DevOps, and to Pipelines -&gt; Releases to create the new release. Select “New release pipeline” and choose “Empty job” from the list.</p>
<p>On the artifact box select the build which will be used for this release definition:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.33.40-1024x467.png.webp" title="New release" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.33.40-1024x467.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 82</h2><p>New release</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 82</figcaption>
    </figure></p>
<p>Pick the build definition you want to use for the release in “Source”, “Latest” in “Default version” and push “Add”.</p>
<h4 id="0631-httpsaristeinfoenmsdyn365-azure-devops-almupload-to-lcsupload-to-lcs">0.6.3.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#upload-to-lcs" target="_blank" rel="noopener noreferrer"></a>Upload to LCS</h4>
<p>The next step we’ll take is adding a Task with the release pipeline for Dynamics. Go to the Tasks tab and press the plus button. A list with extension will appear, look for “Dynamics 365 Unified Operations Tools”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.39.39-1024x279.png.webp" title="Dynamics 365 Unified Operations Tools" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.39.39-1024x279.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 83</h2><p>Dynamics 365 Unified Operations Tools</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 83</figcaption>
    </figure></p>
<p>If the extension hasn’t been added previously it can be done in this screen. <strong>In order to add it, the user used to create the release must have admin rights on the Azure DevOps account, not only in the project in which we’re creating the pipeline</strong>.</p>
<p>When the task is created we need to fill some parameters:![Release Dynamics Operations](./MSDyn365 &amp; Azure DevOps ALM - ariste.info_files/Captura-de-pantalla-2019-02-03-a-les-0.43.11-1024x508.png.webp &ldquo;MSDyn365 &amp; Azure DevOps ALM 84&rdquo;)</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.43.11-1024x508.png.webp" title="Release Dynamics Operations" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.43.11-1024x508.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 84</h2><p>Release Dynamics Operations</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 84</figcaption>
    </figure></p>
<h4 id="0632-httpsaristeinfoenmsdyn365-azure-devops-almapply-deployable-packageapply-deployable-package">0.6.3.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#apply-deployable-package" target="_blank" rel="noopener noreferrer"></a>Apply deployable package</h4>
<p>This step is finally available for self-service environments! If you already set this for a regular environment you can still change the task to the new version.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-04-10_55_48.png.webp" title="Azure DevOps asset deployment" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-04-10_55_48.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 85</h2><p>Azure DevOps asset deployment</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 85</figcaption>
    </figure></p>
<p>Azure DevOps asset deployment</p>
<p>The new task version 1 works for both type of environments: Microsoft managed (regular environments) and self-service environments. The task version 0 is the old one and will only work with regular environments. You can safely switch your deploy tasks to version 1.</p>
<p>What’s different in task version 1? I guess that some work behind it that we don’t see to make it support self-service, but in the UI we only see a new field called “<em>Name for the update</em>“.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-04-10_59_39.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 33" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-04-10_59_39.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 86</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 33</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 86</figcaption>
    </figure></p>
<p>Name for the update field</p>
<p>This field is needed only for the self-service environments deployments, it will be ignored for regular ones, and corresponds to the field with the same name that appears on LCS when we apply an update to a sandbox environment:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-04-11_05_10.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 34" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/09/2020-09-04-11_05_10.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 87</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 34</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 87</figcaption>
    </figure></p>
<p>Name for this update in LCS</p>
<p>The default field’s value is the variable $(Release.ReleaseName) that is the name of the release, but you can change it, for example I’ll be using a pattern like <em>PREFIX BRANCH $(Build.BuildNumber)</em> to have the same name we have for the builds and identifying what we’re deploying to prod quickier.</p>
<h3 id="064-httpsaristeinfoenmsdyn365-azure-devops-almcreating-the-lcs-connectioncreating-the-lcs-connection">0.6.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#creating-the-lcs-connection" target="_blank" rel="noopener noreferrer"></a>Creating the LCS connection</h3>
<p>The first step in the task is setting up the link to LCS using the AAD app we created before. Press New and let’s fill the fields in the following screen:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/05/LCS-in-Azure-DevOps.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 35" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/05/LCS-in-Azure-DevOps.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 88</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 35</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 88</figcaption>
    </figure></p>
<p>It’s only necessary to fill in the connection name, username, password (from the user and Application (Client) ID fields. Use the App ID we got in the first step for the App ID field. The endpoint fields should be automatically filled in. Finally, press OK and the LCS connection is ready.</p>
<p>In the LCS Project Id field, use the ID from the LCS project URL, for example in <a href="https://lcs.dynamics.com/V2/ProjectOverview/1234567" target="_blank" rel="noopener noreferrer">https://lcs.dynamics.com/V2/ProjectOverview/1234567</a> the project is is 1234567.</p>
<p>Press the button next to “File to upload” and select the deployable package file generated by the build:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.53.30.png.webp" title="DP Generado" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.53.30.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 89</h2><p>DP Generado</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 89</figcaption>
    </figure></p>
<p>If the build definition hasn’t been modified, the output DP will have a name like AXDeployableRuntime_VERSION_BUILDNUMBER.zip. Change the fixed Build Number for the DevOps variable $(Build.BuildNumber) like in the image below:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.56.20-1024x87.png.webp" title="BUildNumber" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-0.56.20-1024x87.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 90</h2><p>BUildNumber</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 90</figcaption>
    </figure></p>
<p>The package name and description in LCS are defined in “LCS Asset Name” and “LCS Asset Description”. For these fields, Azure DevOps’ <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">build variables</a> and <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/variables?view=azure-devops&amp;tabs=batch&amp;WT.mc_id=DOP-MVP-5003976#default-variables" target="_blank" rel="noopener noreferrer">release variables</a> can be used. Use whatever fits your project, for example a prefix to distinguish between prod and pre-prod packages followed by $(Build.BuildNumber), will upload the DP to LCS with a name like Prod 2019.1.29.1, using the date as a DP name.</p>
<p>Save the task and release definition and let’s test it. In the Releases select the one we have just created and press the “Create a release” button, in the dialog just press OK. The release will start and, if everything is OK we’ll see the DP in LCS when it finishes:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-1.05.05.png.webp" title="LCS Asset Library" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-1.05.05.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 91</h2><p>LCS Asset Library</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 91</figcaption>
    </figure></p>
<p>The release part can be automated, just press the lightning button on the artifact and enable the trigger:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-1.08.21.png.webp" title="Release trigger" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/02/Captura-de-pantalla-2019-02-03-a-les-1.08.21.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 92</h2><p>Release trigger</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 92</figcaption>
    </figure></p>
<p>And that’s all! Now the build and the releases are both configured. Once the deployment package is published the CI scenario will be complete.</p>
<h1 id="httpsaristeinfoenmsdyn365-azure-devops-almmore-automationmore-automation"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#more-automation" target="_blank" rel="noopener noreferrer"></a>More automation!</h1>
<p>I’ve already explained in the past how to automate the builds, create the <a href="https://docs.microsoft.com/en-us/azure/devops/learn/what-is-continuous-integration?WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">CI builds</a> and create the release pipelines on Azure DevOps, what I want to talk about in this post is about adding a little bit more automation.</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almbuildsbuilds"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#builds" target="_blank" rel="noopener noreferrer"></a>Builds</h2>
<p>In the build definition go to the “Triggers” tab and enable a scheduled build:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_05_38-AXZ-Main-Build-DP-Daily-16.30-Azure-DevOps-Services.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 36" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_05_38-AXZ-Main-Build-DP-Daily-16.30-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 93</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 36</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 93</figcaption>
    </figure></p>
<p>This will automatically trigger the build at the time and days you select. In the example image, every weekday at 16.30h a new build will be launched. <strong>But</strong> everyday? Nope! What the “Only schedule builds if the source or pipeline has changed” checkbox below the time selector makes is <strong>only triggering the build if there’s been any change to the codebase</strong>, meaning that if there’s no changeset checked-in during that day no build will be triggered.</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almreleasesreleases"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#releases" target="_blank" rel="noopener noreferrer"></a>Releases</h2>
<p>First step done, let’s see what can we do with the releases:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_14_04-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 37" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_14_04-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 94</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 37</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 94</figcaption>
    </figure></p>
<p>The release pipeline in the image above is the one that launches after the build I’ve created in the first step. For this pipeline I’ve added the following:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_16_53-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 38" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_16_53-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 95</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 38</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 95</figcaption>
    </figure></p>
<p>The continuous deployment trigger has been enabled, meaning that after the build finishes this release will be automatically run. No need to define a schedule but you could also do that.</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_20_35-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 39" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-26-11_20_35-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 96</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 39</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 96</figcaption>
    </figure></p>
<p>As you can see, the schedule screen is exactly the same as in the builds, even the changed pipeline checkbox is there.  You can use any of these two approaches, CD or scheduled release, it’s up to your project or team needs.</p>
<p>With these two small steps you can have your full CI and CD strategy automatized and update a UAT environment each night to have all the changes done during that day ready for testing, with no human interaction!</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almbut-i-like-to-add-some-human-touch-to-itbut-i-like-to-add-some-human-touch-to-it"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#but-i-like-to-add-some-human-touch-to-it" target="_blank" rel="noopener noreferrer"></a>But I like to add some human touch to it</h2>
<p>If you don’t like not knowing if an environment is being updated… well <strong>that’s IMPOSSIBLE</strong> because LCS will SPAM you to make sure you know what’s going on. But if you don’t want to be completely replaced by robots you can add approvals to your release flow:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-09_59_15-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 40" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-09_59_15-AXZ-Prod-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 97</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 40</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 97</figcaption>
    </figure></p>
<p>Clicking the left lightning + person button on your release you can set the approvers, a person or a group (which is quite practical), and the kind of approval (all or single approver) and the timeout. You will also receive an email with a link to the approval form:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-09_52_47-AXZ-Dev-Release-Daily-16.30-Release-41-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 41" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-09_52_47-AXZ-Dev-Release-Daily-16.30-Release-41-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 98</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 41</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 98</figcaption>
    </figure></p>
<p>And you can also postpone the deployment! <a href="https://www.youtube.com/watch?v=StTqXEQ2l-Y" target="_blank" rel="noopener noreferrer">Everything is awesome!</a></p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almextra-bonusextra-bonus"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#extra-bonus" target="_blank" rel="noopener noreferrer"></a>Extra bonus!</h2>
<p>A little tip. Imagine you have the following release:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_09_39-AXZ-Golden-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 42" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_09_39-AXZ-Golden-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 99</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 42</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 99</figcaption>
    </figure></p>
<p>This will update 3 environments, but will also upload the same Deployable Package three times to LCS. Wouldn’t it be nice to have a single upload and that all the deployments used that file? Yes, but we can’t pass the output variable from the upload to other stages 🙁 Yes that’s unfortunately right. But we can do something with a little help from our friend Powershell!</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almupdate-a-variable-in-a-releaseupdate-a-variable-in-a-release"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#update-a-variable-in-a-release" target="_blank" rel="noopener noreferrer"></a>Update a variable in a release</h2>
<p>What we need to do is create a variable in the release definition and set its scope to “Release”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_14_57-AXZ-Dev-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 43" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_14_57-AXZ-Dev-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 100</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 43</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 100</figcaption>
    </figure></p>
<p>Then, <strong>for each stage</strong>, we need to enable this checkbox in the agent job:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_26_29-AXZ-Dev-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 44" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_26_29-AXZ-Dev-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 101</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 44</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 101</figcaption>
    </figure></p>
<p>I explain later why we’re enabling this. We now only need to update this variable after uploading the DP to LCS. Add an inline Powershell step after the upload one and do this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="err">#</span> <span class="n">Populate</span> <span class="n">store</span> <span class="k">value</span> <span class="n">to</span> <span class="n">update</span> <span class="n">pipeline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">assetId</span><span class="err">\</span><span class="p">=</span> <span class="s">&#34;$(GoldenUpload.FileAssetId)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Write</span><span class="err">\</span><span class="p">-</span><span class="n">Output</span> <span class="p">(</span><span class="err">&#39;##</span><span class="n">vso</span><span class="err">\</span><span class="p">[</span><span class="n">task</span><span class="p">.</span><span class="n">setvariable</span> <span class="n">variable</span><span class="p">=</span><span class="n">localAsset</span><span class="err">\</span><span class="p">]{</span><span class="m">0</span><span class="p">}</span><span class="err">&#39;</span> <span class="err">\</span><span class="p">-</span><span class="n">f</span> <span class="err">$</span><span class="n">assetId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#region variables</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">ReleaseVariableName</span> <span class="err">\</span><span class="p">=</span> <span class="err">&#39;</span><span class="n">axzfileid</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">releaseurl</span> <span class="err">\</span><span class="p">=</span> <span class="p">(</span><span class="err">&#39;</span><span class="p">{</span><span class="m">0</span><span class="p">}{</span><span class="m">1</span><span class="p">}/</span><span class="err">\</span><span class="m">_</span><span class="n">apis</span><span class="p">/</span><span class="n">release</span><span class="p">/</span><span class="n">releases</span><span class="p">/{</span><span class="m">2</span><span class="p">}?</span><span class="n">api</span><span class="p">-</span><span class="n">version</span><span class="p">=</span><span class="m">5.0</span><span class="err">&#39;</span> <span class="err">\</span><span class="p">-</span><span class="n">f</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="n">env</span><span class="p">:</span><span class="n">SYSTEM</span><span class="err">\</span><span class="m">_</span><span class="n">TEAMFOUNDATIONSERVERURI</span><span class="p">),</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="n">env</span><span class="p">:</span><span class="n">SYSTEM</span><span class="err">\</span><span class="m">_</span><span class="n">TEAMPROJECTID</span><span class="p">),</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="n">env</span><span class="p">:</span><span class="n">RELEASE</span><span class="err">\</span><span class="m">_</span><span class="n">RELEASEID</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span><span class="n">endregion</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#region Get Release Definition</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Write</span><span class="err">\</span><span class="p">-</span><span class="n">Host</span> <span class="s">&#34;URL: $releaseurl&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">Release</span> <span class="err">\</span><span class="p">=</span> <span class="n">Invoke</span><span class="err">\</span><span class="p">-</span><span class="n">RestMethod</span> <span class="err">\</span><span class="p">-</span><span class="n">Uri</span> <span class="err">$</span><span class="n">releaseurl</span> <span class="err">\</span><span class="p">-</span><span class="n">Headers</span> <span class="err">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">Authorization</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;Bearer $env:SYSTEM\_ACCESSTOKEN&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span><span class="n">endregion</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#region Output current Release Pipeline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span><span class="n">Write</span><span class="p">-</span><span class="n">Output</span> <span class="p">(</span><span class="err">&#39;</span><span class="n">Release</span> <span class="n">Pipeline</span> <span class="n">variables</span> <span class="n">output</span><span class="p">:</span> <span class="p">{</span><span class="m">0</span><span class="p">}</span><span class="err">&#39;</span> <span class="p">-</span><span class="n">f</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="n">Release</span><span class="p">.</span><span class="n">variables</span> <span class="p">|</span> <span class="err">#</span><span class="n">ConvertTo</span><span class="p">-</span><span class="n">Json</span> <span class="p">-</span><span class="n">Depth</span> <span class="m">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span><span class="n">endregion</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span><span class="n">Update</span> <span class="n">axzfileid</span> <span class="n">with</span> <span class="k">new</span> <span class="k">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">release</span><span class="p">.</span><span class="n">variables</span><span class="p">.(</span><span class="err">$</span><span class="n">ReleaseVariableName</span><span class="p">).</span><span class="k">value</span> <span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">assetId</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#region update release pipeline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Write</span><span class="err">\</span><span class="p">-</span><span class="n">Output</span> <span class="p">(</span><span class="err">&#39;</span><span class="n">Updating</span> <span class="n">Release</span> <span class="n">Definition</span><span class="err">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">json</span> <span class="err">\</span><span class="p">=</span> <span class="err">@</span><span class="p">(</span><span class="err">$</span><span class="n">release</span><span class="p">)</span> <span class="p">|</span> <span class="n">ConvertTo</span><span class="err">\</span><span class="p">-</span><span class="n">Json</span> <span class="err">\</span><span class="p">-</span><span class="n">Depth</span> <span class="m">99</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">enc</span> <span class="err">\</span><span class="p">=</span> <span class="err">\</span><span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="err">\</span><span class="p">]::</span><span class="n">UTF8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">json</span><span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">enc</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="err">$</span><span class="n">json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Invoke</span><span class="err">\</span><span class="p">-</span><span class="n">RestMethod</span> <span class="err">\</span><span class="p">-</span><span class="n">Uri</span> <span class="err">$</span><span class="n">releaseurl</span> <span class="err">\</span><span class="p">-</span><span class="n">Method</span> <span class="n">Put</span> <span class="err">\</span><span class="p">-</span><span class="n">Body</span> <span class="err">$</span><span class="n">json</span> <span class="err">\</span><span class="p">-</span><span class="n">ContentType</span> <span class="s">&#34;application/json&#34;</span> <span class="err">\</span><span class="p">-</span><span class="n">Headers</span> <span class="err">@</span><span class="p">{</span><span class="n">Authorization</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;Bearer $env:SYSTEM\_ACCESSTOKEN&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span><span class="n">endregion</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You need to change the following:</p>
<ul>
<li>Line 2: $assetId= “$(GoldenUpload.FileAssetId)”. Change $(GoldenUpload.FileAssetId) for your output variable name.</li>
<li>Line 6: $ReleaseVariableName = ‘axzfileid’. Change axzfileid for your Release variable name.</li>
</ul>
<p>And you’re done. This script uses Azure DevOps’ REST API to update the variable value with the file id, and we enabled the OAuth token checkbox to allow the usage of this API without having to pass any user credentials. This is not my idea obviously, I’ve done <a href="https://stefanstranger.github.io/2019/06/26/PassingVariablesfromStagetoStage/" target="_blank" rel="noopener noreferrer">this thanks to this post from Stefan Stranger’s blog</a>.</p>
<p>Now, in the deploy stages you need to retrieve your variable’s value in the following way:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_21_02-AXZ-Dev-Release-Daily-16.30-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 45" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/2019-10-27-11_21_02-AXZ-Dev-Release-Daily-16.30-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 102</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 45</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 102</figcaption>
    </figure></p>
<p><strong>Don’t forget the ( ) or it won’t work!</strong></p>
<p>And with these small changes you can have a release like this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2019/10/pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 46" data-thumbnail="https://static.ariste.info/wp-content/uploads/2019/10/pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 103</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 46</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 103</figcaption>
    </figure></p>
<p>With a single DP upload to LCS and multiple deployments using the file uploaded in the first stage. With approvals, and delays, and emails, and everything!</p>
<h1 id="httpsaristeinfoenmsdyn365-azure-devops-almlcs-db-apilcs-db-api"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#lcs-db-api" target="_blank" rel="noopener noreferrer"></a>LCS DB API</h1>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almcall-the-lcs-database-movement-api-from-your-azure-devops-pipelinescall-the-lcs-database-movement-api-from-your-azure-devops-pipelines"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#call-the-lcs-database-movement-api-from-your-azure-devops-pipelines" target="_blank" rel="noopener noreferrer"></a>Call the LCS Database Movement API from your Azure DevOps Pipelines</h2>
<h3 id="211-httpsaristeinfoenmsdyn365-azure-devops-almwhat-forwhat-for">2.1.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#what-for" target="_blank" rel="noopener noreferrer"></a>What for?</h3>
<p>Basically, <a href="https://ariste.info/en/2019/10/devops-alm-automation-in-microsoft-dynamics-365-for-finance-and-operations/" target="_blank" rel="noopener noreferrer">automation</a>. Right now <strong>the API only allows the refresh from one Microsoft Dynamics 365 for Finance and Operations environment to another</strong>, so the idea is having fresh data from production in our UAT environments <strong>daily</strong>. I don’t know which new operations the API will support in the future but another idea could be adding the DB export operation (creating a bacpac) to the pipeline and having a copy of prod ready to be restored in a Dev environment.</p>
<p>Don’t forget that the API has a limit of <strong>3 refresh operations per environment per 24 hours</strong>. Don’t do this on a CI build! (it makes no sense either). Probably the best idea is to run this nightly with all your tests, once a day.</p>
<h3 id="212-httpsaristeinfoenmsdyn365-azure-devops-almcalling-the-apicalling-the-api">2.1.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#calling-the-api" target="_blank" rel="noopener noreferrer"></a>Calling the API</h3>
<p>I’ll use PowerShell to call the API from a pipeline. PowerShell has a command called <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7&amp;WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">Invoke-RestMethod</a> that makes HTTP/HTTPS requests. It’s really easy and we just need to do the same we did to call the API in my post.</p>
<h4 id="2121-httpsaristeinfoenmsdyn365-azure-devops-almgetting-the-tokengetting-the-token">2.1.2.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#getting-the-token" target="_blank" rel="noopener noreferrer"></a>Getting the token</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="err">$</span><span class="n">projectId</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;1234567&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">tokenUrl</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;https://login.microsoftonline.com/common/oauth2/token&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">clientId</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;12345678-abcd-432a-0666-22de4c4321aa&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">clientSecret</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;superSeCrEt12345678&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">username</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;youruser@tenant.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">password</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;strongerThan123456&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">tokenBody</span> <span class="err">\</span><span class="p">=</span> <span class="err">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">grant</span><span class="err">\</span><span class="m">_</span><span class="n">type</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;password&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">client</span><span class="err">\</span><span class="m">_</span><span class="n">id</span> <span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">clientId</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">client</span><span class="err">\</span><span class="m">_</span><span class="n">secret</span> <span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">clientSecret</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">resource</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;https://lcsapi.lcs.dynamics.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">username</span> <span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">username</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">password</span> <span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">password</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">tokenResponse</span> <span class="err">\</span><span class="p">=</span> <span class="n">Invoke</span><span class="err">\</span><span class="p">-</span><span class="n">RestMethod</span> <span class="err">\</span><span class="p">-</span><span class="n">Method</span> <span class="err">&#39;</span><span class="n">POST</span><span class="err">&#39;</span> <span class="err">\</span><span class="p">-</span><span class="n">Uri</span> <span class="err">$</span><span class="n">tokenUrl</span> <span class="err">\</span><span class="p">-</span><span class="n">Body</span> <span class="err">$</span><span class="n">tokenBody</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">token</span> <span class="err">\</span><span class="p">=</span> <span class="err">$</span><span class="n">tokenResponse</span><span class="p">.</span><span class="n">access</span><span class="err">\</span><span class="m">_</span><span class="n">token</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To get the token we’ll use this script. Just change the variables for the ones of your project, AAD App registration, user (remember it needs access to the preview) and password and run it. If everything is OK you’ll get the JSON response in the $tokenResponse variable and from there you can get the token’s value using dot notation.</p>
<h4 id="2122-httpsaristeinfoenmsdyn365-azure-devops-almrequesting-the-db-refreshrequesting-the-db-refresh">2.1.2.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#requesting-the-db-refresh" target="_blank" rel="noopener noreferrer"></a>Requesting the DB refresh</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="err">$</span><span class="n">projectId</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;1234567&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">sourceEnvironmentId</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;fad26410-03cd-4c3e-89b8-85d2bddc4933&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">targetEnvironmentId</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;cab68410-cd13-9e48-12a3-32d585aaa548&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">refreshUrl</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;https://lcsapi.lcs.dynamics.com/databasemovement/v1/databases/project/$projectId/source/$sourceEnvironmentId/target/$targetEnvironmentId&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">refreshHeader</span> <span class="err">\</span><span class="p">=</span> <span class="err">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">Authorization</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;Bearer $token&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;x-ms-version&#34;</span> <span class="err">\</span><span class="p">=</span> <span class="err">&#39;</span><span class="m">2017</span><span class="p">-</span><span class="m">09</span><span class="p">-</span><span class="m">15</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;Content-Type&#34;</span> <span class="err">\</span><span class="p">=</span> <span class="s">&#34;application/json&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="n">refreshResponse</span> <span class="err">\</span><span class="p">=</span> <span class="n">Invoke</span><span class="err">\</span><span class="p">-</span><span class="n">RestMethod</span> <span class="err">$</span><span class="n">refreshUrl</span><span class="p">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="err">\</span><span class="p">-</span><span class="n">Method</span> <span class="err">&#39;</span><span class="n">POST</span><span class="err">&#39;</span> <span class="err">\</span><span class="p">-</span><span class="n">Headers</span> <span class="err">$</span><span class="n">refreshHeader</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This will be the call to trigger the refresh. We’ll need the token we’ve just obtained in the first step to use it in the header and the source and target environment Ids.</p>
<p>If it’s successful the response will be a 200 OK.</p>
<h3 id="213-httpsaristeinfoenmsdyn365-azure-devops-almadd-it-to-your-pipelineadd-it-to-your-pipeline">2.1.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#add-it-to-your-pipeline" target="_blank" rel="noopener noreferrer"></a>Add it to your pipeline</h3>
<p>Adding this to an Azure DevOps pipeline is no mistery. Select and edit your pipeline, I’m doing it on a nigthly build (it’s called continuous but it’s not…) that runs after the environment has been updated with code, and add a new PowerShell task:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/01/2020-01-26-19_33_00-AXZ-Dev-Continuous-Build-Azure-DevOps-Services.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 47" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/01/2020-01-26-19_33_00-AXZ-Dev-Continuous-Build-Azure-DevOps-Services.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 104</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 47</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 104</figcaption>
    </figure></p>
<p>Select the task and change it to “Inline”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/01/2020-01-26-19_24_42-AXZ-Prod-Release-Daily-18h-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 48" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/01/2020-01-26-19_24_42-AXZ-Prod-Release-Daily-18h-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 105</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 48</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 105</figcaption>
    </figure></p>
<p>Then just paste the script we’ve created in the Script field and done! You’ll get a refresh after the tests!</p>
<p>You can also run this on your release pipeline <strong>BUT</strong> if you do it after the deploy step remember to mark the “Wait for Completion” option or the operation will fail because the environment will already be servicing! And even then it could fail if the servicing goes over the timeout time. So… <strong>don’t run this on your release pipeline</strong>!</p>
<p>And that’s all. Let’s which new operations will be added to the API and what we can do with them.</p>
<h3 id="214-httpsaristeinfoenmsdyn365-azure-devops-almuse-d365fo-tools-in-your-azure-pipelineuse-d365fotools-in-your-azure-pipeline">2.1.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#use-d365fo-tools-in-your-azure-pipeline" target="_blank" rel="noopener noreferrer"></a>Use d365fo.tools in your Azure Pipeline</h3>
<p>Thanks to <a href="https://ariste.info/en/2020/01/calling-the-lcs-database-movement-api-in-your-azure-devops-pipeline/#comment-77" target="_blank" rel="noopener noreferrer">Mötz’s comment</a> pointing me to how to add d365fo.tools to a hosted pipeline I’ve created a pipeline which will install the tools and run the commands. It’s even easier to do than with the Invoke-RestMethod.</p>
<h4 id="2141-httpsaristeinfoenmsdyn365-azure-devops-almbut-firstbut-first">2.1.4.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#but-first" target="_blank" rel="noopener noreferrer"></a>But first…</h4>
<p>Make sure that in your Azure Active Directory app registration you’ve selected “Treat application as a public client” under Authentication:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/01/2020-02-06-15_56_47-LCSDBAPIPreview-Authentication-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 49" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/01/2020-02-06-15_56_47-LCSDBAPIPreview-Authentication-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 106</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 49</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 106</figcaption>
    </figure></p>
<h4 id="2142-httpsaristeinfoenmsdyn365-azure-devops-almthe-taskthe-task">2.1.4.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#the-task" target="_blank" rel="noopener noreferrer"></a>The task</h4>
<p>First we need to install d365fo.tools and then we can use its commands to call the LCS API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">Install</span><span class="p">\</span><span class="n">-PackageProvider</span> <span class="n">nuget</span> <span class="p">\</span><span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="p">\</span><span class="n">-Force</span> <span class="p">\</span><span class="n">-Confirm</span><span class="err">:</span><span class="nv">$false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Install</span><span class="p">\</span><span class="n">-Module</span> <span class="p">\</span><span class="n">-Name</span> <span class="n">AZ</span> <span class="p">\</span><span class="n">-AllowClobber</span> <span class="p">\</span><span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="p">\</span><span class="n">-Force</span> <span class="p">\</span><span class="n">-Confirm</span><span class="err">:</span><span class="nv">$False</span> <span class="p">\</span><span class="n">-SkipPublisherCheck</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Install</span><span class="p">\</span><span class="n">-Module</span> <span class="p">\</span><span class="n">-Name</span> <span class="n">d365fo</span><span class="p">.</span><span class="n">tools</span> <span class="p">\</span><span class="n">-AllowClobber</span> <span class="p">\</span><span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="p">\</span><span class="n">-Force</span> <span class="p">\</span><span class="n">-Confirm</span><span class="err">:</span><span class="nv">$false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Get</span><span class="p">\</span><span class="n">-D365LcsApiToken</span> <span class="p">\</span><span class="n">-ClientId</span> <span class="s2">&#34;{YOUR\_APP\_ID}&#34;</span> <span class="p">\</span><span class="n">-Username</span> <span class="s2">&#34;{USERNAME}&#34;</span> <span class="p">\</span><span class="n">-Password</span> <span class="s2">&#34;{PASSWORD}&#34;</span> <span class="p">\</span><span class="n">-LcsApiUri</span> <span class="s2">&#34;https://lcsapi.lcs.dynamics.com&#34;</span> <span class="p">\</span><span class="n">-Verbose</span> <span class="p">|</span> <span class="n">Set</span><span class="p">\</span><span class="n">-D365LcsApiConfig</span> <span class="p">\</span><span class="n">-ProjectId</span> <span class="n">1234567</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Invoke</span><span class="p">\</span><span class="n">-D365LcsDatabaseRefresh</span> <span class="p">\</span><span class="n">-SourceEnvironmentId</span> <span class="s2">&#34;958ae597-f089-4811-abbd-c1190917eaae&#34;</span> <span class="p">\</span><span class="n">-TargetEnvironmentId</span> <span class="s2">&#34;13cc7700-c13b-4ea3-81cd-2d26fa72ec5e&#34;</span> <span class="p">\</span><span class="n">-SkipInitialStatusFetch</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see it a bit easier to do the refresh using d365fo.tools. We get the token and pipeline the output to the Set-D365LcsApiConfig command which will store the token (and others). This also helps to not having to duplicate AppIds, users, etc. and as you can see to call the refresh operation we just need the source and target environment Ids!</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almautomating-prod-to-dev-db-copiesautomating-prod-to-dev-db-copies"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#automating-prod-to-dev-db-copies" target="_blank" rel="noopener noreferrer"></a>Automating Prod to Dev DB copies</h2>
<p>The new LCS DB API endpoint to <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/database/api/v1/reference-create-export?WT.mc_id=BA-MVP-5003976" target="_blank" rel="noopener noreferrer">create a database export</a> has been published! With it we now have a way of <strong>automating and scheduling a database refresh from your Dynamics 365 FnO production environment to a developer or Tier 1 VM</strong>.</p>
<p><figure><a class="lightgallery" href="https://i2.wp.com/ariste.info/wp-content/uploads/2020/04/D96E7A98-2B35-4C5E-95F5-E1DF9091CE1E-scaled.jpeg?fit=1024%2C783&amp;ssl=1" title="Using the LCS DB API" data-thumbnail="https://i2.wp.com/ariste.info/wp-content/uploads/2020/04/D96E7A98-2B35-4C5E-95F5-E1DF9091CE1E-scaled.jpeg?fit=1024%2C783&amp;ssl=1" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 107</h2><p>Using the LCS DB API</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 107</figcaption>
    </figure></p>
<p>Using the LCS DB API</p>
<h3 id="221-httpsaristeinfoenmsdyn365-azure-devops-almthe-bacpac-issuethe-bacpac-issue">2.2.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#the-bacpac-issue" target="_blank" rel="noopener noreferrer"></a>The bacpac issue</h3>
<p>One of the main setbacks we currently have with prod DB refreshes is that it’s not a quick thing to do because you need to:</p>
<ul>
<li>Refresh a Tier 2+ environment with prod’s DB</li>
<li>Export a <a href="https://docs.microsoft.com/en-us/sql/relational-databases/data-tier-applications/data-tier-applications?view=sql-server-ver15&amp;WT.mc_id=DOP-MVP-5003976#bacpac" target="_blank" rel="noopener noreferrer">bacpac</a> from the Tier 2+ environment</li>
<li>Restore the bacpac on a Tier 1 VM.</li>
</ul>
<p>This happens because Tier 2+ environments use Azure SQL as the DB engine and Tier 1 VMs use SQL Server.</p>
<p>The time it takes to complete the process depends on the size of the database and the performance of the VM you’ll restore it to. But <strong>it’s not a fast process at all</strong>. For a 60GB database you’ll get a bacpac around 7GB that will take:</p>
<ul>
<li>1 to 2 hours to refresh to UAT</li>
<li>2 to 4 hours for the bacpac to be exported</li>
<li>At least 4 hours to restore it to a Tier 1 VM.</li>
</ul>
<p>That’s between 7 and 11 hours until you have the DB on a developer machine. Once it’s there you can quickly get a BAK and share it. But you might need the time of a full working day to have that data available.</p>
<h3 id="222-httpsaristeinfoenmsdyn365-azure-devops-almsave-us-lcs-db-apisave-us-lcs-db-api">2.2.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#save-us-lcs-db-api" target="_blank" rel="noopener noreferrer"></a>Save us LCS DB API!</h3>
<p>Thanks to the new LCS DB API’s endpoint we can perform all these steps automatically, and with the help of <a href="https://github.com/d365collaborative/d365fo.tools" target="_blank" rel="noopener noreferrer">d365fo.tools</a> it’ll be even easier. But first…</p>
<p>Due to the extensive time it takes to complete all the process, <strong>we first have to decide a schedule</strong> (daily, weekly, etc.) and then this schedule must be compatible with the release cadence to UAT/Prod, because <strong>only one operation at a time can be done</strong>.</p>
<p>There’s still another problem but I’ll talk about it after seeing the scripts.</p>
<h3 id="223-httpsaristeinfoenmsdyn365-azure-devops-almmy-proposalmy-proposal">2.2.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#my-proposal" target="_blank" rel="noopener noreferrer"></a>My proposal</h3>
<p>To do the last part of the LCS DB API flow from prod to dev, we need a Tier 1 VM where the bacpac will be restored. My idea is <strong>using the build VM on Microsoft’s subscription</strong> and an Azure DevOps pipeline to run all the scripts that will restore the DB in that VM. It’s an underused machine and it fits perfectly to this purpose.</p>
<p>I want to clarify why I’ve thought about doing this using the build VM. In most cases this VM will be doing nothing during the night, maybe only running some tests, and it’s during that period of time when I suggest doing all this. But be aware that depending on your DB size this won’t be possible or you’ll run out of space after 2 o 3 restores.</p>
<p>So think about deploying an extra VM and install an agent there to do this, whatever you do <strong>don’t mess with the build VM if you don’t know what you’re doing</strong>! Try this on a dev VM or anywhere else if you’re afraid of breaking something. <strong>Remember you’ll lose the capacity to generate DPs and run pipelines if this environments breaks</strong>!</p>
<p>This post is just an example of a possible solution, you need to decide what suits you best! <strong>End of the update</strong>.</p>
<p>As I said before I’ll be using <a href="https://twitter.com/splaxi" target="_blank" rel="noopener noreferrer">Mötz Jensen</a>‘s d365fo.tools, we could do everything without them but that would be a bit stupid because using the tools is easier, faster and makes everything clearer.</p>
<p>I’ve separated all the steps in 3 Powershell scripts: execute the refresh, export the bacpac and restore the bacpac.</p>
<h4 id="2231-httpsaristeinfoenmsdyn365-azure-devops-almrefresh-databaserefresh-database">2.2.3.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#refresh-database" target="_blank" rel="noopener noreferrer"></a>Refresh database</h4>
<p>This will refresh the prod environmnet to a Tier 2+:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$clientId</span> <span class="p">\=</span> <span class="s2">&#34;ab12345-6220-4566-896a-19a4ad41783f&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$userName</span> <span class="p">\=</span> <span class="s2">&#34;admin@tenant&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$passWord</span> <span class="p">\=</span> <span class="s2">&#34;admin123456&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$projectId</span> <span class="p">\=</span> <span class="s2">&#34;1234567&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$sourceEnvId</span> <span class="p">\=</span> <span class="s2">&#34;958bc863-f089-4811-abbd-c1190917eaae&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$targetEnvId</span> <span class="p">\=</span> <span class="s2">&#34;13aa6872-c13b-4ea3-81cd-2d26fa72ec5e&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Get-D365LcsApiToken</span> <span class="p">\</span><span class="n">-ClientId</span> <span class="nv">$clientId</span> <span class="p">\</span><span class="n">-Username</span> <span class="nv">$userName</span> <span class="p">\</span><span class="n">-Password</span> <span class="nv">$passWord</span> <span class="p">\</span><span class="n">-LcsApiUri</span> <span class="s2">&#34;https://lcsapi.lcs.dynamics.com&#34;</span> <span class="p">\</span><span class="n">-Verbose</span> <span class="p">|</span> <span class="n">Set</span><span class="p">\</span><span class="n">-D365LcsApiConfig</span> <span class="p">\</span><span class="n">-ProjectId</span> <span class="nv">$projectId</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Invoke-D365LcsDatabaseRefresh</span> <span class="p">\</span><span class="n">-SourceEnvironmentId</span> <span class="nv">$sourceEnvId</span> <span class="p">\</span><span class="n">-TargetEnvironmentId</span> <span class="nv">$targetEnvId</span> <span class="p">\</span><span class="n">-SkipInitialStatusFetch</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2232-httpsaristeinfoenmsdyn365-azure-devops-almexport-databaseexport-database">2.2.3.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#export-database" target="_blank" rel="noopener noreferrer"></a>Export database</h4>
<p>This part will trigger the bacpac export from the Tier 2+ environment which we’ve just refreshed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$sourceEnvId</span> <span class="p">\=</span> <span class="s2">&#34;958bc863-f089-4811-abbd-c1190917eaae&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$targetEnvId</span> <span class="p">\=</span> <span class="s2">&#34;13aa6872-c13b-4ea3-81cd-2d26fa72ec5e&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Get-D365LcsApiConfig</span> <span class="p">|</span> <span class="nb">Invoke-D365LcsApiRefreshToken</span> <span class="p">|</span> <span class="n">Set</span><span class="p">\</span><span class="n">-D365LcsApiConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Invoke-D365LcsDatabaseExport</span> <span class="p">\</span><span class="n">-SourceEnvironmentId</span> <span class="nv">$targetEnvId</span> <span class="p">\</span><span class="n">-BackupName</span> <span class="nv">$bacpacName</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2233-httpsaristeinfoenmsdyn365-azure-devops-almrestore-bacpacrestore-bacpac">2.2.3.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#restore-bacpac" target="_blank" rel="noopener noreferrer"></a>Restore bacpac</h4>
<p>And the final step will download the bacpac and restore it to a new database:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$currentDate</span> <span class="p">\=</span> <span class="nb">Get-Date</span> <span class="p">\</span><span class="n">-Format</span> <span class="n">yyyymmdd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$bacpacName</span> <span class="p">\=</span> <span class="s2">&#34;UAT{0}&#34;</span> <span class="p">\</span><span class="o">-f</span> <span class="nv">$currentDate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$downloadPath</span> <span class="p">\=</span> <span class="s2">&#34;D:\\UAT{0}.bacpac&#34;</span> <span class="p">\</span><span class="o">-f</span> <span class="nv">$currentDate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$newDBName</span> <span class="p">\=</span> <span class="s2">&#34;AxDB\_{0}&#34;</span> <span class="p">\</span><span class="o">-f</span> <span class="nv">$currentDate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Get-D365LcsApiConfig</span> <span class="p">|</span> <span class="nb">Invoke-D365LcsApiRefreshToken</span> <span class="p">|</span> <span class="n">Set</span><span class="p">\</span><span class="n">-D365LcsApiConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$backups</span> <span class="p">\=</span> <span class="nb">Get-D365LcsDatabaseBackups</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$fileLocation</span> <span class="p">\=</span> <span class="nv">$backups</span><span class="p">\[</span><span class="n">0</span><span class="p">\].</span><span class="n">FileLocation</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Invoke-D365AzCopyTransfer</span> <span class="p">\</span><span class="n">-SourceUri</span> <span class="nv">$fileLocation</span> <span class="p">\</span><span class="n">-DestinationUri</span> <span class="nv">$downloadPath</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Import-D365Bacpac</span> <span class="p">\</span><span class="n">-ImportModeTier1</span> <span class="p">\</span><span class="n">-BacpacFile</span> <span class="nv">$downloadPath</span> <span class="p">\</span><span class="n">-NewDatabaseName</span> <span class="nv">$newDBName</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2234-httpsaristeinfoenmsdyn365-azure-devops-almusing-it-in-an-azure-devops-pipelineusing-it-in-an-azure-devops-pipeline">2.2.3.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#using-it-in-an-azure-devops-pipeline" target="_blank" rel="noopener noreferrer"></a>Using it in an Azure DevOps pipeline</h4>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-19-13_04_40.png.webp" title="Azure DevOps pipeline" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/04/2020-04-19-13_04_40.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 108</h2><p>Azure DevOps pipeline</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 108</figcaption>
    </figure></p>
<p>Azure DevOps pipeline</p>
<p>This is it. Create a Powershell script, place it in the Build VM and call it in your pipeline. This is only valid for the agent hosted in the build VM. Everything can probably be run in an Azure hosted agent, but I’ll not cover it here because I think that using the build VM, where we can restore the DB, is more useful to us.</p>
<h3 id="224-httpsaristeinfoenmsdyn365-azure-devops-almtimingtiming">2.2.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#timing" target="_blank" rel="noopener noreferrer"></a>Timing</h3>
<p>These 3 scripts will call the LCS DB API to refresh, export and restore the DB. But there’s the timing issue.</p>
<p>Refreshing the database takes some time and exporting it too. You need to find a way to control the status of the operations. The LCS DB API offers an operation you can use to get the status of the ongoing operation. Using d365fo.tools:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Get-D365LcsDatabaseRefreshStatus</span> <span class="p">\</span><span class="n">-OperationActivityId</span> <span class="n">123456789</span> <span class="p">\</span><span class="n">-EnvironmentId</span> <span class="s2">&#34;99ac6587-c13b-4ea3-81cd-2d26fa72ec5e&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can choose to control that inside your Powershell scripts, but if we use the agent on the build VM that means we cannot use it for anything else until everything is done.</p>
<p>That’s why I separated the process in 3 steps. You can manually schedule 3 pipelines, one for each step at the times <strong>you know</strong> each stage ends. Then you can choose the order: export, restore, refresh or refresh, export, restore.</p>
<p>You could also use <a href="https://docs.microsoft.com/en-us/windows/win32/taskschd/task-scheduler-start-page?WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">Windows Task Scheduler</a> and forget about AZDO Pipelines, but we’re not doing that because we love pipelines.</p>
<p>And that’s all, we finally have a way of moving data without having to do it manually, we can schedule it, but we need to take some decisions on how we’ll do things. And I’ll leave that up to you 🙂</p>
<h1 id="httpsaristeinfoenmsdyn365-azure-devops-almsecure-your-azure-pipelines-with-azure-key-vaultsecure-your-azure-pipelines-with-azure-key-vault"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#secure-your-azure-pipelines-with-azure-key-vault" target="_blank" rel="noopener noreferrer"></a>Secure your Azure Pipelines with Azure Key Vault</h1>
<p>But <strong>creating a pipeline with a password in plain sight was not very secure</strong>. How could we add extra security to a pipeline? Once again we can turn to an Azure tool to help us, the <a href="https://azure.microsoft.com/en-us/services/key-vault/" target="_blank" rel="noopener noreferrer">Azure Key Vault</a>.</p>
<h1 id="httpsaristeinfoenmsdyn365-azure-devops-almazure-key-vaultazure-key-vault"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#azure-key-vault" target="_blank" rel="noopener noreferrer"></a>Azure Key Vault</h1>
<p>A Key Vault is a service that allows us to <strong>safely store certificates or secrets</strong> and later use them in our applications and services. And like many other Azure services <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/" target="_blank" rel="noopener noreferrer">it has a cost</a> but it’s really low and, for a normal use, you will be billed like a cent or none a month. Don’t be stingy with security!</p>
<p>You might already know about Azure Key Vault because we can use it in Microsoft Dynamics 365 for Finance and Operations under System Administration. For example it’s how the company certificates for the Spanish SII or Brazilian NF-e are stored and later retrieved to call the web services.</p>
<h2 id="httpsaristeinfoenmsdyn365-azure-devops-almsecuring-your-azure-devops-pipelinessecuring-your-azure-devops-pipelines"><a href="https://ariste.info/en/msdyn365-azure-devops-alm/#securing-your-azure-devops-pipelines" target="_blank" rel="noopener noreferrer"></a>Securing your Azure DevOps Pipelines</h2>
<p>Thanks to the <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-key-vault?view=azure-devops&amp;WT.mc_id=DOP-MVP-5003976" target="_blank" rel="noopener noreferrer">Azure Key Vault task</a> (which is <a href="https://github.com/microsoft/azure-pipelines-tasks" target="_blank" rel="noopener noreferrer">open source like many other tasks</a>) getting a secret from a Key Vault has no secret (<a href="https://www.youtube.com/watch?v=ObpcGNCU944" target="_blank" rel="noopener noreferrer">badum tssss</a>).</p>
<h3 id="411-httpsaristeinfoenmsdyn365-azure-devops-almcreate-a-key-vaultcreate-a-key-vault">4.1.1. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#create-a-key-vault" target="_blank" rel="noopener noreferrer"></a>Create a Key Vault</h3>
<p>Go to your Azure subscription and look for Key Vaults in the top search bar. If you don’t have an Azure subscription you can get one <strong>free with a credit of 170€/200$ for 30 days</strong> and try this or other things.</p>
<p>In the Key Vault page click on “Create key vault” and fill the fields</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-13_54_14-Create-key-vault-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 50" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-13_54_14-Create-key-vault-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 109</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 50</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 109</figcaption>
    </figure></p>
<p>You can go through other tabs but I will just click “Review &amp; Create” to create the vault.</p>
<h3 id="412-httpsaristeinfoenmsdyn365-azure-devops-almadd-the-task-to-devopsadd-the-task-to-devops">4.1.2. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#add-the-task-to-devops" target="_blank" rel="noopener noreferrer"></a>Add the task to DevOps</h3>
<p>Now go to Azure DevOps and create a new pipeline or edit an existing one. Add a task to the agent job and look for azure key vault:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-13_57_08-New-release-pipeline-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 51" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-13_57_08-New-release-pipeline-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 110</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 51</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 110</figcaption>
    </figure></p>
<p>It’s possible that you might need to get the task from the marketplace first, if so remember you need to have enough right on the organization and not only the AZDO project you’re in. Now go to the task and select your subscription:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_00_18-New-release-pipeline-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 52" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_00_18-New-release-pipeline-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 111</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 52</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 111</figcaption>
    </figure></p>
<p>Once selected click the “Authorize” button. <strong>This will create a service principal in your subscription</strong>, we’ll use it later. After authorizing you just need to select the key vault you’ve created in the first step. And back to Azure.</p>
<h3 id="413-httpsaristeinfoenmsdyn365-azure-devops-almsetup-and-secret-creationsetup-and-secret-creation">4.1.3. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#setup-and-secret-creation" target="_blank" rel="noopener noreferrer"></a>Setup and secret creation</h3>
<p>Go to your key vault, “Access policies” and click “Add Access Policy”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_05_51-aaristeDevOps-Access-policies-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 53" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_05_51-aaristeDevOps-Access-policies-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 112</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 53</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 112</figcaption>
    </figure></p>
<p>When we authorized the task to access our Azure subscription it created a service principal now we need to select it to <strong>list and get the secrets</strong> to be able to use them in our pipeline. Click on “Select principal”:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_08_17-Add-access-policy-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 54" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_08_17-Add-access-policy-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 113</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 54</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 113</figcaption>
    </figure></p>
<p>In the search bar type your subscription’s name, the principal should start with it and end with the same ID of your subscription. Select it and click the “Select” button at the bottom:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_10_21-axz-dev01dev.northeurope.cloudapp.azure_.com_61012-Remote-Desktop-Connection.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 55" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_10_21-axz-dev01dev.northeurope.cloudapp.azure_.com_61012-Remote-Desktop-Connection.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 114</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 55</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 114</figcaption>
    </figure></p>
<p>Now click on the “Secret permissions” lookup and under “Secret Management Operations” select Get and List:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_12_13-Add-access-policy-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 56" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_12_13-Add-access-policy-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 115</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 56</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 115</figcaption>
    </figure></p>
<p>If you want to also use certificates or keys you should do the same. Finally click the “Add” button and <strong>don’t forget to click “Save”!!</strong> Otherwise nothing will be saved:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_13_42-aaristeDevOps-Access-policies-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 57" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_13_42-aaristeDevOps-Access-policies-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 116</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 57</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 116</figcaption>
    </figure></p>
<p>Now we can create a secret in the key vault. Go to secrets and click on “Generate/Import”, complete the fields and finally click on the “Create” button:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_15_55-Create-a-secret-Microsoft-Azure.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 58" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_15_55-Create-a-secret-Microsoft-Azure.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 117</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 58</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 117</figcaption>
    </figure></p>
<h3 id="414-httpsaristeinfoenmsdyn365-azure-devops-almusing-the-secrets-in-your-pipelinesusing-the-secrets-in-your-pipelines">4.1.4. <a href="https://ariste.info/en/msdyn365-azure-devops-alm/#using-the-secrets-in-your-pipelines" target="_blank" rel="noopener noreferrer"></a>Using the secrets in your pipelines</h3>
<p>We’re ready to use the secret in our pipeline. I will add a PowerShell task to call the LCS DB API using d365fo.tools but I’ll change all the variables to the secrets:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># Write your PowerShell commands here.</span>
</span></span><span class="line"><span class="cl"><span class="n">Install</span><span class="p">\</span><span class="n">-PackageProvider</span> <span class="n">nuget</span> <span class="p">\</span><span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="p">\</span><span class="n">-Force</span> <span class="p">\</span><span class="n">-Confirm</span><span class="err">:</span><span class="nv">$false</span>
</span></span><span class="line"><span class="cl"><span class="n">Install</span><span class="p">\</span><span class="n">-Module</span> <span class="p">\</span><span class="n">-Name</span> <span class="n">AZ</span> <span class="p">\</span><span class="n">-AllowClobber</span> <span class="p">\</span><span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="p">\</span><span class="n">-Force</span> <span class="p">\</span><span class="n">-Confirm</span><span class="err">:</span><span class="nv">$False</span> <span class="p">\</span><span class="n">-SkipPublisherCheck</span>
</span></span><span class="line"><span class="cl"><span class="n">Install</span><span class="p">\</span><span class="n">-Module</span> <span class="p">\</span><span class="n">-Name</span> <span class="n">d365fo</span><span class="p">.</span><span class="n">tools</span> <span class="p">\</span><span class="n">-AllowClobber</span> <span class="p">\</span><span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="p">\</span><span class="n">-Force</span> <span class="p">\</span><span class="n">-Confirm</span><span class="err">:</span><span class="nv">$false</span>
</span></span><span class="line"><span class="cl"><span class="n">Get</span><span class="p">\</span><span class="n">-D365LcsApiToken</span> <span class="p">\</span><span class="n">-ClientId</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="n">myAppId</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">\</span><span class="n">-Username</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="n">myUserName</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">\</span><span class="n">-Password</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="n">mySecretPassword</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">\</span><span class="n">-LcsApiUri</span> <span class="s2">&#34;https://lcsapi.lcs.dynamics.com&#34;</span> <span class="p">\</span><span class="n">-Verbose</span> <span class="p">|</span> <span class="n">Set</span><span class="p">\</span><span class="n">-D365LcsApiConfig</span> <span class="p">\</span><span class="n">-ProjectId</span> <span class="p">$(</span><span class="n">myProjectId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Get</span><span class="p">\</span><span class="n">-D365LcsDatabaseBackups</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see now even the AAD App Id is masked.</p>
<p>What the Azure Key Vault task does is getting the secrets from Azure and storing them in variables when the pipeline runs:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_23_26-New-release-pipeline-1-Release-1-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 59" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_23_26-New-release-pipeline-1-Release-1-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 118</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 59</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 118</figcaption>
    </figure></p>
<p>Then we can access it’s value with the $(variableName) notation in the PowerShell script. If you try to print the secrets’ values using the Write-Host command all you’ll get will be three asterisks, so you can see that using the Key Vault is more than safe. If we check the result of running the Get-D365LcsDatabaseBackups command we’ll see how good is this:</p>
<p><figure><a class="lightgallery" href="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_28_01-New-release-pipeline-1-Release-1-Pipelines.png.webp" title="MSDyn365 &amp;amp; Azure DevOps ALM 60" data-thumbnail="https://static.ariste.info/wp-content/uploads/2020/02/2020-02-08-14_28_01-New-release-pipeline-1-Release-1-Pipelines.png.webp" data-sub-html="<h2>MSDyn365 &amp; Azure DevOps ALM 119</h2><p>MSDyn365 &amp;amp; Azure DevOps ALM 60</p>">
        
    </a><figcaption class="image-caption">MSDyn365 & Azure DevOps ALM 119</figcaption>
    </figure></p>
<p>The ProjectId value <strong>is not printed because it was one of our secret values</strong>!</p>
<p>And this is how you can add extra security to your Dev ALM!</p>
]]></description>
</item><item>
    <title>Automate testing Dynamics 365 Finance &amp; Operations</title>
    <link>https://nuxulu.com/news/2100-01-01-automate-your-tests-for-dynamics-365-finance/</link>
    <pubDate>Fri, 01 Jan 2021 00:00:00 &#43;0000</pubDate><author>luan52@outlook.com</author><guid>https://nuxulu.com/news/2100-01-01-automate-your-tests-for-dynamics-365-finance/</guid>
    <description><![CDATA[<p>A new article for you the community. More specifically, all project managers, functional and technical consultants, as well as customer-side decision-makers on the deployment of Dynamics 365 Finance and Operations.</p>
<p>I told myself that it would be important to offer you a global article on all the testing capabilities (manual or automatic) for Dynamics 365 Finance and Operations. It is the result of quite a long work but which I hope will help you to improve your code delivery and upgrade processes.</p>
<p>As you know, updates to version 10.x are monthly and therefore require operational tests on a regular basis ! I don’t know for you, but for some customers that I know it can take almost 1 week or more for 3 consultants…</p>
<p>In addition, if you want to be in an agile process of continuous delivery in production, it is often necessary to take time with the Key Users or the IT team to ensure that we do not have a regression in any part of the ERP. The more development you add, the longer and more difficult it will be to test all of your processes: this will therefore lower the quality of your deployments and repetitions of bugs in the chain: which will necessarily have a cost but also psychological in trust of the tool and your team.</p>
<p>For my part, I know that this part is often the least urgent in a process, however if this is done from the start of your GoLive and in continuity, you will gain enormously, therefore automating your tests as much as possible to allow time your team to manage more strategic cases (training, designs) that a machine will not be able to automate. This is the motto of the PowerAutomate tool of the PowerPlatform :</p>
<blockquote>
<p>“Take Care of what’s important. Automate the rest”</p>
</blockquote>
<p>Before going into the details of each testing feature that you can use with Dynamics 365 for Finance and Operations, it is important to clarify a few things, such as :</p>
<ul>
<li>
<p>You CAN’T test everything… well automatically in fact. As you will see in this article, testing some SSRS Reports, layouts, interfaces or other tools will be very complicated to achieve, and a machine is not a human… So keep in mind that all these features will help you to automate <strong>as much as possible</strong> long tests process, but you will need to do something… Like of course analyzing Plan test reports, see errors log, correct them, tests manual process : but at the end, maybe you will gain 90% of your testing time ! So clearly I invite you to use all the elements that I will present to you.</p>
</li>
<li>
<p>I will not go very deeper in each parts, because it will be too long ! So of course, you can go directly in each Microsoft documentations to go further in details. But keep in mind, that all documentations are presented separately and it seemed important to me to report everything to you in a single document.</p>
</li>
<li>
<p><strong>Data integration testing</strong></p>
<p>Do not use RSAT (as you will see after) for integration tests, instead rely on the data management framework (also known as DIXF). <a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/data-task-automation?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">The Data task automation framework</a> enables you to configure and automate the testing of your data integration scenarios.</p>
</li>
</ul>
<hr>
<p>Now, we can go !</p>
<p>So, in Dynamics 365 Finance and Operations, you have <strong>3 parts</strong> of testing.</p>
<p>While the functional validation of an ERP application can’t be fully data agnostic, there are multiple phases and approaches for testing. These testing phases include:</p>
<ul>
<li>
<p>SysTest framework</p>
</li>
<li>
<p>ATL frameowrk</p>
</li>
<li>
<p>Regression Suite Automation Tool (RSAT)</p>
</li>
</ul>
<ol>
<li><strong>Overview</strong></li>
</ol>
<hr>
<ul>
<li>
<p><strong>SysTest framework</strong> – The SysTest framework is reliable for writing unit tests. Because unit tests are generally testing a method or function, they should always be data agnostic and dependent only on the input data that is provided as part of the test.</p>
</li>
<li>
<p><strong>ATL framework</strong> – Microsoft has an ATL framework that is an abstraction on the SysTest framework and makes functional test writing much more simple and reliable. This framework should be used for writing component tests or simple integration tests.</p>
</li>
<li>
<p><strong>RSAT</strong> – The RSAT is used for integration tests and business cycle tests. The business cycle tests, also called the regression validation tests, are dependent on existing data. However, these tests can become data agnostic if you consider additional factors.</p>
<ul>
<li>
<p>Where unit tests and component tests are low level and can fully be data agnostic (not dependent on existing dataset), the business cycle or regression validation tests are dependent on some existing data. This data includes setup, configuration settings (parameters), and master data (customer, vendors, items, etc.), but never transaction data. Make sure that during the test, if any of these are being changed, that they are reverted back as part of the final test.</p>
</li>
<li>
<p>Select master data based on certain criteria instead of selecting a particular record. For example, if you want to select an item based on its dimension values and stock availability, filter the product list with those values, select the first item, and copy the number to be used for future tests. If it’s a simple master data line such as customer, vendor, or item, it can be created as part of the automation and used in future tests through chaining.</p>
</li>
<li>
<p>Enter the unique identifiers, such as invoice numbers, through the number sequence or by using Microsoft Excel functions such as =TEXT(NOW(),&ldquo;yyyymmddhhmm&rdquo;). This function will provide a unique number every minute, which allows you to track when the action happened. This can be used for variables such as product receipt numbers and vendor invoice numbers. These tests continue to work on the same database again and again, without requiring any restoration.</p>
</li>
<li>
<p>Always set the <strong>Edit mode</strong> of the environment to <strong>Read</strong> or <strong>Edit</strong> as the first test case because the default option is <strong>Auto</strong>. The <strong>Auto</strong> options always uses the previous setting and can cause unreliable tests. You can change it in the TEST account that will be used in RSAT (User Option)</p>
</li>
<li>
<p>Only validate after you filter on a particular transaction instead of generic validation. For example, for the number of records, filter for the transaction number or the transaction date so that the validation excludes all other transactions.</p>
</li>
<li>
<p>If you are checking a customer balance or budget check, save the value first and then add your transaction value to validate the expected result instead of validating a fixed expected value.</p>
</li>
</ul>
</li>
</ul>
<p></p>
<p>![rsat-data-agnostic-testing-01.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/rsat-data-agnostic-testing-01.png)</p>
<hr>
<ol start="2">
<li><strong>1/ LCS &lt;=&gt; BPM &lt;=&gt; AzureDevOps (via Task Recorder)</strong></li>
</ol>
<hr>
<p>You aren&rsquo;t required to use the Business process modeler (BPM) tool in LCS. However, BPM is the recommended tool if you want to enable the management and distribution of test libraries across projects and tenants. These capabilities are especially useful for Microsoft partners and independent software vendors (ISVs). BPM enables the distribution of test libraries as part of LCS solutions. If you are not using BPM, you can manually create test cases in Azure DevOps and attach developer recording files to your Azure DevOps test cases. You can create developer recording files directly from the Task recorder pane.</p>
<p>On my side, I will show you how to create BPM in LCS before going to record all my process with the Task Recorders.</p>
<p>So, go to your LCS project first. I will assume also that you have already connect LCS and Azure DevOps together.</p>
<p>You can after go to the Business Process Modeler part.</p>
<p></p>
<p>![Screenshot 2020-04-20_21-19-53-857.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_21-19-53-857.png)</p>
<p>As you will notice here, you have your own BPM and also some done by Microsoft. Of course, in your own company/customer, it’s somehow complicated to have a standard &amp; global but it will be helpful to check the Microsoft BPM to see how it works.</p>
<p></p>
<p>![Screenshot 2020-04-20_21-21-34-605.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_21-21-34-605.png)</p>
<p>On my side I will create a complete new one to handle testing purpose. “Normally” before a GoLive it’s a task very highly recommended to do with your Key Users, Project Manager and Functional Consultant.</p>
<p></p>
<p>![Screenshot 2020-04-20_21-25-13-784.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_21-25-13-784.png)</p>
<p>So as you can see, I’ve created a very basic one, just for an example. My process is only to model my customer creation process.</p>
<p>After you can add other child flows, dependent processes etc…</p>
<p>Also in BPM, you can have a VISIO model of Flow charts, of all your process in the ERP, has defined in LCS. It can be also a good way to add requirements in AzureDevOps before jumping to do customization. Clearly it’s high level definition, but useful also to not forget some specific process, as well as doing some tutorials practices based on that : as you will see also in Task Recorder, you can do your training documentation with screenshots. That’s why if you do it at the very beginning stage of your implementation, all these process conception will help you not just for testing purpose after or before GoLive !!<br>
If you want to learn more, you’ll to go there in the Microsoft documentation below :</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/lifecycle-services/bpm-overview?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">Learn more on BPM in LCS</a></p>
<p>Now that I’ve done my BPM in LCS, i will need to go to FinOps instance to record all my process flow.</p>
<p><strong><em>Quick tips</em></strong> : Download the Extension to have the featue for Google Chrome to take screenshots (good way for training documentation) :</p>
<p><a href="https://chrome.google.com/webstore/detail/d365-for-finance-and-oper/inifapcodikhojbnbafaalgbgkfmnlob/related?hl=en-GB" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/detail/d365-for-finance-and-oper/inifapcodikhojbnbafaalgbgkfmnlob/related?hl=en-GB</a></p>
<p>Go like in an UAT instance, where you have some DEMO data in it or maybe already a copy of your production/live database. Of course, the mandatory data is to have all your reference and master data in it in order to have a whole complete process. (like for my customer flow : Customer Group, Tax Group etc…)</p>
<p>When you are in FinOps, go to the top right !</p>
<p></p>
<p>![Screenshot 2020-04-20_21-43-54-968.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_21-43-54-968.png)</p>
<p>Click on “Create recording”</p>
<p>Give it a name and description if you want. (good if you have multiple different type of flows to create a customer) - activate take screenshots option if you also intend to generate documentation, in addition to being able to recover the trace file for automated tests.</p>
<p></p>
<p>![Screenshot 2020-04-20_21-48-41-193.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_21-48-41-193.png)</p>
<p>Well, next, you need to do your process :)</p>
<p>After end your task recorder, and keep in a safe place your .AXTR files ; like in a Sharepoint folder.</p>
<p></p>
<p>![Screenshot 2020-04-20_21-54-08-943.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_21-54-08-943.png)</p>
<p><strong>Keep in mind that Task Records will need to be adjust in your lifecycle of your project, maybe if you change your process or maybe because you have added a new custom field.</strong><br>
And here are few more best practices :</p>
<p>Follow these guidelines when authoring and recording your test cases, especially if you are planning to automate test execution. The process and tools described in this article apply to business process acceptance tests. They are not meant to replace component and unit testing that is typically owned by developers.</p>
<ul>
<li>
<p>Author a limited number of test cases that, when combined, cover complete end-to-end processes.</p>
</li>
<li>
<p>Focus on business processes that have been customized.</p>
</li>
<li>
<p>An individual test case (recording) should cover one or two business tasks only, typically executed by one person. This simplifies task recording maintenance. Do not combine a complete end-to-end business process such as &ldquo;Procure to Pay&rdquo; or &ldquo;Order to Cash&rdquo; into one large task recording. For example, instead of having RFQ &gt; Purchase Order &gt; Product Receipt &gt; Vendor Invoice &gt; Vendor Payment as one test case, divide the process into three or four test cases. You will have the opportunity to combine these tests into an ordered test suite later.</p>
</li>
<li>
<p>A test case should have at least one validation. Try to validate critical fields that cover the impact of other fields. For example: Validation of totals on sales or purchase orders cover the unit price/quantity/discount/tax &hellip;etc.</p>
</li>
<li>
<p>Avoid printing a report in a test case. If a test case needs to print a report, it should be selected on screen.</p>
</li>
<li>
<p>80+% of test cases should be of transactions or source documents. Master data should be limited to up to 20% of test cases only.</p>
</li>
</ul>
<p>Saying that, let’s go again in our BPM library that we have created earlier. We will attach our task recorder file in it.</p>
<p>For that, just click on upload.</p>
<p></p>
<p>![Screenshot 2020-04-20_22-01-29-423.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-01-29-423.png)</p>
<p>Now we will sync it directly to our AzureDevOps Project, to create all our test plan and create every unit test case for every process that you have attached a task recorder file.</p>
<p>You will need to click on the 3 dots, right after the Collapse button and click on the two like me :</p>
<p></p>
<p>![Screenshot 2020-04-20_22-03-46-975.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-03-46-975.png)</p>
<p>Now you can go to your Azure DevOps / VSTS tenant.</p>
<p>You will need an account that have a MSDN subscription or at least a Basic Licence + test plan in order to do automate testing. So take 1 or 2 licences, essentially for the account that will configure all test plan. The basic licence is at 5 euro/month/user and the basic + test plan is more than 40 euro/month/user so not the same cost, but compared to the gain in effort by continuing to carry out only manual tests, believe me you will necessarily largely recover that…</p>
<p>I have created a Test Plan called : RSAT for the tool Regression Suite Automation Tool that I will explain after. But you can call it more with a friendly name, like “Regression test for 10.0.9 upgrade”. Of course it’s like a folder of every test case suite that we will attach after, to have a global overview of every tests cases.</p>
<p>It will be also here that you can see Chart, progression testing report, based on a time purpose, priority, logs. You can copy/past a whole test plan, every week-month, like for upgrade process.</p>
<p>Attach like me the test cases that are normally been in VSTS, since you have synced in LCS before in the BPM.</p>
<p></p>
<p>![Screenshot 2020-04-20_22-13-33-236.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-13-33-236.png)</p>
<p>You will see in a test case, like the Customer flow that I’ve done before some informations. The tag “LCS:TestCases” in order to quickly see all synced tests with BPM in LCS. You will see every steps actions, and in attachment you will have the .AXTR file needed for automate the test with RSAT after.</p>
<p></p>
<p>![Screenshot 2020-04-20_22-17-06-855.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-17-06-855.png)</p>
<hr>
<ol start="3">
<li><strong>2/ RSAT - Regression Suite Automation Tool</strong></li>
</ol>
<hr>
<p><strong>Overview</strong></p>
<p>The Regression suite automation tool (RSAT) significantly reduces the time and cost of user acceptance testing (UAT). UAT is typically required before you take a Microsoft application update, or before you apply custom code and configurations to your production environment. RSAT lets functional power users record business tasks by using Task recorder and then convert the recordings into a suite of automated tests, without having to write source code. For more information about Task recorder, see <a href="https://www.powerazure365.com/user-interface/task-recorder" target="_blank" rel="noopener noreferrer">Task recorder resources</a>.</p>
<p>RSAT is fully integrated with Microsoft Azure DevOps for test execution, reporting, and investigation. Test parameters are decoupled from test steps and stored in Microsoft Excel files.</p>
<p>RSAT usage is described here in this schema :</p>
<p></p>
<p>![end-to-end.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/end-to-end.png)</p>
<p>First, you will need to install it :)</p>
<p>Windows 10 and needed also Excel app.</p>
<p><a href="https://www.microsoft.com/download/details.aspx?WT.mc_id=BA-MVP-5003744&amp;id=57357" target="_blank" rel="noopener noreferrer">Download RSAT</a></p>
<p>But before going to RSAT directly, go back to your Azure DevOps, you will need a Personal Access Token.</p>
<p></p>
<p>![Sans titre.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Sans+titre.png)</p>
<p></p>
<p>![Screenshot 2020-04-20_23-51-45-050.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-51-45-050.png)</p>
<p>Create a new one for RSAT, and make him as expiration date in 1 year, to be safe :)</p>
<p>After you need to configure it, to link of course on which environment you need to do your automate testing and. also the Azure DevOps project in which you have setup all test cases.</p>
<p></p>
<p>![RSAT-1.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-1.png)</p>
<p>Change your Azure DevOps URL, put your Personal Access Token generated before, you will now use your Project and the Test Plan created in Azure DevOps before.</p>
<p></p>
<p>![RSAT-2.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-2.png)</p>
<p>After it’s a little more complicated.</p>
<p>Put your hostname, the URL of your FinOps instance without HTTPS.</p>
<p>For the SOAP Hostname, it’s the same but with <strong>aossoap</strong> between the firstpart of your hostname and .sandbox part. Like me below :</p>
<p></p>
<p>![RSAT-3.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-3.png)</p>
<p>Put your admin user name email address. The account that will launch every test in your instance. And the company name / legal entity. Keep in mind that we can change on every test the legal entity in a parameter file.</p>
<p>For the Thumbprint, it’s a certificate to generate on your computer. Click on new. Copy the number. You will need a technical guy to put it in the environment where you plan to execute the TEST.</p>
<p>In the wif.config located in K:\AosService\WebRoot</p>
<p>-&gt; Don’t forget to apply on each AOS Server !</p>
<pre><code>&lt;authority name=&quot;CN=127.0.0.1&quot;&gt;
    &lt;keys&gt;
        &lt;add thumbprint=&quot;xxxxxxxxxxxxxxxxxxxxxxxxx&quot; /&gt;
    &lt;/keys&gt;
        &lt;validIssuers&gt;
            &lt;add name=&quot;CN=127.0.0.1&quot; /&gt;
        &lt;/validIssuers&gt;
&lt;/authority&gt;    
</code></pre>
<p>Save a Working Directory folder and also Default Browser to Google Chrome. Don’t forget after configuration to click on Save As, in order to save the configuration and maybe share it for other consultants in your project.<br>
Load your test plan and click after on Generate Test Execution and Parameters files.</p>
<p></p>
<p>![RSAT-3.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-3(1).png)</p>
<p></p>
<p>![You need to have all your test cases here and now you can check on each the Parameter files and change everything needed.](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-4.png)</p>
<p>You need to have all your test cases here and now you can check on each the Parameter files and change everything needed.</p>
<p></p>
<p></p>
<p></p>
<p>![RSAT-5.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-5.png)![RSAT-6.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-6.png)![RSAT-7.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-7.png)</p>
<p>You can pick one, like the Customer RSAT process. And click on “RUN” ; before a small warning , click on YES.</p>
<p></p>
<p>![RSAT-8.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-8.png)</p>
<p>Normally, Google Chrome will launch automatically and test everything without any actions on your hand !!</p>
<p>So maybe a good way is to install RSAT on a network server machine or a VM in Azure and launch every tests on night, without to keep your local machine / PC turned on : because it can takes some time, depending on the amount of test you have.</p>
<p>At the end, you can see the result directly in RSAT on each of them.</p>
<p>But the best way is after to upload the result directly on Azure DevOps. So that everyone, especially Technical Guys can get the log files in there if they are some errors.</p>
<p>For that, click on Upload part and “all modified automation files”</p>
<p></p>
<p>![RSAT-9.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/RSAT-9.png)</p>
<p>Now go to your Azure DevOps Test Plan.</p>
<p>You can see all Recent test runs</p>
<p></p>
<p>![Screenshot 2020-04-21_00-30-44-231.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-21_00-30-44-231.png)</p>
<p>If we go to the one of RSAT that goes well.</p>
<p></p>
<p>![Screenshot 2020-04-21_00-32-06-314.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-21_00-32-06-314.png)</p>
<p>You can have all the Log needed, tracked by RSAT.</p>
<p>On something that went wrong… but in unit test with SysTestFramework that we will see after, the developer can have the .AXTR file generated for her/him.<br>
Also we can generate automatically a Bug/Work Item based on a failed test and alert me :)</p>
<p></p>
<p>![Screenshot 2020-04-21_00-31-37-242.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-21_00-31-37-242.png)</p>
<p>For Project Manager, we have also a report that we can change if you want !</p>
<p></p>
<p>![Screenshot 2020-04-21_00-33-18-567.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-21_00-33-18-567.png)</p>
<p>To conclude RSAT, yes we can deeper. I don’t have setup this kind of thing in this example, but you can of course :</p>
<ul>
<li>
<p>Create derivated test case : The Regression suite automation tool (RSAT) lets you to use the same task recording with multiple test cases, so that you can run a task with different data configurations. To do this, select a test case in the Regression suite automation tool and then select <strong>New &gt; Create Derived Test Case</strong>. This creates a child test case in Azure DevOps. The resulting derived test case is linked to its parent test case in Azure DevOps. It has an Excel parameters file attached but no recording file. The derived test case will appear in the Regression suite automation tool grid under the same test suite with the <strong>Derived</strong> column selected. Derived test cases are named after their parent test case with a numeric suffix.</p>
</li>
<li>
<p>Chaining : One of the key features of the Regression Suite Automation Tool is the chaining of test cases, that is, the ability of a test to pass values to other tests. Test cases are executed according to their defined order in the Azure DevOps test plan, which can also be updated in the test tool itself. It is important to correctly order the tests if you want to pass variables from one test case to the other.</p>
<p>To save the value of a variable while recording the test in Task Recorder, right-click the field and select <strong>Task recorder &gt; Copy</strong>, as shown below. This will save the variable in the recording file. This variable can be used in subsequent tests.</p>
</li>
<li>
<p>Validate expected values : An important component of a test case is validation of expected values. You can define validation parameters during the authoring of your test cases using Task Recorder. While recording, right-click on a control and select <strong>CurrentValue</strong> under the <strong>Task Recorder &gt; Validate</strong> menu. This action becomes a validation step that you can use with the Regression suite automation tool. The control value will become a validation variable in the automatically generated Excel parameters file. The menu item is shown in the following image.</p>
</li>
</ul>
<p></p>
<p>![When RSAT generates the Excel parameter file for a test case, validation steps are added as shown in the image below. You can enter the expected value to use during execution of the test case.](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/validate-test-case.png)</p>
<p>When RSAT generates the Excel parameter file for a test case, validation steps are added as shown in the image below. You can enter the expected value to use during execution of the test case.</p>
<p></p>
<p>![rsat-validate-variables.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/rsat-validate-variables.png)</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/perf-test/rsat/rsat-validate-expected?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">Learn more RSAT</a></p>
<hr>
<ol start="4">
<li><strong>3/ SysTestFramework and ATL : Acceptance test library</strong></li>
</ol>
<hr>
<p></p>
<p>![54.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/54.png)</p>
<ol start="5">
<li><strong>Key concepts</strong></li>
</ol>
<hr>
<ul>
<li>
<p>Use SysTest Framework to author unit/component test code.</p>
</li>
<li>
<p>Test isolation</p>
</li>
<li>
<p>Test module creation to manage test code and FormAdaptors.</p>
</li>
<li>
<p>Import Task Recorder recordings into Visual Studio to generate test code.</p>
</li>
<li>
<p>Overview of the ATL framework</p>
</li>
<li>
<p>Integrate a Test module with a build machine.</p>
</li>
</ul>
<p>Clearly this part is mostly for developers, but I think it’s useful also for project manager or functional consultant to know which unit test in the code can be done, despite the RSAT tool that we see before. In fact, all task recorders can be a good start to include it in the Development machine to generate simple test case, but I will show also other Framework that developers can use to be more confident before pushing a new development in a TEST environment…</p>
<p>So, first best practice, before going to start writing tests, you will need a new model for that ! To achieve that, go to your Visual Studio and create a new one like me :</p>
<p></p>
<p>![Screenshot 2020-04-20_22-43-39-536.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-43-39-536.png)</p>
<p>Important after, select your reference package. Like me, I select my main package of custom codes - solution to TEST</p>
<p></p>
<p>![Screenshot 2020-04-20_22-44-11-534.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-44-11-534.png)</p>
<p>Check : Create new project, it will here where you will place all your unit tests - and don’t of course make it as the default model for new projects.</p>
<p></p>
<p>![Screenshot 2020-04-20_22-44-49-881.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-44-49-881.png)</p>
<p>After the model is created, change the reference packages, to include <strong>ALL FormsAdaptators models,</strong> and the main one : <strong>Test essentials model</strong> !</p>
<p>Also put your main VS project as the Startup object !</p>
<p></p>
<p>![Screenshot 2020-04-20_22-46-10-271.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-46-10-271.png)</p>
<p>So now, you have your TEST model, all referenced packages included, include your main one of course. You can now built custom test unit code with SysTestFramework;</p>
<p>On my side, I will use the Task Recorder Add-in in VS, but of course, <strong>you can built your own one without addin</strong>. Especially to test custom method on a custom class etc…</p>
<p>To generate test class automatically, click on Addins / Import Task Recording</p>
<p></p>
<p>![Screenshot 2020-04-20_22-56-02-444.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_22-56-02-444.png)</p>
<p>Import the file that you have in the AzureDevOps Unit Test case that we see before (like me : Recording.xml) : as you can see BPM / LCS and Azure DevOps is not only for RSAT !<br>
Select of course your new model for testing purpose.</p>
<p></p>
<p>![Screenshot 2020-04-20_23-01-07-796.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-01-07-796.png)</p>
<p>You will have a new generate class, like me</p>
<p>Change just the top of the class, like adding a SysTestCategory, it will be helpful by doing some filters in the BUILD pipeline of Azure DevOps. Select the legal entity where you want to achieve your test and also add an AutoRollback statement in order to erase all your data after testing process.</p>
<p>This class is of course simulate each UI testing, as well as data / business process testing.</p>
<p></p>
<p>![Screenshot 2020-04-20_23-03-17-041.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-03-17-041.png)</p>
<p>You can of course directly after run &amp; check if your TEST is OK in your DEV environment by going in the Test Explorer view.</p>
<p></p>
<p>![Screenshot 2020-04-20_23-04-06-977.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-04-06-977.png)</p>
<p>This test can be now included in your version control to be used as the BUILD pipeline step in order to automatically runs every night all your SysTest Framework test.</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/perf-test/systest-filtering?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">Learn more on SysTest Framework</a></p>
<p>Since 10.0.2 I think, we have now a new Test Framework in order to achieve more testing class, as far as I seen it’s really much better &amp; easier than SysTestFramework.</p>
<p>The Acceptance test library (ATL) is an X++ test library that offers the following benefits:</p>
<ul>
<li>
<p>It lets you create consistent test data.</p>
</li>
<li>
<p>It increases the readability of test code.</p>
</li>
<li>
<p>It provides improved discoverability of the methods that are used to create test data.</p>
</li>
<li>
<p>It hides the complexity of setting up prerequisites.</p>
</li>
<li>
<p>It supports high performance of test cases.</p>
</li>
</ul>
<p>Since I don’t want to rewrite all the Microsoft documentation and since it’s very well good documented, I highly recommend to have a look on it for developer.</p>
<p><a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/perf-test/acceptance-test-library?WT.mc_id=BA-MVP-5003744" target="_blank" rel="noopener noreferrer">Learn more on ATL Framework</a></p>
<hr>
<ol start="6">
<li><strong>4/ Change your BUILD &amp; Release pipeline in AzureDevOps</strong></li>
</ol>
<hr>
<p>Now go to your AzureDevOps project, on the BUILD pipeline part. We will change the pipeline to include automate testing from SysTest Framework or ATL that we saw before.</p>
<p>On my side, I’ve got a BUILD Main, only one. So of course, change &amp; adapt on your needs. Enable the 3 tasks at the end : <strong>Test Setup, Execute and End Tests.</strong></p>
<p></p>
<p>![Screenshot 2020-04-20_23-22-37-415.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-22-37-415.png)</p>
<p>For these 3 steps, don’t need to change large setup, Just use Task version 2.* and the only change is on the Variable part, to include the SysTestCategory that I had before, remember :) also added my main model.dll that host all my test class.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>![Screenshot 2020-04-20_23-22-51-535.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-22-51-535.png)![Screenshot 2020-04-20_23-23-24-739.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-23-24-739.png)![Screenshot 2020-04-20_23-23-38-414.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-23-38-414.png)![Screenshot 2020-04-20_23-24-24-388.png](./Automate your tests for Dynamics 365 Finance and Operations — PowerAzure365_files/Screenshot+2020-04-20_23-24-24-388.png)</p>
<p>So here we are you are a Pro of Automate testing in Dynamics 365 Finance and Operations.</p>
<p>To conclude, we can also use PowerAutomate with AzureDevops : doing a morning a test plan report email ? Also create an adaptive card for deployment approval on release pipeline after seeing the test report ?</p>
<p>Well as you can see, you have now all in your hands features to achieve a lot automate testing.</p>
]]></description>
</item></channel>
</rss>
